<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Magicer]]></title>
  <subtitle><![CDATA[Magicer]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://m.magicer.xyz/"/>
  <updated>2017-03-03T15:08:17.211Z</updated>
  <id>http://m.magicer.xyz/</id>
  
  <author>
    <name><![CDATA[Magicer]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ubuntu下搭建Golang开发环境]]></title>
    <link href="http://m.magicer.xyz/2017/03/lets-go-env/"/>
    <id>http://m.magicer.xyz/2017/03/lets-go-env/</id>
    <published>2017-03-03T15:06:30.000Z</published>
    <updated>2017-03-03T15:08:17.211Z</updated>
    <content type="html"><![CDATA[<p>一个android程序猿的Go之旅!<a id="more"></a></p>
<h2 id="Ubuntu开发环境下">Ubuntu开发环境下</h2><p><a href="https://golang.org/dl/" target="_blank" rel="external">下载地址 </a></p>
<p>之后进入到下载目录后运行如下命令解压下载的go开发包到 <code>/usr/local</code>。官方推荐的目录。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -C /usr/local -xzf go1.<span class="number">8</span><span class="class">.linux-amd64</span><span class="class">.tar</span><span class="class">.gz</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置变量">配置变量</h2><p>打开<code>/etc/profile</code>或者<code>$HOME/.profile</code>文件，加入如下内容<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export <span class="constant">PATH=</span><span class="variable">$PATH</span><span class="symbol">:/usr/local/go/bin</span></span><br></pre></td></tr></table></figure></p>
<p>自定义安装目录时：GoROOT为自定义的安装目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOROOT=<span class="variable">$HOME</span>/go1.X</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br></pre></td></tr></table></figure></p>
<p>打开终端，运行<code>go env</code>看有没有输出环境信息。有则配置成功</p>
<h2 id="安装sublime">安装sublime</h2><p><a href="https://www.sublimetext.com/" target="_blank" rel="external">进入官网下载</a><br>ctrl+` 输入如下内容安装Package Control<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  urllib.request,os;pf=<span class="string">'Package Control.sublime-package'</span>;ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));open(os.path.<span class="keyword">join</span>(ipp,pf),<span class="string">'wb'</span>).<span class="keyword">write</span>(urllib.request.urlopen(<span class="string">'http://sublime.wbond.net/'</span>+pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).<span class="keyword">read</span>())</span><br></pre></td></tr></table></figure></p>
<p><a href="http://blog.magicer.xyz/2015/04/sublime-text2/" target="_blank" rel="external">Sublime安装</a><br><a href="http://blog.magicer.xyz/2015/04/sublime-chinese/" target="_blank" rel="external">sublime输入中文</a></p>
<h2 id="安装GoSublime插件">安装GoSublime插件</h2><p>安装完<code>GoSublime</code>之后可能会报错：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">MarGo:</span> Missing required environment <span class="string">variables:</span> GOPATH</span><br></pre></td></tr></table></figure></p>
<p>这是因为配置的问题。打开<code>GoSublime</code>的配置文件。<br>输入上面配置的信息<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">env</span>": </span><br><span class="line">    <span class="value">&#123; </span><br><span class="line">        "<span class="attribute">GOPATH</span>": <span class="value"><span class="string">"$HOME/golang"</span></span>,</span><br><span class="line">        "<span class="attribute">GOROOT</span>": <span class="value"><span class="string">"GOROOT=$HOME/go1.X"</span></span><br><span class="line">    </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="测试">测试</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"runtime"</span></span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.<span class="type">Printf</span>(<span class="string">"format %s"</span>, runtime.<span class="type">Version</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>Sublime</code>按<code>Ctrl+B</code>运行下程序看下输出。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一个android程序猿的Go之旅!]]>
    
    </summary>
    
      <category term="golang" scheme="http://m.magicer.xyz/tags/golang/"/>
    
      <category term="Golang" scheme="http://m.magicer.xyz/categories/Golang/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RxJava 过滤操作符]]></title>
    <link href="http://m.magicer.xyz/2017/02/rxjava-fliter-operator/"/>
    <id>http://m.magicer.xyz/2017/02/rxjava-fliter-operator/</id>
    <published>2017-02-28T14:45:50.000Z</published>
    <updated>2017-02-28T16:05:40.551Z</updated>
    <content type="html"><![CDATA[<h1 id="过滤操作">过滤操作</h1><p>我觉得对于过滤操作看下面这个图就够了。之后就是熟悉使用多敲敲吧。<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Filtering-Observables.html" target="_blank" rel="external">详细看着里</a></p>
<p><img src="/img/bVJUo4" alt="图片描述"><br><a id="more"></a><br><a href="##filter">filter( )</a> — 过滤数据<br><a href="##take">take</a> 只发射前面的N项数据</p>
<h2 id="filter">filter</h2><p>Filter操作符使用你指定的一个谓词函数测试数据项，只有通过测试的数据才会被发射。<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Filter.html" target="_blank" rel="external">filter( )</a> — 过滤数据</p>
<p><img src="http://reactivex.io/documentation/operators/images/filter.png" alt="filter"></p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Observable<span class="built_in">.</span>just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">               <span class="built_in">.</span>filter(<span class="literal">new</span> Func1<span class="subst">&lt;</span><span class="built_in">Integer</span>, <span class="built_in">Boolean</span><span class="subst">&gt;</span>() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   <span class="keyword">public</span> <span class="built_in">Boolean</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</span><br><span class="line">                       <span class="keyword">return</span> <span class="built_in">integer</span><span class="subst">%</span><span class="number">2</span> <span class="subst">==</span><span class="number">0</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)<span class="built_in">.</span>subscribe(<span class="literal">new</span> Action1<span class="subst">&lt;</span><span class="built_in">Integer</span><span class="subst">&gt;</span>() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</span><br><span class="line">               <span class="keyword">Log</span><span class="built_in">.</span>i(<span class="built_in">TAG</span>, <span class="string">"call: "</span><span class="subst">+</span><span class="built_in">integer</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="ofType">ofType</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ofType</span></span><br><span class="line"><span class="comment">//ofType是filter操作符的一个特殊形式。它过滤一个Observable只返回指定类型的数据。</span></span><br><span class="line"><span class="comment">//ofType默认不在任何特定的调度器上指定。</span></span><br><span class="line">Observable<span class="built_in">.</span>just(<span class="number">1</span>,<span class="string">"Arya Stark"</span>,<span class="number">3</span>,<span class="string">"jon snow"</span>,<span class="number">5</span>,<span class="string">"Tyrion"</span>,<span class="number">7</span>)</span><br><span class="line">        <span class="built_in">.</span>ofType(<span class="built_in">String</span><span class="built_in">.</span>class)</span><br><span class="line">        <span class="built_in">.</span>subscribe(<span class="literal">new</span> Action1<span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">String</span> s) &#123;</span><br><span class="line">                <span class="keyword">Log</span><span class="built_in">.</span>i(<span class="built_in">TAG</span>, <span class="string">"call: "</span><span class="subst">+</span>s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="take">take</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Take.html" target="_blank" rel="external">take</a> 只发射前面的N项数据</p>
<p><img src="http://reactivex.io/documentation/operators/images/take.png" alt="take"></p>
<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>[] strs = &#123;<span class="string">"Arya Stark"</span>,<span class="string">"jon snow"</span>,<span class="string">"Tyrion"</span>&#125;;</span><br><span class="line">       Observable.from(strs)</span><br><span class="line">               .take(<span class="number">2</span>)</span><br><span class="line">               .subscribe(<span class="keyword">new</span> Action1&lt;<span class="built_in">String</span>&gt;() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   <span class="keyword">public</span> void <span class="keyword">call</span>(<span class="built_in">String</span> s) &#123;</span><br><span class="line">                       <span class="built_in">Log</span>.i(TAG, <span class="string">"call: "</span>+s);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="takelast">takelast</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/TakeLast.html" target="_blank" rel="external">takelast</a>发射Observable发射的最后N项数据</p>
<p><img src="http://reactivex.io/documentation/operators/images/takeLast.n.png" alt="takelast"><br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>[] strs = &#123;<span class="string">"Arya Stark"</span>,<span class="string">"jon snow"</span>,<span class="string">"Tyrion"</span>&#125;;</span><br><span class="line">        Observable.from(strs)</span><br><span class="line">                .takeLast(<span class="number">2</span>)</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;<span class="built_in">String</span>&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="keyword">public</span> void <span class="keyword">call</span>(<span class="built_in">String</span> s) &#123;</span><br><span class="line">                        <span class="built_in">Log</span>.i(TAG, <span class="string">"call: "</span>+s);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="last">last</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Last.html" target="_blank" rel="external">last</a>只发射最后一项（或者满足某个条件的最后一项）数据<br><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/last.c.png" alt="last"><br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>[] strs = &#123;<span class="string">"Arya Stark"</span>,<span class="string">"jon snow"</span>,<span class="string">"Tyrion"</span>&#125;;</span><br><span class="line">      Observable.from(strs).last()</span><br><span class="line">              .subscribe(<span class="keyword">new</span> Action1&lt;<span class="built_in">String</span>&gt;() &#123;</span><br><span class="line">                  @Override</span><br><span class="line">                  <span class="keyword">public</span> void <span class="keyword">call</span>(<span class="built_in">String</span> s) &#123;</span><br><span class="line">                      <span class="built_in">Log</span>.i(TAG, <span class="string">"call: "</span>+s);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="skip">skip</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Skip.html" target="_blank" rel="external">skip</a>抑制Observable发射的前N项数据<br><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/skip.c.png" alt="skip"><br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable<span class="built_in">.</span>just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">                <span class="built_in">.</span><span class="keyword">skip</span>(<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">.</span>subscribe(<span class="literal">new</span> Action1<span class="subst">&lt;</span><span class="built_in">Integer</span><span class="subst">&gt;</span>() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</span><br><span class="line">                        <span class="keyword">Log</span><span class="built_in">.</span>i(<span class="built_in">TAG</span>, <span class="string">"call: "</span><span class="subst">+</span><span class="built_in">integer</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="skiplast">skiplast</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/SkipLast.html" target="_blank" rel="external">skiplast</a>//抑制Observable发射的后N项数据<br><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/skipLast.c.png" alt="skiplast"></p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable<span class="built_in">.</span>just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">               <span class="built_in">.</span>skipLast(<span class="number">2</span>)</span><br><span class="line">               <span class="built_in">.</span>subscribe(<span class="literal">new</span> Action1<span class="subst">&lt;</span><span class="built_in">Integer</span><span class="subst">&gt;</span>() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</span><br><span class="line">                       <span class="keyword">Log</span><span class="built_in">.</span>i(<span class="built_in">TAG</span>, <span class="string">"call: "</span><span class="subst">+</span><span class="built_in">integer</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="distinct">distinct</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Distinct.html" target="_blank" rel="external">distinct</a>抑制（过滤掉）重复的数据项<br><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/distinct.c.png" alt="distinct"></p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Observable</span>.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">                .<span class="keyword">distinct</span>()</span><br><span class="line">                .subscribe(new <span class="type">Action1</span>&lt;<span class="type">Integer</span>&gt;() &#123;</span><br><span class="line">                    @<span class="type">Override</span></span><br><span class="line">                    public <span class="type">void</span> call(<span class="type">Integer</span> integer) &#123;</span><br><span class="line">                        <span class="type">Log</span>.i(<span class="type">TAG</span>, <span class="string">"call: "</span>+integer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="debounce">debounce</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Debounce.html" target="_blank" rel="external">debounce</a>仅在过了一段指定的时间还没发射数据时才发射一个数据<br><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/debounce.png" alt="debounce"></p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable<span class="built_in">.</span>just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</span><br><span class="line">                <span class="built_in">.</span>debounce(<span class="number">2</span>,TimeUnit<span class="built_in">.</span>SECONDS)</span><br><span class="line">                <span class="built_in">.</span>subscribe(<span class="literal">new</span> Action1<span class="subst">&lt;</span><span class="built_in">Integer</span><span class="subst">&gt;</span>() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</span><br><span class="line">                        <span class="keyword">Log</span><span class="built_in">.</span>i(<span class="built_in">TAG</span>, <span class="string">"call: "</span><span class="subst">+</span><span class="built_in">integer</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="elementAt">elementAt</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/ElementAt.html" target="_blank" rel="external">elementat</a>只发射第N项数据<br><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/elementAt.c.png" alt="elementat"><br>RxJava将这个操作符实现为elementAt，给它传递一个基于0的索引值，它会发射原始Observable数据序列对应索引位置的值，如果你传递给elementAt的值为5，那么它会发射第六项的数据。</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable<span class="built_in">.</span>just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">                <span class="built_in">.</span>elementAt(<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">.</span>subscribe(<span class="literal">new</span> Action1<span class="subst">&lt;</span><span class="built_in">Integer</span><span class="subst">&gt;</span>() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</span><br><span class="line">                        <span class="keyword">Log</span><span class="built_in">.</span>i(<span class="built_in">TAG</span>, <span class="string">"call: "</span><span class="subst">+</span><span class="built_in">integer</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;); <span class="comment">//输出3</span></span><br></pre></td></tr></table></figure>
<h2 id="sample">sample</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Sample.html" target="_blank" rel="external">sample</a>定期发射Observable最近发射的数据项<br><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/sample.png" alt="sample"></p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable.interval(<span class="number">1</span>,TimeUnit.SECONDS)</span><br><span class="line">                .sample(<span class="number">5</span>,TimeUnit.SECONDS)</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;<span class="keyword">Long</span>&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">call</span>(<span class="keyword">Long</span> aLong) &#123;</span><br><span class="line">                        Log.i(TAG, <span class="string">"call: "</span>+aLong);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="ignoreElements">ignoreElements</h2><p>不发射任何数据，只发射Observable的终止通知</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="过滤操作">过滤操作</h1><p>我觉得对于过滤操作看下面这个图就够了。之后就是熟悉使用多敲敲吧。<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Filtering-Observables.html">详细看着里</a></p>
<p><img src="/img/bVJUo4" alt="图片描述"><br>]]>
    
    </summary>
    
      <category term="RxJava" scheme="http://m.magicer.xyz/tags/RxJava/"/>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RxJava 变换操作符]]></title>
    <link href="http://m.magicer.xyz/2017/02/rxjava-transform-operator/"/>
    <id>http://m.magicer.xyz/2017/02/rxjava-transform-operator/</id>
    <published>2017-02-27T14:37:29.000Z</published>
    <updated>2017-02-28T15:17:50.534Z</updated>
    <content type="html"><![CDATA[<h2 id="变换操作">变换操作</h2><p>摘抄自<a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Transforming-Observables.html" target="_blank" rel="external">Reactive X文档中文翻译</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Map.html" target="_blank" rel="external">map</a> 对序列的每一项都应用一个函数来变换Observable发射的数据序列</p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/FlatMap.html" target="_blank" rel="external">flatmap</a> 将Observable发射的数据集合变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable</p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Scan.html" target="_blank" rel="external">scan</a> 对Observable发射的每一项数据应用一个函数，然后按顺序依次发射每一个值   </p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/GroupBy.html" target="_blank" rel="external">groupBy</a> 将Observable分拆为Observable集合，将原始Observable发射的数据按Key分组，每一个Observable发射一组不同的数据</p>
<p>[buffer][5 ?<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Window.html" target="_blank" rel="external">window</a> 定期将来自Observable的数据分拆成一些Observable窗口，然后发射这些窗口，而不是每次发射一项<br><a id="more"></a></p>
<h2 id="map">map</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Map.html" target="_blank" rel="external">map</a> 对序列的每一项都应用一个函数来变换Observable发射的数据序列</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如将每个字符串拼接上 \n from magicer</span></span><br><span class="line">        <span class="keyword">String</span>[] <span class="built_in">str</span> = &#123;<span class="string">"winter is coming"</span>,<span class="string">"the king in the north"</span>&#125;;</span><br><span class="line">        Observable.from(<span class="built_in">str</span>).<span class="built_in">map</span>(<span class="keyword">new</span> Func1&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">String</span> call(<span class="keyword">String</span> s) &#123;</span><br><span class="line">                <span class="keyword">return</span> s+<span class="string">"\n from magicer"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Action1&lt;<span class="keyword">String</span>&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> call(<span class="keyword">String</span> s) &#123;</span><br><span class="line">                Log.i(TAG, <span class="string">"call: "</span>+s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="flatmap">flatmap</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/FlatMap.html" target="_blank" rel="external">flatmap</a> 将Observable发射的数据集合变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里的nickName是个List&lt;String&gt;</span></span><br><span class="line">   Observable<span class="built_in">.</span>from(mStudents)<span class="built_in">.</span>flatMap(<span class="literal">new</span> Func1<span class="subst">&lt;</span>Student, Observable<span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;&gt;</span>() &#123;</span><br><span class="line">       @Override</span><br><span class="line">       <span class="keyword">public</span> Observable<span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span> call(Student student) &#123;</span><br><span class="line">           <span class="keyword">return</span> Observable<span class="built_in">.</span>from(student<span class="built_in">.</span>getNickNames());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)<span class="built_in">.</span>subscribe(<span class="literal">new</span> Action1<span class="subst">&lt;</span><span class="built_in">String</span><span class="subst">&gt;</span>() &#123;</span><br><span class="line">       @Override</span><br><span class="line">       <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">String</span> s) &#123;</span><br><span class="line">           <span class="keyword">Log</span><span class="built_in">.</span>i(<span class="built_in">TAG</span>, <span class="string">"call: "</span><span class="subst">+</span>s);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="scan">scan</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Scan.html" target="_blank" rel="external">scan</a> 对Observable发射的每一项数据应用一个函数，然后按顺序依次发射每一个值</p>
<p><img src="http://reactivex.io/documentation/operators/images/scan.png" alt="scan"></p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Observable<span class="built_in">.</span>just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)<span class="built_in">.</span>scan(<span class="literal">new</span> Func2<span class="subst">&lt;</span><span class="built_in">Integer</span>, <span class="built_in">Integer</span>, <span class="built_in">Integer</span><span class="subst">&gt;</span>() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           <span class="keyword">public</span> <span class="built_in">Integer</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>, <span class="built_in">Integer</span> integer2) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="built_in">integer</span><span class="subst">+</span>integer2;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)<span class="built_in">.</span>subscribe(<span class="literal">new</span> Action1<span class="subst">&lt;</span><span class="built_in">Integer</span><span class="subst">&gt;</span>() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</span><br><span class="line">               <span class="keyword">Log</span><span class="built_in">.</span>i(<span class="built_in">TAG</span>, <span class="string">"call: "</span><span class="subst">+</span><span class="built_in">integer</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="groupby">groupby</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/GroupBy.html" target="_blank" rel="external">groupBy</a> 将Observable分拆为Observable集合，将原始Observable发射的数据按Key分组，每一个Observable发射一组不同的数据</p>
<p><img src="http://reactivex.io/documentation/operators/images/groupBy.c.png" alt="groupby"></p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Observable</span>.interval(<span class="number">1</span>, <span class="type">TimeUnit</span>.<span class="type">SECONDS</span>).groupBy(new <span class="type">Func1</span>&lt;<span class="type">Long</span>, <span class="type">Long</span>&gt;() &#123;</span><br><span class="line">            @<span class="type">Override</span></span><br><span class="line">            public <span class="type">Long</span> call(<span class="type">Long</span> aLong) &#123;</span><br><span class="line">                <span class="keyword">return</span> aLong %<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(new <span class="type">Action1</span>&lt;<span class="type">GroupedObservable</span>&lt;<span class="type">Long</span>, <span class="type">Long</span>&gt;&gt;() &#123;</span><br><span class="line">            @<span class="type">Override</span></span><br><span class="line">            public <span class="type">void</span> call(final <span class="type">GroupedObservable</span>&lt;<span class="type">Long</span>, <span class="type">Long</span>&gt; <span class="literal">result</span>) &#123;</span><br><span class="line">                <span class="literal">result</span>.subscribe(new <span class="type">Action1</span>&lt;<span class="type">Long</span>&gt;() &#123;</span><br><span class="line">                    @<span class="type">Override</span></span><br><span class="line">                    public <span class="type">void</span> call(<span class="type">Long</span> aLong) &#123;</span><br><span class="line">                         <span class="type">Log</span>.i(<span class="type">TAG</span>, <span class="string">"groupby call: "</span>+aLong+<span class="string">" getKey:"</span>+<span class="literal">result</span>.getKey());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="buffer">buffer</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Buffer.html" target="_blank" rel="external">buffer</a> 它定期从Observable收集数据到一个集合，然后把这些数据集合打包发射，而不是一次发射一个<br><img src="http://reactivex.io/documentation/operators/images/mergeMap.png" alt="buffer"></p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable<span class="built_in">.</span>interval(<span class="number">1</span>,TimeUnit<span class="built_in">.</span>SECONDS)</span><br><span class="line">                <span class="built_in">.</span>buffer(<span class="number">3</span>,TimeUnit<span class="built_in">.</span>SECONDS)</span><br><span class="line">                <span class="built_in">.</span>subscribe(<span class="literal">new</span> Action1<span class="subst">&lt;</span><span class="built_in">List</span><span class="subst">&lt;</span>Long<span class="subst">&gt;&gt;</span>() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">List</span><span class="subst">&lt;</span>Long<span class="subst">&gt;</span> longs) &#123;</span><br><span class="line">                        <span class="keyword">Log</span><span class="built_in">.</span>i(<span class="built_in">TAG</span>, <span class="string">"call: "</span><span class="subst">+</span>longs);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="window">window</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Window.html" target="_blank" rel="external">window</a> 定期将来自Observable的数据分拆成一些Observable窗口，然后发射这些窗口，而不是每次发射一项<br>Window和Buffer类似，但不是发射来自原始Observable的数据包，它发射的是Observables，这些Observables中的每一个都发射原始Observable数据的一个子集，最后发射一个onCompleted通知。</p>
<p><img src="http://reactivex.io/documentation/operators/images/window5.png" alt="window"><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.interval(<span class="number">1</span>,TimeUnit.SECONDS)</span><br><span class="line">               .window(<span class="number">3</span>,TimeUnit.SECONDS)</span><br><span class="line">               .subscribe(<span class="keyword">new</span> Action1&lt;Observable&lt;<span class="keyword">Long</span>&gt;&gt;() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">call</span>(<span class="keyword">final</span> Observable&lt;<span class="keyword">Long</span>&gt; longObservable) &#123;</span><br><span class="line">                       longObservable.subscribe(<span class="keyword">new</span> Action1&lt;<span class="keyword">Long</span>&gt;() &#123;</span><br><span class="line">                           @Override</span><br><span class="line">                           <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">call</span>(<span class="keyword">Long</span> aLong) &#123;</span><br><span class="line">                               Log.i(TAG, <span class="string">"call: "</span>+aLong);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="变换操作">变换操作</h2><p>摘抄自<a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Transforming-Observables.html">Reactive X文档中文翻译</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Map.html">map</a> 对序列的每一项都应用一个函数来变换Observable发射的数据序列</p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/FlatMap.html">flatmap</a> 将Observable发射的数据集合变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable</p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Scan.html">scan</a> 对Observable发射的每一项数据应用一个函数，然后按顺序依次发射每一个值   </p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/GroupBy.html">groupBy</a> 将Observable分拆为Observable集合，将原始Observable发射的数据按Key分组，每一个Observable发射一组不同的数据</p>
<p>[buffer][5 ?<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Window.html">window</a> 定期将来自Observable的数据分拆成一些Observable窗口，然后发射这些窗口，而不是每次发射一项<br>]]>
    
    </summary>
    
      <category term="RxJava" scheme="http://m.magicer.xyz/tags/RxJava/"/>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RxJava Creat操作符]]></title>
    <link href="http://m.magicer.xyz/2017/02/rxjava-create-operator/"/>
    <id>http://m.magicer.xyz/2017/02/rxjava-create-operator/</id>
    <published>2017-02-25T16:29:06.000Z</published>
    <updated>2017-02-28T15:17:50.482Z</updated>
    <content type="html"><![CDATA[<p>RxJava是 ReactiveX 在JVM上的一个实现，ReactiveX使用Observable序列组合异步和基于事件的程序。<a id="more"></a></p>
<h2 id="教程">教程</h2><p><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">抛物线大神的RxJava教程</a></p>
<h2 id="依赖">依赖</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex:rxjava:1.0.14'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex:rxandroid:1.0.1'</span></span><br></pre></td></tr></table></figure>
<h2 id="创建操作符">创建操作符</h2><h3 id="create">create</h3><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Create.html" target="_blank" rel="external">Create操作文档</a></p>
<p>摘要:  你可以使用Create操作符从头开始创建一个Observable，给这个操作符传递一个接受观察者作为参数的函数，编写这个函数让它的行为表现为一个Observable—恰当的调用观察者的onNext，onError和onCompleted方法。</p>
<p>最常用最基础的创建Observable对象的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">           <span class="annotation">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">               subscriber.onNext(<span class="string">"hello"</span>);</span><br><span class="line">               subscriber.onNext(<span class="string">"rxjava"</span>);</span><br><span class="line">               subscriber.onCompleted();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">           <span class="annotation">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">               Log.i(TAG, <span class="string">"call: "</span>+s);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="from">from</h3><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/From.html" target="_blank" rel="external">from文档</a><br>摘要:  在RxJava中，from操作符可以转换Future、Iterable和数组。对于Iterable和数组，产生的Observable会发射Iterable或数组的每一项数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">String[] strs = &#123;<span class="string">"hello"</span>,<span class="string">"world"</span>,<span class="string">"!"</span>&#125;;</span><br><span class="line">       <span class="comment">//将一个Iterable, 一个Future, 或者一个数组转换成一个Observable</span></span><br><span class="line">       <span class="comment">//from默认不在任何特定的调度器上执行。然而你可以将Scheduler</span></span><br><span class="line">       <span class="comment">// 作为可选的第二个参数传递给Observable，它会在那个调度器上管理这个Future</span></span><br><span class="line">       Observable.from(strs)</span><br><span class="line">               .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">                   <span class="annotation">@Override</span></span><br><span class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                       Log.i(TAG, <span class="string">"call: "</span> + s);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;, <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</span><br><span class="line">                   <span class="annotation">@Override</span></span><br><span class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                       Log.i(TAG, <span class="string">"call: "</span> + throwable.toString());</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;, <span class="keyword">new</span> Action0() &#123;</span><br><span class="line">                   <span class="annotation">@Override</span></span><br><span class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                       Log.i(TAG, <span class="string">"call: complete"</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="just">just</h3><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Just.html" target="_blank" rel="external">just文档</a><br>摘要: Just将单个数据转换为发射那个数据的Observable。<br>Just类似于From，但是From会将数组或Iterable的数据取出然后逐个发射，而Just只是简单的原样发射，将数组或Iterable当做单个数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, <span class="string">"call: "</span>+integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="range">range</h3><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Range.html" target="_blank" rel="external">range文档</a><br> 摘要: Range操作符发射一个范围内的有序整数序列，你可以指定范围的起始和长度。</p>
<p>RxJava将这个操作符实现为range函数，它接受两个参数，一个是范围的起始值，一个是范围的数据的数目。如果你将第二个参数设为0，将导致Observable不发射任何数据（如果设置为负数，会抛异常）。</p>
<p>range默认不在任何特定的调度器上执行。有一个变体可以通过可选参数指定Scheduler。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Observable.range(<span class="number">3</span>,<span class="number">4</span>).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">           <span class="annotation">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">               Log.i(TAG, <span class="string">"call: "</span>+integer); <span class="comment">// 3,4,5,6</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure>
<p>从3开始发送4个Integer</p>
<h3 id="timer">timer</h3><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Timer.html" target="_blank" rel="external">timer文档</a><br>创建一个Observable，它在一个给定的延迟后发射一个特殊的值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Observable.timer(<span class="number">1</span>, TimeUnit.SECONDS).subscribe(<span class="keyword">new</span> Action1&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, <span class="string">"call: "</span>+aLong); <span class="comment">//延时1秒执行</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>创建延时任务，每1秒后发射一次。</p>
<h3 id="interval">interval</h3><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Interval.html" target="_blank" rel="external">interval文档</a><br>创建一个按固定时间间隔发射整数序列的Observable<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS).subscribe(<span class="keyword">new</span> Action1&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, <span class="string">"call: "</span>+aLong);<span class="comment">//0，1,2,3,4,5......</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>每隔一秒发送一个Integer数据。</p>
<h3 id="repeat">repeat</h3><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Repeat.html" target="_blank" rel="external">repeat文档</a><br>创建一个发射特定数据重复多次的Observable<br>RxJava将这个操作符实现为repeat方法。它不是创建一个Observable，而是重复发射原始Observable的数据序列，这个序列或者是无限的，或者通过repeat(n)指定重复次数。</p>
<p>repeat操作符默认在trampoline调度器上执行。有一个变体可以通过可选参数指定Scheduler。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">2</span>,<span class="number">3</span>).repeat(<span class="number">2</span>).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                Log.i(TAG, <span class="string">"call: "</span>+integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<p>重复发射两次Observable对象</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>RxJava是 ReactiveX 在JVM上的一个实现，ReactiveX使用Observable序列组合异步和基于事件的程序。]]>
    
    </summary>
    
      <category term="RxJava" scheme="http://m.magicer.xyz/tags/RxJava/"/>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Retrofit 2.0的基本使用]]></title>
    <link href="http://m.magicer.xyz/2017/01/android-retrofit2-basic/"/>
    <id>http://m.magicer.xyz/2017/01/android-retrofit2-basic/</id>
    <published>2017-01-13T15:36:27.000Z</published>
    <updated>2017-01-13T15:37:57.679Z</updated>
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p><code>Retrofit</code>是<code>square</code>公司全家桶中的一员。在okhttp基础上封装的一个网络请求框架。其他废话就不多说了。有几篇不错的文章，可以看一下。<br><a href="https://square.github.io/retrofit/" target="_blank" rel="external">官方介绍</a><br><a href="http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=1117" target="_blank" rel="external">深入浅出 Retrofit，这么牛逼的框架你们还不来看看？</a><br><a href="https://mobupiaobo.gitbooks.io/retrofit-2-0/content/" target="_blank" rel="external">Retrofit2.0</a></p>
<h2 id="集成">集成</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:retrofit:2.1.0'</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="使用">使用</h2><p>我们需要为接口地址定义一个接口，如下。当接口为：<code>http://192.168.0.78:8080/login</code>时，我们可以把接口定义为这样。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">public</span> <span class="tag">interface</span> <span class="tag">LoginApi</span> &#123;</span><br><span class="line">    <span class="variable">@FormUrlEncoded</span></span><br><span class="line">    <span class="variable">@POST</span>(<span class="string">"/login"</span>)</span><br><span class="line">    Call&lt;ResponseBody&gt; <span class="function">login</span>(<span class="variable">@Field</span>(<span class="string">"username"</span>)String username, <span class="variable">@Field</span>(<span class="string">"password"</span>)String password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在我们想要做网络请求的时候，这样写：<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Retrofit</span> retrofit = new <span class="type">Retrofit</span>.<span class="type">Builder</span>()</span><br><span class="line">        .baseUrl(<span class="string">"http://192.168.0.78:8080"</span>)</span><br><span class="line">        .build();</span><br><span class="line"><span class="type">LoginApi</span> login = retrofit.create(<span class="type">LoginApi</span>.<span class="keyword">class</span>);</span><br><span class="line"><span class="title">retrofit2</span>.<span class="type">Call</span>&lt;<span class="type">ResponseBody</span>&gt; <span class="typedef"><span class="keyword">data</span> = login.login<span class="container">(<span class="title">username</span>, <span class="title">password</span>)</span>;</span></span><br><span class="line"><span class="typedef"><span class="keyword">data</span>.enqueue<span class="container">(<span class="title">new</span> <span class="type">Callback</span>&lt;<span class="type">ResponseBody</span>&gt;()</span> <span class="container">&#123;</span><br><span class="line">    @<span class="type">Override</span></span><br><span class="line">    <span class="title">public</span> <span class="title">void</span> <span class="title">onResponse</span>(<span class="title">retrofit2</span>.<span class="type">Call</span>&lt;<span class="type">ResponseBody</span>&gt; <span class="title">call</span>, <span class="type">Response</span>&lt;<span class="type">ResponseBody</span>&gt; <span class="title">response</span>) &#123;</span><br><span class="line">        <span class="title">if</span> (<span class="title">response</span>.<span class="title">isSuccessful</span>()) &#123;</span><br><span class="line">        &#125;</span> else <span class="container">&#123;</span><br><span class="line">        &#125;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="type">Override</span></span><br><span class="line">    public void onFailure(retrofit2.<span class="type">Call</span>&lt;<span class="type">ResponseBody</span>&gt; call, <span class="type">Throwable</span> t) &#123;</span><br><span class="line">        <span class="type">Log</span>.i(<span class="type">TAG</span>, <span class="string">"retrofit  onFailure: "</span> + t.getLocalizedMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>很明显。<code>@POST</code>表明该请求是<code>POST</code>请求。<code>@Field</code>是提交的表单数据。</p>
<h3 id="各注解含义">各注解含义</h3><p>注解都是在定义接口的时候使用的。做网络请求的代码都是一样的。</p>
<h4 id="@GET">@GET</h4><p>用来表明请求方式为<code>GET</code>请求。</p>
<h4 id="@Path">@Path</h4><p>可以使用在<code>POST</code>和<code>GET</code>请求。<br>例如：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">public</span> <span class="tag">interface</span> <span class="tag">AnswerApi</span> &#123;</span><br><span class="line">    <span class="variable">@GET</span>(<span class="string">"/word/answer/&#123;barrier&#125;/&#123;stage&#125;/&#123;userId&#125;"</span>)</span><br><span class="line">    Call&lt;ResponseBody&gt; <span class="function">answer</span>(<span class="variable">@Path</span>(<span class="string">"barrier"</span>)int barrier,</span><br><span class="line">                                    <span class="variable">@Path</span>(<span class="string">"stage"</span>)int stage,</span><br><span class="line">                                    <span class="variable">@Path</span>(<span class="string">"userId"</span>)String userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="@PathMap">@PathMap</h4><h4 id="@Query">@Query</h4><p>可以使用在<code>POST</code>和<code>GET</code>请求。用来配置接口中的参数（<code>?</code>之后的）。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">public</span> <span class="tag">interface</span> <span class="tag">QuestionsApi</span> &#123;</span><br><span class="line">    <span class="variable">@GET</span>(<span class="string">"/word/questions"</span>)</span><br><span class="line">    Call&lt;ResponseBody&gt; <span class="function">getQuections</span>(<span class="variable">@Query</span>(<span class="string">"wordIds"</span>) String wordIds, <span class="variable">@Query</span>(<span class="string">"stage"</span>)int stage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="@QueryMap">@QueryMap</h4><h4 id="some">some</h4><p>看下这个就基本上没问题了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//http://m2.qiushibaike.com/article/list/text?page=1</span></span><br><span class="line"><span class="comment">//基本使用</span></span><br><span class="line">    <span class="annotation">@GET</span>(<span class="string">"/article/list/text?page=1"</span>)</span><br><span class="line">    retrofit2.<span class="function">Call&lt;ResponseBody&gt; <span class="title">getData</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态替换参数，返回解析后的数据</span></span><br><span class="line">    <span class="annotation">@GET</span>(<span class="string">"/article/list/text?"</span>)</span><br><span class="line">    <span class="function">Call&lt;Bean&gt; <span class="title">getGsonData</span><span class="params">(@Query(<span class="string">"page"</span>)</span> <span class="keyword">int</span> page)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="annotation">@GET</span>(<span class="string">"/article/list/text?"</span>)</span><br><span class="line">    <span class="function">Call&lt;Bean&gt; <span class="title">getNetData</span><span class="params">(@QueryMap Map&lt;String,String &gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@GET</span>(<span class="string">"/article/list/&#123;type&#125;?/"</span>)</span><br><span class="line">    <span class="function">Call&lt;Bean&gt; <span class="title">getDataWithPath</span><span class="params">(@Path(<span class="string">"type"</span>)</span> String type,@<span class="title">Query</span><span class="params">(<span class="string">"page"</span>)</span> <span class="keyword">int</span> page)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@FormUrlEncoded</span> <span class="comment">//POST请求必须添加</span></span><br><span class="line">    <span class="annotation">@POST</span>(<span class="string">"/login?"</span>)</span><br><span class="line">    <span class="function">Call&lt;ResponseBody&gt; <span class="title">postData</span><span class="params">(@Field(<span class="string">"username"</span>)</span> String username,@<span class="title">Field</span><span class="params">(<span class="string">"pwd"</span>)</span> String passwrod)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@FormUrlEncoded</span></span><br><span class="line">    <span class="annotation">@POST</span>(<span class="string">"/login?"</span>)</span><br><span class="line">    <span class="function">Call&lt;ResponseBody&gt; <span class="title">postMapData</span><span class="params">(@FieldMap Map&lt;String,String&gt; map)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="@Body的使用">@Body的使用</h3><p>如下所示，retrofit会把<code>Bean</code>转成json数据进行请求。默认使用的是<code>Gson</code><br>可以参考这里 <a href="http://stackoverflow.com/questions/21398598/how-to-post-raw-whole-json-in-the-body-of-a-retrofit-request" target="_blank" rel="external">链接</a></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@POST</span>(<span class="string">"/word/records"</span>)</span><br><span class="line">Call&lt;WordBrowseRecord&gt; <span class="function">postWordRecords</span>(<span class="variable">@Body</span> Bean bean);</span><br></pre></td></tr></table></figure>
<p>ps：Gson怎么控制Date型数据的转换格式呢？看下面代码你就明白了<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Gson</span> gson = <span class="keyword">new</span> <span class="type">GsonBuilder</span><span class="literal">()</span></span><br><span class="line">        .setDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">        .create<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Retrofit</span> retrofit = <span class="keyword">new</span> <span class="type">Retrofit</span>.<span class="type">Builder</span><span class="literal">()</span></span><br><span class="line">        .baseUrl(<span class="type">Constants</span>.<span class="type">HOST</span>)</span><br><span class="line">        .addConverterFactory(<span class="type">GsonConverterFactory</span>.create(gson))</span><br><span class="line">        .build<span class="literal">()</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="自定义Client">自定义Client</h3><p>在一些情况下我们需要自定义clien，来设置一些请求的参数。那么怎么设置呢？ 直接上代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  Interceptor interceptor = <span class="keyword">new</span> Interceptor() &#123;</span><br><span class="line">      <span class="annotation">@Override</span></span><br><span class="line">      <span class="keyword">public</span> okhttp3.<span class="function">Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">          Request request = chain.request()</span><br><span class="line">                  .newBuilder()</span><br><span class="line">                  .addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">                  .addHeader(<span class="string">"Accept-Encoding"</span>, <span class="string">"gzip, deflate"</span>)</span><br><span class="line">                  .addHeader(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>)</span><br><span class="line">                  .addHeader(<span class="string">"Accept"</span>, <span class="string">"*/*"</span>)</span><br><span class="line">                  .addHeader(<span class="string">"Cookie"</span>, <span class="string">"JSESSIONID"</span>)</span><br><span class="line">                  .build();</span><br><span class="line">          <span class="keyword">return</span> chain.proceed(request);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">          .addInterceptor(interceptor)</span><br><span class="line">          .build();</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//之后在使用的时候</span></span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">          .baseUrl(Constants.HOST)</span><br><span class="line">          .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">          .client(client)</span><br><span class="line">          .build();</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="简介">简介</h2><p><code>Retrofit</code>是<code>square</code>公司全家桶中的一员。在okhttp基础上封装的一个网络请求框架。其他废话就不多说了。有几篇不错的文章，可以看一下。<br><a href="https://square.github.io/retrofit/">官方介绍</a><br><a href="http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=1117">深入浅出 Retrofit，这么牛逼的框架你们还不来看看？</a><br><a href="https://mobupiaobo.gitbooks.io/retrofit-2-0/content/">Retrofit2.0</a></p>
<h2 id="集成">集成</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:retrofit:2.1.0'</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="android" scheme="http://m.magicer.xyz/tags/android/"/>
    
      <category term="retrofit" scheme="http://m.magicer.xyz/tags/retrofit/"/>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EventBus3.0的使用]]></title>
    <link href="http://m.magicer.xyz/2017/01/android-eventbus3-basic/"/>
    <id>http://m.magicer.xyz/2017/01/android-eventbus3-basic/</id>
    <published>2017-01-12T12:55:21.000Z</published>
    <updated>2017-01-12T13:13:48.346Z</updated>
    <content type="html"><![CDATA[<p><a href="http://blog.magicer.xyz/2017/01/android-eventbus3-basic/" target="_blank" rel="external">原文地址http://blog.magicer.xyz/2017/01/android-eventbus3-basic/</a></p>
<h2 id="简介">简介</h2><p><code>EventBus</code>是<code>http://greenrobot.org/</code>出的一个<code>发布者/订阅者</code>（<code>Publisher/Subscriber</code>）的事件总线。主要是用来在<code>Android</code>各个组件之间进行消息传递的。能够很好地对发布者和订阅者之间进行解耦。<br><a id="more"></a><br>下图是官方给出的一个示意图：<br><img src="/image/Android/eventbus/eventbus_3.png" height="299" width="800"></p>
<h2 id="集成">集成</h2><p> 在项目的<code>build.gradle</code>文件中添加如下依赖：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'org.greenrobot:eventbus:3.0.0'</span></span><br></pre></td></tr></table></figure></p>
<h2 id="使用">使用</h2><h3 id="发布者Publisher">发布者Publisher</h3><p> 我们使用EventBus发布消息的时候很方便，只需要一句话就可以。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().post(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure></p>
<p>在这里我们发布的可以是基本数据类型，可以是字符串，也可以是对象。</p>
<h3 id="订阅者Subscriber">订阅者Subscriber</h3><p> 当我们需要在一个<code>Activity</code>或者<code>Fragment</code>中订阅事件时。我们需要注册<code>EventBus</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().<span class="keyword">register</span>(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></p>
<p>当我们注册了<code>EventBus</code>之后我们就需要取消注册。一般在<code>Activity</code>或<code>Fragment</code>销毁的时候注销。注销的代码如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="@Subscriber">@Subscriber</h3><p> 当我们注册了<code>EventBus</code>之后。我们就需要写一个方法。来对事件进行处理。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Subscribe</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String strging)</span></span>&#123;</span><br><span class="line">    Log.i(<span class="string">"temp"</span>,<span class="string">"printf "</span>+string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在这里。<code>EventBus</code>没有对函数的命进行规定。只需要加上注解<code>@Subscribe</code>，方法为<code>public void</code>即可。只要方法的参数跟<code>post</code>时的类型一致即可接受到改事件。</p>
<h2 id="实例">实例</h2><p> 比如说现在我们有个需求是。点击一个按钮就退出应用程序。那么我们使用EventBus可以怎么实现呢？<br>首先。我们可以在<code>BaseActivity</code>中注册退出应用程序的时间，让其他的<code>Activity</code>都集成该类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActvity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        EventBus.getDefault().register(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Subscribe</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitApp</span><span class="params">(ExitApp exitApp)</span></span>&#123;</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这时候我们只需要在按钮的点击时间中发送改消息即可了。<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">EventBus</span>.getDefault<span class="literal">()</span>.post(<span class="keyword">new</span> <span class="type">ExistApp</span><span class="literal">()</span>);</span><br></pre></td></tr></table></figure></p>
<p>事件类<code>ExistApp</code>可以随意，这里只是用来表明语义。</p>
<h2 id="@Subscribe(threadMode_=_xxx)">@Subscribe(threadMode = xxx)</h2><p>在上面的例子中，我们并没有制定<code>@Subscriber</code>函数的线程。此时默认为：<code>ThreadMode.POSTING</code><br><code>ThreadMode</code>是一个枚举类型。它的值有： <code>POSTING</code>, <code>MAIN</code>, <code>BACKGROUND</code>, <code>ASYNC</code>.源码中的注释写的很详细，见参考中<code>ThreadMode</code>的代码。<br>简单的说就是。</p>
<ul>
<li><code>POSTING:</code> Subscriber在发布消息（调用post函数的线程）的线程中执行。</li>
<li><code>MAIN:</code>  Subscriber将在Android主线程中执行。</li>
<li><code>BACKGROUND:</code>  Subscriber在后台线程中执行</li>
<li><code>ASYNC:</code> Subscriber在异步线程，也就是在独立的线程中执行。<h2 id="优先级">优先级</h2>我们可以通过<code>@Subscribe(priority = 100)</code>指定一个Subscriber函数的优先级.默认的优先级是0。高优先级的Subscriber将会优先订阅事件。<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Subscribe(priority <span class="subst">=</span> <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="literal">void</span> onEvent(<span class="built_in">String</span> <span class="built_in">string</span>)&#123;</span><br><span class="line">        <span class="keyword">Log</span><span class="built_in">.</span>i(<span class="string">"subscriber"</span>,<span class="string">"subscriber "</span><span class="subst">+</span><span class="built_in">string</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="取消事件分发">取消事件分发</h2><p> 在某些情况下，我们不想让事件被继续分发了。那么我们就可以在<code>onEvent</code>(这里的onEvent名称任意)中取消事件：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Subscribe(threadMode <span class="subst">=</span> ThreadMode<span class="built_in">.</span>MAIN)</span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> onEvent(<span class="built_in">String</span> <span class="built_in">string</span>)&#123;</span><br><span class="line">    <span class="keyword">Log</span><span class="built_in">.</span>i(<span class="string">"subscriber"</span>,<span class="string">"subscriber "</span><span class="subst">+</span><span class="built_in">string</span>);</span><br><span class="line">    EventBus<span class="built_in">.</span>getDefault()<span class="built_in">.</span>cancelEventDelivery(exitApp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="ProGuard">ProGuard</h2><p>这里参考官方文档中的代码：<a href="http://greenrobot.org/eventbus/documentation/proguard/" target="_blank" rel="external">点我进入官方文档ProGuard部分</a><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-keepattributes *<span class="type">Annotation</span>*</span><br><span class="line">-keepclassmembers <span class="class"><span class="keyword">class</span> <span class="title">**</span> &#123;</span></span><br><span class="line">    <span class="annotation">@org</span>.greenrobot.eventbus.<span class="type">Subscribe</span> &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line">-keep enum org.greenrobot.eventbus.<span class="type">ThreadMode</span> &#123; *; &#125;</span><br><span class="line"> </span><br><span class="line"># <span class="type">Only</span> required <span class="keyword">if</span> you use <span class="type">AsyncExecutor</span></span><br><span class="line">-keepclassmembers <span class="class"><span class="keyword">class</span> <span class="title">*</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">org</span>.<span class="title">greenrobot</span>.<span class="title">eventbus</span>.<span class="title">util</span>.<span class="title">ThrowableFailureEvent</span> &#123;</span></span><br><span class="line">    &lt;init&gt;(java.lang.<span class="type">Throwable</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Android_Studio插件">Android Studio插件</h2><p>在这里我推荐个<code>Android Studio</code>的插件：<a href="https://github.com/kgmyshin/eventbus-intellij-plugin" target="_blank" rel="external">EventBus Intellij Plugin</a>。<br>该插件会在代码的左侧显示一个Android机器人的图标，点击该图标能够列出所有的<code>Subscriber</code>事件和<code>Publisher</code><br><img src="/image/Android/eventbus/eventbus_intellij_plugin.gif" height="400" width="600"></p>
<h2 id="参考">参考</h2><p><a href="http://greenrobot.org/eventbus/documentation" target="_blank" rel="external">官方文档</a><br><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">源码地址：Github</a><br><a href="http://greenrobot.org/files/eventbus/javadoc/3.0/" target="_blank" rel="external">EventBus JavaDoc</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Each event handler method has a thread mode, which determines in which thread the method is to be called by EventBus.</span><br><span class="line"> * EventBus takes care of threading independently from the posting thread.</span><br><span class="line"> * </span><br><span class="line"> *<span class="javadoctag"> @see</span> EventBus#register(Object)</span><br><span class="line"> *<span class="javadoctag"> @author</span> Markus</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ThreadMode &#123;</span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Subscriber will be called in the same thread, which is posting the event. This is the default. Event delivery</span><br><span class="line">     * implies the least overhead because it avoids thread switching completely. Thus this is the recommended mode for</span><br><span class="line">     * simple tasks that are known to complete is a very short time without requiring the main thread. Event handlers</span><br><span class="line">     * using this mode must return quickly to avoid blocking the posting thread, which may be the main thread.</span><br><span class="line">     */</span></span><br><span class="line">    POSTING,</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Subscriber will be called in Android's main thread (sometimes referred to as UI thread). If the posting thread is</span><br><span class="line">     * the main thread, event handler methods will be called directly. Event handlers using this mode must return</span><br><span class="line">     * quickly to avoid blocking the main thread.</span><br><span class="line">     */</span></span><br><span class="line">    MAIN,</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Subscriber will be called in a background thread. If posting thread is not the main thread, event handler methods</span><br><span class="line">     * will be called directly in the posting thread. If the posting thread is the main thread, EventBus uses a single</span><br><span class="line">     * background thread, that will deliver all its events sequentially. Event handlers using this mode should try to</span><br><span class="line">     * return quickly to avoid blocking the background thread.</span><br><span class="line">     */</span></span><br><span class="line">    BACKGROUND,</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Event handler methods are called in a separate thread. This is always independent from the posting thread and the</span><br><span class="line">     * main thread. Posting events never wait for event handler methods using this mode. Event handler methods should</span><br><span class="line">     * use this mode if their execution might take some time, e.g. for network access. Avoid triggering a large number</span><br><span class="line">     * of long running asynchronous handler methods at the same time to limit the number of concurrent threads. EventBus</span><br><span class="line">     * uses a thread pool to efficiently reuse threads from completed asynchronous event handler notifications.</span><br><span class="line">     */</span></span><br><span class="line">    ASYNC</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://blog.magicer.xyz/2017/01/android-eventbus3-basic/">原文地址http://blog.magicer.xyz/2017/01/android-eventbus3-basic/</a></p>
<h2 id="简介">简介</h2><p><code>EventBus</code>是<code>http://greenrobot.org/</code>出的一个<code>发布者/订阅者</code>（<code>Publisher/Subscriber</code>）的事件总线。主要是用来在<code>Android</code>各个组件之间进行消息传递的。能够很好地对发布者和订阅者之间进行解耦。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/tags/Android/"/>
    
      <category term="EventBus3.0" scheme="http://m.magicer.xyz/tags/EventBus3-0/"/>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 6.0之后的动态权限]]></title>
    <link href="http://m.magicer.xyz/2017/01/android-api-23-permission/"/>
    <id>http://m.magicer.xyz/2017/01/android-api-23-permission/</id>
    <published>2017-01-03T13:12:09.000Z</published>
    <updated>2017-01-12T13:15:48.982Z</updated>
    <content type="html"><![CDATA[<p><a href="http://blog.magicer.xyz/2017/01/android-api-23-permission/" target="_blank" rel="external">原文地址:http://blog.magicer.xyz/2017/01/android-api-23-permission/</a></p>
<h2 id="前言">前言</h2><p>  在Android 6.0之前，开发Android应用程序的时，开发者需要使用什么权限只需要在<code>AndroidManifest.xml</code>文件中显示的声明即可。如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.INTERNET"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>但是，在Android 6.0之后，Android对应用程序的权限进行了进一步的规范。分出来危险权限和一般权限，当我们需要危险权限的时候需要在运行时进行授权。这样做也有好处。对于一些应用用户的选择更多了。<br><a id="more"></a></p>
<h2 id="权限分类">权限分类</h2><p><a href="https://developer.android.google.cn/training/permissions/index.html" target="_blank" rel="external">官方权限教程</a><br>当我们需要用到危险权限时，我们就需要动态的申请权限，那么危险权限有哪些呢？</p>
<h3 id="危险权限">危险权限</h3><p><img src="https://segmentfault.com/img/bVHIe5?w=871&amp;h=910" alt="图片描述"></p>
<h3 id="一般权限">一般权限</h3><p>对于常规的权限我们只需要在清单文件中注册即可，比如网络权限。</p>
<h2 id="动态注册权限">动态注册权限</h2><p>如果您的应用需要危险权限，则每次执行需要这一权限的操作时您都必须检查自己是否具有该权限。用户始终可以自由调用此权限，因此，即使应用昨天使用了相机，它不能假设自己今天仍具有该权限。</p>
<p>要检查您是否具有某项权限，请调用<code>ContextCompat.checkSelfPermission()</code> 方法。例如，以下代码段显示了如何检查 Activity 是否具有在日历中进行写入的权限：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assume thisActivity is the current activity</span></span><br><span class="line"><span class="keyword">int</span> permissionCheck = ContextCompat.checkSelfPermission(thisActivity,</span><br><span class="line">        Manifest.permission.WRITE_CALENDAR);</span><br></pre></td></tr></table></figure>
<p>如果应用具有此权限，方法将返回 <code>PackageManager.PERMISSION_GRANTED</code>，并且应用可以继续操作。如果应用不具有此权限，方法将返回 <code>PERMISSION_DENIED</code>，且应用必须明确向用户要求权限。</p>
<p>以上是官方文档中关于检测权限的说明。<br>先来个小demo。看下怎么动态的请求权限，也可以看<a href="https://developer.android.google.cn/training/permissions/requesting.html#perm-request" target="_blank" rel="external">官方文档</a>中的介绍。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERMISSION_REQUEST_CODE = <span class="number">1</span>; <span class="comment">//权限请求码</span></span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    <span class="keyword">if</span> (checkPermission(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;</span><br><span class="line">        <span class="comment">//获取权限后的操作。读取文件</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//请求权限</span></span><br><span class="line">        ActivityCompat.requestPermissions(<span class="keyword">this</span>,</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,</span><br><span class="line">                PERMISSION_REQUEST_CODE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 检测权限是否授权</span><br><span class="line"> *<span class="javadoctag"> @return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkPermission</span><span class="params">(Context context, String permission)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PackageManager.PERMISSION_GRANTED == ContextCompat.checkSelfPermission(context,permission);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">    <span class="keyword">switch</span> (requestCode)&#123;</span><br><span class="line">        <span class="keyword">case</span> PERMISSION_REQUEST_CODE:</span><br><span class="line">            <span class="keyword">if</span> (grantResults.length &gt;<span class="number">0</span> &amp;&amp;</span><br><span class="line">                    grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">                <span class="comment">//得到了授权</span></span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"授权成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//未授权</span></span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"授权失败"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当用户点击了<code>禁止</code>按钮后，当我们下次还需要该权限怎么办？  <a href="https://developer.android.google.cn/reference/android/support/v4/app/ActivityCompat.html#shouldShowRequestPermissionRationale%28android.app.Activity,%20java.lang.String%29" target="_blank" rel="external">shouldShowRequestPermissionRationale()</a>函数会在用户点击了禁止后返回<code>true</code>，我们可以在该方法返回true时在提示用户开启权限。<br>代码跟上面的差不多。可以简要看一下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERMISSION_REQUEST_CODE = <span class="number">1</span>; <span class="comment">//权限请求码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button mButton;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mButton = (Button) findViewById(R.id.activity_main_storage_btn);</span><br><span class="line">        mButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                storagePermission();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">storagePermission</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (checkPermission(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;</span><br><span class="line">            <span class="comment">//获取权限后的操作。读取文件</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//            //请求权限</span></span><br><span class="line"><span class="comment">//            ActivityCompat.requestPermissions(this,</span></span><br><span class="line"><span class="comment">//                    new String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,</span></span><br><span class="line"><span class="comment">//                    PERMISSION_REQUEST_CODE);</span></span><br><span class="line">            <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"需要开启存储权限"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                showRequestPermissionDialog(<span class="keyword">new</span> String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,PERMISSION_REQUEST_CODE);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                ActivityCompat.requestPermissions(<span class="keyword">this</span>,</span><br><span class="line">                        <span class="keyword">new</span> String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,</span><br><span class="line">                        PERMISSION_REQUEST_CODE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showRequestPermissionDialog</span><span class="params">(<span class="keyword">final</span> String[] permissions, <span class="keyword">final</span> <span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</span><br><span class="line">        builder.setMessage(<span class="string">"使用该功能需要使用SD卡权限\n是否再次开启权限"</span>);</span><br><span class="line">        builder.setPositiveButton(<span class="string">"是"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>,permissions,requestCode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        builder.setNegativeButton(<span class="string">"否"</span>,<span class="keyword">null</span>);</span><br><span class="line">        builder.setCancelable(<span class="keyword">true</span>);</span><br><span class="line">        builder.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * 检测权限是否授权</span><br><span class="line">     *<span class="javadoctag"> @return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkPermission</span><span class="params">(Context context, String permission)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PackageManager.PERMISSION_GRANTED == ContextCompat.checkSelfPermission(context,permission);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">        <span class="keyword">switch</span> (requestCode)&#123;</span><br><span class="line">            <span class="keyword">case</span> PERMISSION_REQUEST_CODE:</span><br><span class="line">                <span class="keyword">if</span> (grantResults.length &gt;<span class="number">0</span> &amp;&amp;</span><br><span class="line">                        grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">                    <span class="comment">//得到了授权</span></span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">"授权成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//未授权</span></span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">"授权失败"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://blog.magicer.xyz/2017/01/android-api-23-permission/">原文地址:http://blog.magicer.xyz/2017/01/android-api-23-permission/</a></p>
<h2 id="前言">前言</h2><p>  在Android 6.0之前，开发Android应用程序的时，开发者需要使用什么权限只需要在<code>AndroidManifest.xml</code>文件中显示的声明即可。如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.INTERNET"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>但是，在Android 6.0之后，Android对应用程序的权限进行了进一步的规范。分出来危险权限和一般权限，当我们需要危险权限的时候需要在运行时进行授权。这样做也有好处。对于一些应用用户的选择更多了。<br>]]>
    
    </summary>
    
      <category term="android" scheme="http://m.magicer.xyz/tags/android/"/>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用SpannableStringBuilder打造超炫酷的TextView]]></title>
    <link href="http://m.magicer.xyz/2016/12/android-SpannableStringBuilder-textview-rich-text/"/>
    <id>http://m.magicer.xyz/2016/12/android-SpannableStringBuilder-textview-rich-text/</id>
    <published>2016-12-19T13:53:08.000Z</published>
    <updated>2017-01-12T13:16:35.506Z</updated>
    <content type="html"><![CDATA[<p><a href="http://blog.magicer.xyz/2016/12/android-SpannableStringBuilder-textview-rich-text/" target="_blank" rel="external">原文地址:http://blog.magicer.xyz/2016/12/android-SpannableStringBuilder-textview-rich-text/</a></p>
<p>   前段时间项目中使用到了一种效果是更改textview中制定字符串的颜色.于是就查找了下资料,发现了使用<code>SpannableStringBuilder</code>可以很轻易的就实现,并不用使用自定义View.那么就直接先来个代码练练手,运行看下效果.<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String content = <span class="string">"NO ZUO NO DIE!"</span>;</span><br><span class="line">SpannableStringBuilder spannableStringBuilder = <span class="keyword">new</span> SpannableStringBuilder(content);</span><br><span class="line">ForegroundColorSpan colorSpan = <span class="keyword">new</span> ForegroundColorSpan(Color.parseColor(<span class="string">"#009688"</span>));</span><br><span class="line">spannableStringBuilder.setSpan(colorSpan,<span class="number">3</span>,<span class="number">6</span>, Spanned.SPAN_EXCLUSIVE_INCLUSIVE);</span><br><span class="line">mTextView.setText(spannableStringBuilder);</span><br></pre></td></tr></table></figure></p>
<p>   运行完了之后肯定会有些疑惑,最主要的<code>SpannableStringBuilder</code>是什么鬼?  <code>ForegroundColorSpan</code>又是什么? <code>Spanned.SPAN_EXCLUSIVE_INCLUSIVE</code> 是什么意思? 那么我们来一个一个的解释. <a id="more"></a></p>
   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSpan</span> <span class="params">(Object what,  //设置的样式,看完下面的就明白了.</span><br><span class="line">             <span class="keyword">int</span> start,   //开始的位置. 索引是从<span class="number">0</span>开始的.</span><br><span class="line">             <span class="keyword">int</span> end,   //样式结束的位置,不包括end</span><br><span class="line">             <span class="keyword">int</span> flags)</span> <span class="comment">// 样式的标志. 下面详细介绍</span></span></span><br></pre></td></tr></table></figure>
<p>flags:</p>
<ul>
<li><code>Spannable.SPAN_EXCLUSIVE_INCLUSIVE</code> : 在 Span前面输入的字符不应用 Span的效果，在后面输入的字符应用Span效果。</li>
<li><code>Spannable.SPAN_INCLUSIVE_EXCLUSIVE</code>:  在 Span前面输入的字符应用 Span 的效果，在后面输入的字符不应用Span效果。</li>
<li><code>Spanned.SPAN_INCLUSIVE_INCLUSIVE</code>:   前后都包括</li>
<li><code>Spanned.SPAN_EXCLUSIVE_EXCLUSIVE</code>: 前后都不包括</li>
</ul>
<h3 id="SpannableStringBuilder是什么鬼?">SpannableStringBuilder是什么鬼?</h3><p>  官方文档是这样写的.  <code>This is the class for text whose content and markup can both be changed.</code><br>很简单,主要作用就是给文本内容添加样式的.主要通过<code>setSpan</code>方法设置样式.就像上面程序中那样. <code>setSpan</code>方法的三个参数是什么意思呢</p>
<h3 id="ForegroundColorSpan_是什么?">ForegroundColorSpan 是什么?</h3><p>  根据它的意思就可以猜到,他是用来改变前景色的(也就是文本颜色).有文本颜色那是不是也有背景颜色等其他的呢?那是肯定的啦.只改变个文本颜色岂不是太low了呀.<br>  那么都是主要的都是有哪些呢?<br><img src="/image/spannablestringbuilder/spannablestringbuilder_rich_text.png" height="483" width="982" alt="span类"></p>
<p>这个类里面的之类都是可以的. <a href="https://developer.android.google.cn/reference/android/text/style/CharacterStyle.html" target="_blank" rel="external">点我查看,无需翻墙</a><br>这些类跟<code>ForegroundColorSpan</code>都是大同小异的.掌握了一个,其他的也就掌握了.<br>我认为常用的是<code>ImageSpan</code>,<code>ClickableSpan</code>,<code>ForegroundColorSpan</code></p>
<h3 id="再来几个代码练练">再来几个代码练练</h3><p>  再来个<code>ImageSpan</code>跟<code>ForegroundColorSpan</code>混合的的看下效果.<br>  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> content = <span class="string">"NO ZUO NO DIE!"</span>;</span><br><span class="line">SpannableStringBuilder spannableStringBuilder = <span class="keyword">new</span> SpannableStringBuilder(content);</span><br><span class="line">ForegroundColorSpan colorSpan = <span class="keyword">new</span> ForegroundColorSpan(Color.parseColor(<span class="string">"#009688"</span>));</span><br><span class="line">spannableStringBuilder.setSpan(colorSpan,<span class="number">3</span>,<span class="number">6</span>, Spanned.SPAN_INCLUSIVE_INCLUSIVE);</span><br><span class="line">ImageSpan imageSpan = <span class="keyword">new</span> ImageSpan(<span class="keyword">this</span>,R.mipmap.ic_launcher);</span><br><span class="line">spannableStringBuilder.setSpan(imageSpan,<span class="number">2</span>,<span class="number">3</span>,Spanned.SPAN_EXCLUSIVE_INCLUSIVE);</span><br><span class="line">mTextView.setText(spannableStringBuilder);</span><br></pre></td></tr></table></figure></p>
<p>  最后来张效果图:</p>
<p><img src="/image/spannablestringbuilder/spannablestringbuilder_img.png" height="603" width="326" alt="效果图"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://blog.magicer.xyz/2016/12/android-SpannableStringBuilder-textview-rich-text/">原文地址:http://blog.magicer.xyz/2016/12/android-SpannableStringBuilder-textview-rich-text/</a></p>
<p>   前段时间项目中使用到了一种效果是更改textview中制定字符串的颜色.于是就查找了下资料,发现了使用<code>SpannableStringBuilder</code>可以很轻易的就实现,并不用使用自定义View.那么就直接先来个代码练练手,运行看下效果.<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String content = <span class="string">"NO ZUO NO DIE!"</span>;</span><br><span class="line">SpannableStringBuilder spannableStringBuilder = <span class="keyword">new</span> SpannableStringBuilder(content);</span><br><span class="line">ForegroundColorSpan colorSpan = <span class="keyword">new</span> ForegroundColorSpan(Color.parseColor(<span class="string">"#009688"</span>));</span><br><span class="line">spannableStringBuilder.setSpan(colorSpan,<span class="number">3</span>,<span class="number">6</span>, Spanned.SPAN_EXCLUSIVE_INCLUSIVE);</span><br><span class="line">mTextView.setText(spannableStringBuilder);</span><br></pre></td></tr></table></figure></p>
<p>   运行完了之后肯定会有些疑惑,最主要的<code>SpannableStringBuilder</code>是什么鬼?  <code>ForegroundColorSpan</code>又是什么? <code>Spanned.SPAN_EXCLUSIVE_INCLUSIVE</code> 是什么意思? 那么我们来一个一个的解释.]]>
    
    </summary>
    
      <category term="android" scheme="http://m.magicer.xyz/tags/android/"/>
    
      <category term="textview" scheme="http://m.magicer.xyz/tags/textview/"/>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android基础知识之  Toolbar 的使用]]></title>
    <link href="http://m.magicer.xyz/2016/10/toolbar-basic/"/>
    <id>http://m.magicer.xyz/2016/10/toolbar-basic/</id>
    <published>2016-10-31T09:07:23.000Z</published>
    <updated>2017-01-12T13:17:26.886Z</updated>
    <content type="html"><![CDATA[<p><a href="http://blog.magicer.xyz/2016/10/toolbar-basic/" target="_blank" rel="external">原文地址:http://blog.magicer.xyz/2016/10/toolbar-basic/</a><br>  Toolbar是Android5.0推出的,用来替代ActionBar的控件.可以高度的自定义,使用灵活.官方的ToolBar是必须在5.0以上的系统才能使用,<br>  如果需要在低版本中使用.需要使用<code>support v7</code>包中的Toolbar.<br>下一是官网的Toolbar的介绍:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Toolbar</span><br><span class="line">extends ViewGroup</span><br><span class="line">java<span class="class">.lang</span><span class="class">.Object</span></span><br><span class="line">   ↳    android<span class="class">.view</span><span class="class">.View</span></span><br><span class="line">       ↳    android<span class="class">.view</span><span class="class">.ViewGroup</span></span><br><span class="line">           ↳    android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.Toolbar</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/image/Android/toolbar-basic.png" height="572" width="1026"><br><a id="more"></a></p>
<h2 id="使用前提">使用前提</h2><p>  要使用ToolBar需要将activity的ActionBar隐藏掉.那么如何隐藏呢?有三种方法.下面分别介绍</p>
<h3 id="方法一:">方法一:</h3><p> 在<code>res/values/styles.xml</code>文件中修改<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"AppTheme.Base"</span> <span class="attribute">parent</span>=<span class="value">"Theme.AppCompat"</span>&gt;</span><span class="css"></span><br><span class="line">  &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">windowActionBar</span>"&gt;<span class="tag">false</span>&lt;/<span class="tag">item</span>&gt;</span><br><span class="line">  &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="rule"><span class="attribute">android</span>:<span class="value">windowNoTitle<span class="string">"&gt;true&lt;/item&gt;</span><br><span class="line"></span></span></span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p> 也可以直接使用没有ActionBar的主题<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"AppTheme"</span> <span class="attribute">parent</span>=<span class="value">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="css"></span></span><br></pre></td></tr></table></figure></p>
<h3 id="方法二:">方法二:</h3><p>在清单文件中修改制定activity的主题,如下所示:</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">"MainActivity"</span></span><br><span class="line">           <span class="attribute">android:theme</span>=<span class="value">"@style/Theme.AppCompat.Light.NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="方法三:">方法三:</h3><p>  直接在代码中取消. 在setContentView之前.</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line"><span class="comment">//supportRequestWindowFeature(Window.FEATURE_NO_TITLE);  在AppCompatActivity中</span></span><br></pre></td></tr></table></figure>
<h2 id="怎么使用">怎么使用</h2><p>  在布局文件中.添加如下代码. 位置不固定.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.v7.widget.Toolbar</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/toolbar"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"?android:attr/actionBarSize"</span></span><br><span class="line">    <span class="attribute">android:background</span>=<span class="value">"?attr/colorPrimaryDark"</span></span><br><span class="line">    <span class="attribute">app:title</span>=<span class="value">"Title"</span></span><br><span class="line">    <span class="attribute">app:titleTextColor</span>=<span class="value">"#222222"</span></span><br><span class="line">    <span class="attribute">app:logo</span>=<span class="value">"@mipmap/ic_launcher"</span></span><br><span class="line">    <span class="attribute">app:subtitle</span>=<span class="value">"subtitle"</span>&gt;</span><span class="tag">&lt;/<span class="title">android.support.v7.widget.Toolbar</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>  title 用来设置标题.subtitle设置副标题  titleTextColor用来设置标题字体颜色.background用来设置背景颜色..效果如下:</p>
<p><img src="/image/Android/toolbar-basic-xml.png" height="591" width="323"><br>在java代码中也可以动态的设置这些值.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  mToolbar.setTitle(<span class="string">"JavaTitle"</span>);</span><br><span class="line">        mToolbar.setSubtitle(<span class="string">"JavaSubTitle"</span>);</span><br><span class="line">        mToolbar.setLogo(R.mipmap.ic_launcher);</span><br><span class="line">        mToolbar.setNavigationIcon(android.R.drawable.ic_input_delete);</span><br><span class="line">        mToolbar.setOverflowIcon(ContextCompat.getDrawable(<span class="keyword">this</span>, android.R.drawable.ic_menu_more));</span><br><span class="line"><span class="comment">//        setActionBar(mToolbar);  //activity中</span></span><br><span class="line">        setSupportActionBar(mToolbar);   <span class="comment">//AppCompatActivity中</span></span><br></pre></td></tr></table></figure>
<h2 id="添加Menu">添加Menu</h2><p>要添加menu首先我们需要有menu,在这里我选择在<code>res/menu/</code>中创建<code>main.xml</code>来定义menu文件.代码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">menu</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">      <span class="attribute">xmlns:app</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/add"</span></span><br><span class="line">        <span class="attribute">android:icon</span>=<span class="value">"@android:drawable/ic_menu_add"</span></span><br><span class="line">        <span class="attribute">android:title</span>=<span class="value">"Add"</span></span><br><span class="line">        <span class="attribute">app:showAsAction</span>=<span class="value">"never|withText"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/delete"</span></span><br><span class="line">        <span class="attribute">android:icon</span>=<span class="value">"@android:drawable/ic_menu_delete"</span></span><br><span class="line">        <span class="attribute">android:title</span>=<span class="value">"Delete"</span></span><br><span class="line">        <span class="attribute">app:showAsAction</span>=<span class="value">"never|withText"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/edit"</span></span><br><span class="line">        <span class="attribute">android:icon</span>=<span class="value">"@android:drawable/ic_menu_edit"</span></span><br><span class="line">        <span class="attribute">android:title</span>=<span class="value">"Edit"</span></span><br><span class="line">        <span class="attribute">app:showAsAction</span>=<span class="value">"never|withText"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/email"</span></span><br><span class="line">        <span class="attribute">android:icon</span>=<span class="value">"@android:drawable/sym_action_email"</span></span><br><span class="line">        <span class="attribute">android:title</span>=<span class="value">"Email"</span></span><br><span class="line">        <span class="attribute">app:showAsAction</span>=<span class="value">"never|withText"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>下面是java文件中的代码.<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">       getMenuInflater().inflate(R.menu.main, menu);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">           <span class="keyword">case</span> android.R.id.home: </span><br><span class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"您点击了NavigationIcon"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> R.id.add:</span><br><span class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Add"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> R.id.delete:</span><br><span class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Delete"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> R.id.edit:</span><br><span class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Edit"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> R.id.email:</span><br><span class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Email"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/image/Android/toolbar-basic-java-1.png" height="603" width="327" alt="Toolbar  Java"></p>
<h2 id="显示Menu中的Icon">显示Menu中的Icon</h2><p>在写到这里之后.我们会发现.隐藏的menu是不显示icon的,那么我们怎么设置呢:<br>只需要重新一下方法:  这里的activity是    <code>AppCompatActivity</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onPrepareOptionsPanel</span><span class="params">(View view, Menu menu)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (menu != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (menu.getClass() == MenuBuilder.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Method m = menu.getClass().getDeclaredMethod(<span class="string">"setOptionalIconsVisible"</span>, Boolean.TYPE);</span><br><span class="line">                m.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                m.invoke(menu, <span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Log.i(<span class="string">"tag"</span>, <span class="string">"onPrepareOptionsPanel: "</span> +</span><br><span class="line">                        getClass().getSimpleName() +</span><br><span class="line">                        <span class="string">"onMenuOpened...unable to set icons for overflow menu"</span></span><br><span class="line">                        + e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onPrepareOptionsPanel(view, menu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下:</p>
<p><img src="/image/Android/toolbar-basic-java-icon.png" height="600" width="327" alt="Toolbar Image"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://blog.magicer.xyz/2016/10/toolbar-basic/">原文地址:http://blog.magicer.xyz/2016/10/toolbar-basic/</a><br>  Toolbar是Android5.0推出的,用来替代ActionBar的控件.可以高度的自定义,使用灵活.官方的ToolBar是必须在5.0以上的系统才能使用,<br>  如果需要在低版本中使用.需要使用<code>support v7</code>包中的Toolbar.<br>下一是官网的Toolbar的介绍:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Toolbar</span><br><span class="line">extends ViewGroup</span><br><span class="line">java<span class="class">.lang</span><span class="class">.Object</span></span><br><span class="line">   ↳    android<span class="class">.view</span><span class="class">.View</span></span><br><span class="line">       ↳    android<span class="class">.view</span><span class="class">.ViewGroup</span></span><br><span class="line">           ↳    android<span class="class">.support</span><span class="class">.v7</span><span class="class">.widget</span><span class="class">.Toolbar</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/image/Android/toolbar-basic.png" height="572" width="1026"><br>]]>
    
    </summary>
    
      <category term="Toolbar" scheme="http://m.magicer.xyz/tags/Toolbar/"/>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ViewPager PagerAdapter的简单使用]]></title>
    <link href="http://m.magicer.xyz/2016/09/viewpager-pageradapter/"/>
    <id>http://m.magicer.xyz/2016/09/viewpager-pageradapter/</id>
    <published>2016-09-04T14:07:04.000Z</published>
    <updated>2016-09-04T15:04:56.242Z</updated>
    <content type="html"><![CDATA[<p>以下是官方文档中对ViewPager的说明</p>
<blockquote>
<p>Layout manager that allows the user to flip left and right through pages of data. You supply an implementation of a PagerAdapter to generate the pages that the view shows.</p>
</blockquote>
<p>  <code>ViewPager</code>是<code>android.support-v4</code>包下的一个组件。用来实现左右滑动的效果。和TabLayout的联动使用的效果挺不错。那么ViewPager的基本使用，是怎样的呢。<br>  呢？和其他的组件一样。我们只需要在布局中添加即可。<br>  <a id="more"></a><br>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.v4.view.ViewPager</span></span><br><span class="line">     <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">     <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">     <span class="attribute">android:id</span>=<span class="value">"@+id/viewpager"</span></span><br><span class="line">     /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在这里我们需要一个<code>PagerAdapter</code>来对ViewPager进行填充。首先我们需要一个数据源，在这里我们用一个<code>List&lt;ImageView&gt;</code>。当创建PagerAdapter的时候，<br>我们需要实现四个方法：<code>getCount</code>, <code>isViewFromObject</code>, <code>instantiateItem</code>, <code>destroyItem</code>。最基础的应用的代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ImageView&gt; mList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(List&lt;ImageView&gt; list)</span> </span>&#123;</span><br><span class="line">        mList = list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> view == object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * 实例化页面</span><br><span class="line">     *<span class="javadoctag"> @param</span> container</span><br><span class="line">     *<span class="javadoctag"> @param</span> position</span><br><span class="line">     *<span class="javadoctag"> @return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        container.addView(mList.get(position));</span><br><span class="line">        <span class="keyword">return</span> mList.get(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * 删除页面</span><br><span class="line">     *<span class="javadoctag"> @param</span> container</span><br><span class="line">     *<span class="javadoctag"> @param</span> position</span><br><span class="line">     *<span class="javadoctag"> @param</span> object</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</span><br><span class="line">        container.removeView(mList.get(position));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>以下是官方文档中对ViewPager的说明</p>
<blockquote>
<p>Layout manager that allows the user to flip left and right through pages of data. You supply an implementation of a PagerAdapter to generate the pages that the view shows.</p>
</blockquote>
<p>  <code>ViewPager</code>是<code>android.support-v4</code>包下的一个组件。用来实现左右滑动的效果。和TabLayout的联动使用的效果挺不错。那么ViewPager的基本使用，是怎样的呢。<br>  呢？和其他的组件一样。我们只需要在布局中添加即可。<br>]]>
    
    </summary>
    
      <category term="PagerAdapter" scheme="http://m.magicer.xyz/tags/PagerAdapter/"/>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用FragmentPagerAdapter和FragmentStatePagerAdapter时Fragment生命周期区别]]></title>
    <link href="http://m.magicer.xyz/2016/09/fragmentpageradapter-and-fragmentstatepageradapter/"/>
    <id>http://m.magicer.xyz/2016/09/fragmentpageradapter-and-fragmentstatepageradapter/</id>
    <published>2016-09-02T17:40:46.000Z</published>
    <updated>2016-09-04T14:09:21.130Z</updated>
    <content type="html"><![CDATA[<h2 id="使用FragmentPagerAdapter时Fragment的生命周期">使用FragmentPagerAdapter时Fragment的生命周期</h2><p><code>FragmentPagerAdapter</code> 会保存在内存中保存Fragment的实例，当<code>ViewPager</code>中<code>Fragment</code>的数量较多时，建议使用<code>FragmentStatePagerAdapter</code>。</p>
<p>当使用<code>FragmentPagerAdapter</code>时Fragment的生命周期怎么走呢？（使用的是v4包下的Fragment）</p>
<p>当viewpager加载时，会加载当前页跟相邻页的fragment（如果有），那么此时，Fragment的log日志是这样的<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">I/<span class="string">fragment:</span> <span class="string">onAttach:</span> </span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onCreate:</span> </span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onAttach:</span> </span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onCreate:</span> </span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onCreateView:</span> +position <span class="number">1</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onActivityCreated:</span> +position <span class="number">1</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onCreateView:</span> +position <span class="number">0</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onActivityCreated:</span> +position <span class="number">0</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onStart:</span> <span class="number">0</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onResume:</span> <span class="number">0</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onStart:</span> <span class="number">1</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onResume:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>我们看到，有两个Fragment的生命周期都走了，而他们基本上算是交替执行的。那么当我们滑动到第三个页面再划回第一个页面呢？生命周期又会怎么走？<br>肯定的第三个页面和第四个页面的<code>onAttach</code>，<code>onCreate</code>,<code>onCreateView</code>,<code>onActivityCreate</code>,<code>onStart</code>,<code>onResume</code>生命周期都会执行。那么顺序是怎么样的呢？我们来看下log日志。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下是滑动到Fragment3时走的的生命周期</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onAttach:</span> </span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onCreate:</span> </span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onCreateView:</span> +position <span class="number">2</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onActivityCreated:</span> <span class="number">2</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onStart:</span> <span class="number">2</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onResume:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onAttach:</span> </span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onCreate:</span> </span><br><span class="line"></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onPause:</span> <span class="number">0</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onStop:</span> <span class="number">0</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onDestroyView:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onCreateView:</span> +position <span class="number">3</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onActivityCreated:</span> <span class="number">3</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onStart:</span> <span class="number">3</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onResume:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是滑动到fragment0的</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onCreateView:</span> +position <span class="number">0</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onActivityCreated:</span> <span class="number">0</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onPause:</span> <span class="number">3</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onStop:</span> <span class="number">3</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onDestroyView:</span> <span class="number">3</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onStart:</span> <span class="number">0</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onResume:</span> <span class="number">0</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onPause:</span> <span class="number">2</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onStop:</span> <span class="number">2</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onDestroyView:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<p>我们发现<code>Fragment2</code>的生命周期先走到了<code>onResume</code>，之后<code>Fragment0</code>走到了<code>onDestoryView</code>中，而当我们重新滑到<code>Fragment0</code>的时候，<code>Fragment0</code>的生命周期是从<code>onCreateView</code>开始走的，并没有走<code>onCreate</code>方法。</p>
<h2 id="使用FragmentStatePagerAdapter时Fragment的生命周期">使用FragmentStatePagerAdapter时Fragment的生命周期</h2><p>当使用<code>FragmentStatePagerAdapter</code>时，第一次走的生命周期跟<code>FragmentPagerAdapter</code>是一样的。但是当我们滑动到第三个<code>Fragment</code>（即：Fragment 2）再划回第一个<code>Fragment</code>（Fragment 0）呢？<br>生命周期如下：<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onAttach: </span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onCreate: </span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onCreateView: +position 2</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onActivityCreated: 2</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onStart: 2</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onResume: 2</span></span><br><span class="line"></span><br><span class="line"><span class="http"><span class="attribute">I/fragment</span>: <span class="string">onAttach: </span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onCreate: </span></span><br><span class="line"></span><br><span class="line"><span class="http"><span class="attribute">I/fragment</span>: <span class="string">onPause: 0</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onStop: 0</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onDestroyView: 0</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onDestroy: 0</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onDetach: 0</span></span><br><span class="line"></span><br><span class="line"><span class="http"><span class="attribute">I/fragment</span>: <span class="string">onCreateView: +position 3</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onActivityCreated: 3</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onStart: 3</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onResume: 3</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onAttach: </span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onCreate: </span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onPause: 3</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onStop: 3</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onDestroyView: 3</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onDestroy: 3</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onDetach: 3</span></span><br><span class="line"></span><br><span class="line"><span class="http"><span class="attribute">I/fragment</span>: <span class="string">onCreateView: +position 0</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onActivityCreated: 0</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onStart: 0</span></span><br><span class="line"><span class="attribute">I/fragment</span>: <span class="string">onResume: 0</span></span><br><span class="line"></span><br><span class="line"><span class="groovy">I/<span class="string">fragment:</span> <span class="string">onPause:</span> <span class="number">2</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onStop:</span> <span class="number">2</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onDestroyView:</span> <span class="number">2</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onDestroy:</span> <span class="number">2</span></span><br><span class="line">I/<span class="string">fragment:</span> <span class="string">onDetach:</span> <span class="number">2</span></span></span></span></span></span></span><br></pre></td></tr></table></figure></p>
<p>我们可以看到，当我们滑动到第三个Fragment（<code>Fragment 2</code>）时，第一个Fragment（<code>Fragment 0</code>）的生命周期已经走到了<code>onDetach</code>，此时<code>Fragment0</code>已经和activity解绑。也就不会在内存中保存Fragment的实例。</p>
<h2 id="分析">分析</h2><p>通过上面的Fragment的生命周期我们可以看到，当ViewPager使用<code>FragmentPagerAdapter</code>时滑动viewpager，Fragment并不会跟acvitity解绑，并且划回该Fragment时，<code>onCreate</code>方法也不会执行。<code>FragmentStatePagerAdapter</code>时，Fragment已经跟activity解绑了，重新划回该Fragment时，Fragment的生命周期会全部走一遍。</p>
<p>因此当我们在Fragment的onCreate方法中执行的网络请求，那么在<code>FragmentPagerAdapter</code>中，该网络请求只会执行一次，而<code>FragmentStatePagerAdapter</code>则会每次都得到执行。    </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="使用FragmentPagerAdapter时Fragment的生命周期">使用FragmentPagerAdapter时Fragment的生命周期</h2><p><code>FragmentPagerAdapter</code> 会保存在内存中保存Fragmen]]>
    </summary>
    
      <category term="fragment" scheme="http://m.magicer.xyz/tags/fragment/"/>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[测试flow.ci]]></title>
    <link href="http://m.magicer.xyz/2016/08/text/"/>
    <id>http://m.magicer.xyz/2016/08/text/</id>
    <published>2016-08-14T06:29:47.000Z</published>
    <updated>2016-08-14T06:30:56.418Z</updated>
    <content type="html"><![CDATA[<p>测试flow.ci</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>测试flow.ci</p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[为Hexo NexT主题添加ShareSDK的分享]]></title>
    <link href="http://m.magicer.xyz/2016/04/add-sharesdk/"/>
    <id>http://m.magicer.xyz/2016/04/add-sharesdk/</id>
    <published>2016-04-19T03:43:59.000Z</published>
    <updated>2016-05-01T01:08:28.453Z</updated>
    <content type="html"><![CDATA[<p>今天发现一个分享的的sdk,可以在各个平台使用。由于不太喜欢主题提供的几个分享的样式。就试了试怎么这个。发现还是不错滴。。下面是分享的按钮和分享的样式：<br><strong>效果见下面——</strong><br>传送门：<a href="http://sharesdk.mob.com/#/sharesdk" target="_blank" rel="external">ShareSDK</a><br><a href="http://wiki.mob.com/sharesdk-for-web%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90/" target="_blank" rel="external">Web集成官方文档</a></p>
<p>下面是在网页上分享按钮的代码，只需要将以下代码添加到想要显示的位置即可。<code>appkey</code>是你自己的appkey。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MOB SHARE BEGIN--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"-mob-share-ui-button -mob-share-open"</span>&gt;</span>分享<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"-mob-share-ui"</span> <span class="attribute">style</span>=<span class="value">"display: none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"-mob-share-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-weibo"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>新浪微博<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-tencentweibo"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>腾讯微博<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-qzone"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>QQ空间<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-qq"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>QQ好友<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-renren"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>人人网<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-kaixin"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>开心网<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-douban"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>豆瓣<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-facebook"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-twitter"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"-mob-share-close"</span>&gt;</span>取消<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"-mob-share-ui-bg"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">id</span>=<span class="value">"-mob-share"</span> <span class="attribute">src</span>=<span class="value">"http://f1.webshare.mob.com/code/mob-share.js?appkey=你的appkey"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--MOB SHARE END--&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="添加到NexT中">添加到NexT中</h2><p>那么怎么添加到next主题上呢。步骤如下</p>
<h3 id="1-创建文件">1.创建文件</h3><p>我们首先要在主题文件夹下的<code>layout</code>文件夹找到<code>_partials</code>下的<code>share</code>文件夹，之后添加一个名为<code>sharesdk.swig</code>的文件。我们可以看出来。这个文件夹下放的全部是分享的配置文件.添加的内容为上面的那一大段代码。只需要修改一部分。修改的部分为：<br><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">id</span>=<span class="value">"-mob-share"</span> <span class="attribute">src</span>=<span class="value">"http://f1.webshare.mob.com/code/mob-share.js?appkey=</span></span></span><span class="expression">&#123;&#123; <span class="variable">theme.shareSDKappkey</span> &#125;&#125;</span><span class="xml"><span class="tag"><span class="value">"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>修改这写的目的是为了让我们能够在主题的配置文件中添加appkey。（只需要在主题的配置文件中添加一个<code>shareSDKappkey</code>并为其附上值即可）。</p>
<h3 id="2添加可选配置">2添加可选配置</h3><p>虽然我们添加了sharesdk的分享的按钮了，但是如果有一天我们不想使用了呢。当然，很简单。只需要修改配置文件就可以了。那么如何实现呢？<br>首先，找到主题文件夹下的<code>layout</code>文件夹下的<code>post.swig</code><br>大概在16行左右添加<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"post-spread"</span>&gt;</span></span><br><span class="line">  </span><span class="template_tag">&#123;% <span class="keyword">if</span> theme.jiathis %&#125;</span><span class="xml"></span><br><span class="line">    </span><span class="template_tag">&#123;% <span class="keyword">include</span> '_partials/share/jiathis.swig' %&#125;</span><span class="xml"></span><br><span class="line">  </span><span class="template_tag">&#123;% elseif theme.baidushare %&#125;</span><span class="xml"></span><br><span class="line">    </span><span class="template_tag">&#123;% <span class="keyword">include</span> '_partials/share/baidushare.swig' %&#125;</span><span class="xml"></span><br><span class="line">  </span><span class="template_tag">&#123;% elseif theme.add_this_id %&#125;</span><span class="xml"></span><br><span class="line">    </span><span class="template_tag">&#123;% <span class="keyword">include</span> '_partials/share/add-this.swig' %&#125;</span><span class="xml"></span><br><span class="line">  </span><span class="template_tag">&#123;% elseif theme.duoshuo_shortname and theme.duoshuo_share %&#125;</span><span class="xml"></span><br><span class="line">    </span><span class="template_tag">&#123;% <span class="keyword">include</span> '_partials/share/duoshuo_share.swig' %&#125;</span><span class="xml"></span><br><span class="line">    </span><span class="template_tag">&#123;% elseif theme.sharesdk %&#125;</span><span class="xml"></span><br><span class="line">    </span><span class="template_tag">&#123;% <span class="keyword">include</span> '_partials/share/sharesdk.swig' %&#125;</span><span class="xml"></span><br><span class="line">  </span><span class="template_tag">&#123;% <span class="keyword">endif</span> %&#125;</span><span class="xml"></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>添加了代码<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template_tag">&#123;% elseif theme.sharesdk %&#125;</span><span class="xml"></span><br><span class="line">        </span><span class="template_tag">&#123;% <span class="keyword">include</span> '_partials/share/sharesdk.swig' %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p>
<p>这段代码就是根据主题文件的配置，来为文档添加相应的swig文件。要想实现在配置文件中选择性的使用分享功能，只需要在配置文件中修改即可。</p>
<h2 id="修改_config-yml">修改_config.yml</h2><p>接下来就是修改项目的配置文件了。<br>在主题的配置文件中添加：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#Share</span></span><br><span class="line"><span class="label">sharesdk:</span> true</span><br><span class="line"><span class="label">shareSDKappkey:</span> appkey</span><br></pre></td></tr></table></figure></p>
<p>如果想使用就可以设置为true并添加appkey了。当然不想使用。直接注释就可以了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天发现一个分享的的sdk,可以在各个平台使用。由于不太喜欢主题提供的几个分享的样式。就试了试怎么这个。发现还是不错滴。。下面是分享的按钮和分享的样式：<br><strong>效果见下面——</strong><br>传送门：<a href="http://sharesdk.]]>
    </summary>
    
      <category term="hexo,NexT" scheme="http://m.magicer.xyz/tags/hexo-NexT/"/>
    
      <category term="Hexo" scheme="http://m.magicer.xyz/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[修改了host文件之后github无法记载样式表的解决方案]]></title>
    <link href="http://m.magicer.xyz/2016/04/github-could-not-load-css/"/>
    <id>http://m.magicer.xyz/2016/04/github-could-not-load-css/</id>
    <published>2016-04-06T05:37:13.000Z</published>
    <updated>2016-04-14T08:13:40.062Z</updated>
    <content type="html"><![CDATA[<p>今天由于某种原因想要使用Google结果就修改了Host文件，结果发现，在登录Githu的时候无法加载样式表了。好悲催，好不容易Google可以使用了，不能把host文件在改回去吧，不能忍。于是，看了分析了一下github页面，发现：<br><img src="/image/Github/css_js_loaded/problem.png" alt="Problem"><br><img src="/image/Github/css_js_loaded/network.png" alt="Network"></p>
<p>  复制上图中的地址 然后在<a href="http://ipaddress.com/ip-lookup/" target="_blank" rel="external">ipaddress.com</a>上找到该地址的IP。例如：<br>  <img src="/image/Github/css_js_loaded/detail.png" alt="Detail"></p>
<p>  查找完之后，打开host文件添加<br>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">185.31</span>.<span class="number">17.133</span>  assets-cdn<span class="class">.github</span><span class="class">.com</span></span><br></pre></td></tr></table></figure></p>
<p>  其他的资源无法加载，解决方法类似：<br>  下面是我往host文件中添加的记录：<br>  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">	 # Github start</span><br><span class="line">	<span class="number">192.30</span>.<span class="number">252.141</span>	gist.github.<span class="keyword">com</span></span><br><span class="line"># Github end</span><br><span class="line">#fix github cdn problem because of GFW</span><br><span class="line">#<span class="number">185.31</span>.<span class="number">17.184</span>  github.<span class="keyword">global</span>.ssl.fastly.net</span><br><span class="line"><span class="number">23.235</span>.<span class="number">40.133</span> assets-cdn.github.<span class="keyword">com</span></span><br><span class="line"><span class="number">185.31</span>.<span class="number">17.133</span> avatars3.githubusercontent.<span class="keyword">com</span></span><br><span class="line"><span class="number">23.235</span>.<span class="number">40.133</span> avatars1.githubusercontent.<span class="keyword">com</span></span><br><span class="line"><span class="number">185.31</span>.<span class="number">17.133</span> avatars0.githubusercontent.<span class="keyword">com</span></span><br><span class="line"><span class="number">192.30</span>.<span class="number">252.120</span> 	github.<span class="keyword">com</span></span><br><span class="line"><span class="number">185.31</span>.<span class="number">17.133</span> avatars2.githubusercontent.<span class="keyword">com</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天由于某种原因想要使用Google结果就修改了Host文件，结果发现，在登录Githu的时候无法加载样式表了。好悲催，好不容易Google可以使用了，不能把host文件在改回去吧，不能忍。于是，看了分析了一下github页面，发现：<br><img src="/image]]>
    </summary>
    
      <category term="github" scheme="http://m.magicer.xyz/tags/github/"/>
    
      <category term="Software" scheme="http://m.magicer.xyz/categories/Software/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java插入排序，选择排序和冒泡排序的简单使用]]></title>
    <link href="http://m.magicer.xyz/2016/03/bubble-selection-insert-sort-1/"/>
    <id>http://m.magicer.xyz/2016/03/bubble-selection-insert-sort-1/</id>
    <published>2016-03-14T11:18:41.000Z</published>
    <updated>2016-10-13T13:42:09.231Z</updated>
    <content type="html"><![CDATA[<p>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中的进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</p>
<h2 id="冒泡排序">冒泡排序</h2><p>经过一次次的交换，最小的数慢慢的交换到数组开头，像冒泡泡。</p>
<p>专业描述：<br> 前提条件：序列S={S0,S1,S2….Sn-1}是n个可排序元素的系列<br> 1、令j从n-1递增到j，重复 2—4<br> 2、令i从1递增到j，重复 3<br> 3、如果元素Si-1个Si成反序 交换他们<br> 4、结束标记，序列{S0………Sj}被排序，且Sj最大    </p>
<p>算法步骤：<br>1、比较相邻的元素，如果第一个大，就交换他们。<br>2、对每一个相邻的元素都比较并交换，从开始到最后一对，每次都可以保证最后的那个元素是最大的。<br>3、针对所有的元素，重复执行，除了最后一个（因为最后一个已经是最大的）。<br>4、每次重复上面的步骤，知道没有任何一对数字需要比较<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[]arr)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> temp;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;  <span class="comment">//控制循环次数，最多length-1次</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++)&#123;   </span><br><span class="line">				<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;  <span class="comment">//交换，大的值交换到后面</span></span><br><span class="line">					temp=arr[j];</span><br><span class="line">					arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">					arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//打印出每次排序的数组；</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> num:arr)&#123;</span><br><span class="line">				System.out.print(num+<span class="string">"  "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] arrays=&#123;<span class="number">12</span>,<span class="number">14</span>,<span class="number">65</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">3</span>,<span class="number">45</span>,<span class="number">4</span>&#125;;</span><br><span class="line">		bubbleSort(arrays);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>伪代码如下：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i &lt;<span class="comment">---1 to length[A]</span></span><br><span class="line">	do <span class="keyword">for</span> j &lt;<span class="comment">---length[A] down to i+1</span></span><br><span class="line">		do <span class="keyword">if</span> A[j] &lt; A[j-<span class="number">1</span>]</span><br><span class="line">		<span class="keyword">then</span> exchange A[j] &lt;<span class="comment">--&gt; A[j-1]</span></span><br></pre></td></tr></table></figure></p>
<p>在网上找了个图示，如下：<br><img src="/image/sort/bubble.gif" alt="Bubble Sort"></p>
<h2 id="插入排序">插入排序</h2><p>插入排序的一个典型例子就是扑克牌，联想一下扑克牌我们就可以很好的理解插入排序是如何工作的。<br>算法步骤：<br>1、将待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当作是未排序序列。<br>2、从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素和有序序列中的某个元素相等，则将带插入元素插入到相等元素的后面）<br><img src="/image/sort/insert.gif" alt="Insert Short"></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j &lt;<span class="comment">-- 2 to length[A]</span></span><br><span class="line">	<span class="built_in">do</span> key &lt;<span class="comment">-- A[j]</span></span><br><span class="line">	<span class="comment">##insert A[j] into the sorted sequence A[1......j-1]</span></span><br><span class="line">	i &lt;<span class="comment">--j-1</span></span><br><span class="line">	<span class="keyword">while</span> i &gt;=<span class="number">0</span> <span class="operator">and</span> A[i] &gt; key</span><br><span class="line">		<span class="built_in">do</span> A[i+<span class="number">1</span>] &lt;<span class="comment">-- A[i]</span></span><br><span class="line">		i &lt;<span class="comment">-- i</span></span><br><span class="line">	A[i+<span class="number">1</span>] &lt;<span class="comment">-- key</span></span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;<span class="keyword">int</span> insertNode;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">		insertNode = array[i];</span><br><span class="line">		j = i+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;insertNode &lt; array[j])&#123;</span><br><span class="line">			array[j+<span class="number">1</span>] = array[j];</span><br><span class="line">			j--</span><br><span class="line">&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="选择排序">选择排序</h2><p><img src="/image/sort/selection.gif" alt="Selection Sort"></p>
<p>基本思想：直接选择排序的基本思想是：第i趟排序开始时，当前有序区和无序区分别为R[1····i-1]和R[i····n]（1&lt;=i&lt;=n）该趟排序则是从当前无序区选出关键字最小的记录 R[k] 将它与无序区的第一个记录R[i]交换，使R[1····i]和R[i+1···n]分别变为新的有序区和新的无序区。因为每趟排序均使有序区中增加了一个记录，且有序区中的记录关键字均不大于无序区中记录的关键字，即第i趟排序之后 R[1···i].keys&lt;=R[i+1···n].keys 所以进行n-1趟排序之后有R[1·····n-1].key,即经过n-1趟排序之后，整个文件R[1····n]递增有序。注意：第1趟排序开始时，无序区为R[1·····n]。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">choose</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp = a[i];</span><br><span class="line">		<span class="keyword">int</span> index = i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;a.length;j++)&#123;  </span><br><span class="line">			<span class="keyword">if</span>(tmp&gt;array[j])&#123;     <span class="comment">//比较值，取出值小的下标</span></span><br><span class="line">				tmp = array[j];</span><br><span class="line">				index = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(i!=index)&#123;   <span class="comment">//交换两个的值，当前最小值的坐标等于当前坐标时。</span></span><br><span class="line">			<span class="keyword">int</span> k = array[i];</span><br><span class="line">			array[i] = array[index];</span><br><span class="line">			array[index] = k;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="简洁说明">简洁说明</h3><p> 选择排序时依次固定一个下标,让每个下标中的数和它后面的所有的数进行比较;<br> 代码如下:<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">	<span class="keyword">int</span>[] arr = &#123; <span class="number">2</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">543</span>, <span class="number">53</span>, <span class="number">23</span>, <span class="number">56</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arr.length ; j++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">			swap(arr, i, j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:arr)&#123;</span><br><span class="line">	System.out.print(i+<span class="string">","</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中的进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</p>
<h2 id="冒泡排序">冒泡排序</h2><p>经过一次次的交换，最小的数慢慢的交换到数组开头，像冒泡]]>
    </summary>
    
      <category term="sort" scheme="http://m.magicer.xyz/tags/sort/"/>
    
      <category term="Java" scheme="http://m.magicer.xyz/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java static关键字及静态代码块的使用]]></title>
    <link href="http://m.magicer.xyz/2016/03/java-static-keywords/"/>
    <id>http://m.magicer.xyz/2016/03/java-static-keywords/</id>
    <published>2016-03-08T11:41:04.000Z</published>
    <updated>2016-03-08T13:07:37.437Z</updated>
    <content type="html"><![CDATA[<p>  在了解static之前 ，先来了解下this关键字。多少有点渊源；首先 this是什么意识呢？this指代当前的对象 用法如下：</p>
<h1 id="this关键字">this关键字</h1><h2 id="this指代当前对象">this指代当前对象</h2>  <figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> class Cirlcle &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="constant">PI</span>=<span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">double</span> radius;</span><br><span class="line">Point <span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">public</span> Cirlcle()&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Cirlcle(<span class="keyword">double</span> radius,Point <span class="built_in">point</span>)&#123;</span><br><span class="line">	<span class="keyword">this</span>.radius=radius;</span><br><span class="line">	<span class="keyword">this</span>.<span class="built_in">point</span>=<span class="built_in">point</span>;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>  在此程序中this指代当前对象，如果不加上this时，将无法达到预期的效果，因为形式参数radius的作用域只在方法里，当加上this时代表的是当前对象的radius，所以此时可以达到为对象的域赋值的作用。</p>
<p>  this只能在方法内部使用，表示对”调用方法的那个对象“的引用，如果在方法内部调用同一个类的另一个方法则不用用this，直接调用即可。只有需要明确指出对当前对象的引用时，才需要使用this关键字。</p>
<h2 id="this调用构造器">this调用构造器</h2><pre><code>还是那个程序：

<span class="comment"><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> class Cirlcle &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="constant">PI</span>=<span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">double</span> radius;</span><br><span class="line">Point <span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">public</span> Cirlcle(<span class="keyword">double</span> radius)&#123;	</span><br><span class="line">	<span class="keyword">this</span>(radius,<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Cirlcle(<span class="keyword">double</span> radius,Point <span class="built_in">point</span>)&#123;</span><br><span class="line">	<span class="keyword">this</span>.radius=radius;</span><br><span class="line">	<span class="keyword">this</span>.<span class="built_in">point</span>=<span class="built_in">point</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></span>
</code></pre><p>  在重载的一个参数的构造器中就调用了另一个构造器Cirlcle(double radius,Point point)，利用次构造器来在当前构造器中对域进行初始化工作。<br>  但是此时要注意的是，this()必须放在方法的第一行。</p>
<p>  this还有另外一个用法，即用在return语句上。</p>
  <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Book</span> &#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">double</span> price;</span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Book <span class="title">printPrice</span><span class="params">()</span></span>&#123;</span><br><span class="line">		price=<span class="number">100.0</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"Book price:"</span>+price);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;	<span class="comment">//返回对当前对象的引用</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Book <span class="title">printName</span><span class="params">()</span></span>&#123;</span><br><span class="line">		name=<span class="string">"Thinking in Java"</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"Book name:"</span>+name);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;   <span class="comment">//返回对当前对象的引用</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Book book = <span class="keyword">new</span> Book();</span><br><span class="line">		book.printName().printPrice();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  在方法中由于利用return返回了对当前对象的引用，所以可以使用<code>.</code>来执行多条语句</p>
<p>   接下来，就要来讲解static的用法了。准备好了么？</p>
<h1 id="static关键字">static关键字</h1><p>static：静态；</p>
<h2 id="static域">static域</h2><p>static域是所有对象所共有的，是属于类所有，而不是特定的对象。当对其进行<br>我们还是用上面的程序，例如：书都是一个特定图书馆的，所以此时我们就可以定义一个static类型的域来表明所有的Book都是国家图书馆的。<br>此时我们就可以这样定义：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Book</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> String library=<span class="string">"国家图书馆"</span>; <span class="comment">//static域</span></span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">double</span> price;</span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Book <span class="title">printPrice</span><span class="params">()</span></span>&#123;</span><br><span class="line">		price=<span class="number">100.0</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"Book price:"</span>+price);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Book <span class="title">printName</span><span class="params">()</span></span>&#123;</span><br><span class="line">		name=<span class="string">"Thinking in Java"</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"Book name:"</span>+name);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Book book = <span class="keyword">new</span> Book();</span><br><span class="line">		book.printName().printPrice();</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"library:"</span>+Book.library);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当定义了static域之后我们就可以用 <code>类名.域</code> 来的到该值<br>static域在内存中有一块特定的内存，每个对象所公用，当在一个对象中对其进行了修改，则其他对象的词域也会被修改。<br><strong>notes</strong>:构造器中不要有static域；</p>
<h2 id="static方法">static方法</h2><p> 利用static修饰的方法就是static方法；最典型的就是main()<br> static字段对于每个对象都是公用的同一块内存区域。而static方法的一个最主要的用法是在没有创建对象的情况下调用方法。<br> static方法就是没有this的方法（也没有super），而且在static的内部不能调用非静态方法和非静态域；</p>
<p> 在上面的代码中添加<br> <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">printInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">	System.<span class="keyword">out</span>.println(name+price); <span class="comment">//error 静态方法中不能调用非静态域</span></span><br><span class="line">	printName();   <span class="comment">//error 静态方法中不能调用非静态方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="static代码块">static代码块</h2><p> 代码块是用{}括起来的部分；在方法中的是一般代码块，在类中声明的一般代码块就是构造代码块。而用static修饰的代码块就是静态代码块；当然还有同步代码块，现在就不做介绍了。<br> 接下来我们来看个程序：</p>
 <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Book</span> &#123;</span><br><span class="line">	</span><br><span class="line">	&#123; </span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"构造代码块"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"一般代码块"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 此程序的运行结果为：</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">静态代码块</span><br><span class="line">一般代码块</span><br></pre></td></tr></table></figure>
<p>我们可以看到，最先执行的是静态代码块。而不是在main()方法中的一般代码块。<br>静态代码块是最先执行的，以载入类就执行了。</p>
<p>再看下面的程序：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Book</span> &#123;</span><br><span class="line">	</span><br><span class="line">	&#123; </span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"构造代码块"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"一般代码块"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">new</span> Book();   <span class="comment">//添加了一行</span></span><br><span class="line">		<span class="keyword">new</span> Book();   <span class="comment">//添加了一行</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而此时的运行结果是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">静态代码块</span><br><span class="line">一般代码块</span><br><span class="line">构造代码块</span><br><span class="line">构造代码块</span><br></pre></td></tr></table></figure>
<p>可以看到，构造代码块只有在创建对象的时候才会执行。</p>
<p>构造代码块跟构造器又是那个先执行的呢？<br>来看下面的代码：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Book</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"构造器"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"静态代码块#####"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#123; </span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"构造代码块#####"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#123; </span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"构造代码块"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"一般代码块"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">new</span> Book();</span><br><span class="line">		<span class="keyword">new</span> Book();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果是：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">静态代码块<span class="preprocessor">#####</span></span><br><span class="line">静态代码块</span><br><span class="line">一般代码块</span><br><span class="line">构造代码块<span class="preprocessor">#####</span></span><br><span class="line">构造代码块</span><br><span class="line">构造器</span><br><span class="line">构造代码块<span class="preprocessor">#####</span></span><br><span class="line">构造代码块</span><br><span class="line">构造器</span><br></pre></td></tr></table></figure></p>
<p>通过运行结果可以看到，最先执行的是静态代码块并且靠上的静态代码块先执行，然后是一般代码块,然后是构造代码块，靠上的先执行，然后才是构造器；</p>
<p>那么下面的顺序呢？运行结果是？</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type">Book</span><span class="literal">()</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="type">Book</span><span class="literal">()</span>;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">System</span>.out.println(<span class="string">"一般代码块"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果是：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">静态代码块<span class="preprocessor">#####</span></span><br><span class="line">静态代码块</span><br><span class="line">构造代码块<span class="preprocessor">#####</span></span><br><span class="line">构造代码块</span><br><span class="line">构造器</span><br><span class="line">构造代码块<span class="preprocessor">#####</span></span><br><span class="line">构造代码块</span><br><span class="line">构造器</span><br><span class="line">一般代码块</span><br></pre></td></tr></table></figure></p>
<p>显而易见了，先创建对象就先执行构造代码块构造器，然后是一般代码块，按顺序执行，谁靠上谁先执行。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>  在了解static之前 ，先来了解下this关键字。多少有点渊源；首先 this是什么意识呢？this指代当前的对象 用法如下：</p>
<h1 id="this关键字">this关键字</h1><h2 id="this指代当前对象">this指代当前对象</h2>  ]]>
    </summary>
    
      <category term="static" scheme="http://m.magicer.xyz/tags/static/"/>
    
      <category term="Java" scheme="http://m.magicer.xyz/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Jsoup.jar的使用]]></title>
    <link href="http://m.magicer.xyz/2016/03/Java-Jsoup-jar-1/"/>
    <id>http://m.magicer.xyz/2016/03/Java-Jsoup-jar-1/</id>
    <published>2016-03-02T12:34:25.000Z</published>
    <updated>2016-03-02T13:25:13.312Z</updated>
    <content type="html"><![CDATA[<p>Jsoup的使用方法参见：<a href="http://www.open-open.com/jsoup/" target="_blank" rel="external">http://www.open-open.com/jsoup/</a>.上面是中文版的也有官方API。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * 通过网页来获取数据。</span><br><span class="line"> * </span><br><span class="line"> */</span></span><br><span class="line">Document doc =Jsoup.connect(<span class="string">"http://blog.magicer.xyz/"</span>).get();</span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * 得到页面中 第一个class为“post-title”的内容，然后输出其的值</span><br><span class="line"> *</span><br><span class="line">  */</span></span><br><span class="line">org.jsoup.nodes.Element string=doc.getElementsByClass(<span class="string">"post-title"</span>).first();</span><br><span class="line">		System.out.println(string); <span class="comment">/*输出结果为</span><br><span class="line">		&lt;h1 class="post-title" itemprop="name headline"&gt;</span><br><span class="line">		 &lt;a class="post-title-link" </span><br><span class="line">		 href="/2016/03/eclipse-import-jar/" itemprop="url"&gt; </span><br><span class="line">		 Eclipse如何导入外部jar包 &lt;/a&gt; &lt;/h1&gt;</span><br><span class="line">		*/</span></span><br><span class="line">		String title=string.text();</span><br><span class="line">  <span class="comment">/*</span><br><span class="line">   * 获得class名为post-title-link的属性的值</span><br><span class="line">   * (此处是一个a标签的href属性的值：/2016/03/eclipse-import-jar/)</span><br><span class="line">   * </span><br><span class="line">   */</span></span><br><span class="line">  String string2=doc.getElementsByClass(<span class="string">"post-title-link"</span>).attr(<span class="string">"href"</span>);</span><br><span class="line">  System.out.println(string2);   <span class="comment">//输出结果为：/2016/03/eclipse-import-jar/</span></span><br><span class="line">System.out.println(title);  	<span class="comment">//输出结果是：Eclipse如何导入外部jar包 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * 通过get()方法得到body的内容 get()方法的索引（index）从0 （即first（）方法）开始</span><br><span class="line"> * 	get(0)=first();</span><br><span class="line"> * </span><br><span class="line"> */</span></span><br><span class="line">org.jsoup.nodes.Element postBodyString= doc.getElementsByClass(<span class="string">"post-body"</span>).get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">String postBody=postBodyString.text();  <span class="comment">//得到post-body的内容</span></span><br><span class="line">System.out.println(postBody);  <span class="comment">// 可以正常的输出post-body的内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * 获得menu菜单项</span><br><span class="line"> * </span><br><span class="line"> */</span></span><br><span class="line">org.jsoup.nodes.Element element=doc.getElementsByClass(<span class="string">"menu"</span>).first();</span><br><span class="line"></span><br><span class="line">String menu= element.text();</span><br><span class="line">System.out.println(menu);  <span class="comment">// 输出结果为：首页 分类 归档 标签 关于</span></span><br></pre></td></tr></table></figure>
<p>Elements这个对象提供了一系列类似于DOM的方法来查找元素，抽取并处理其中的数据。具体如下：</p>
<h3 id="查找元素">查找元素</h3><p>getElementById(String id)<br>getElementsByTag(String tag)<br>getElementsByClass(String className)<br>getElementsByAttribute(String key) (and related methods)<br>Element siblings: siblingElements(), firstElementSibling(), lastElementSibling();nextElementSibling(), previousElementSibling()<br>Graph: parent(), children(), child(int index)</p>
<h3 id="元素数据">元素数据</h3><p>attr(String key)获取属性attr(String key, String value)设置属性<br>attributes()获取所有属性<br>id(), className() and classNames()<br>text()获取文本内容text(String value) 设置文本内容<br>html()获取元素内HTMLhtml(String value)设置元素内的HTML内容<br>outerHtml()获取元素外HTML内容<br>data()获取数据内容（例如：script和style标签)<br>tag() and tagName()</p>
<h3 id="操作HTML和文本">操作HTML和文本</h3><p>append(String html), prepend(String html)<br>appendText(String text), prependText(String text)<br>appendElement(String tagName), prependElement(String tagName)<br>html(String value)</p>
<h3 id="Selector选择器概述">Selector选择器概述</h3><p>tagname: 通过标签查找元素，比如：a<br>ns|tag: 通过标签在命名空间查找元素，比如：可以用 fb|name 语法来查找 <fb:name> 元素<br><code>#id</code>: 通过ID查找元素，比如：#logo<br>.class: 通过class名称查找元素，比如：.masthead</fb:name></p>
<p>[^attr]: 利用属性名前缀来查找元素，比如：可以用[^data-] 来查找带有HTML5 Dataset属性的元素</p>
<p>[attr^=value], [attr$=value], [attr<em>=value]: 利用匹配属性值开头、结尾或包含属性值来查找元素，比如：[href</em>=/path/]<br>[attr~=regex]: 利用属性值匹配正则表达式来查找元素，比如： img[src~=(?i).(png|jpe?g)]<br><em>: 这个符号将匹配所有元素<br>Selector选择器组合使用<br>el#id: 元素+ID，比如： div#logo<br>el.class: 元素+class，比如： div.masthead<br>el[attr]: 元素+class，比如： a[href]<br>任意组合，比如：a[href].highlight<br>ancestor child: 查找某个元素下子元素，比如：可以用.body p 查找在”body”元素下的所有p元素<br>parent &gt; child: 查找某个父元素下的直接子元素，比如：可以用div.content &gt; p 查找 p 元素，也可以用body &gt; </em> 查找body标签下所有直接子元素<br>siblingA + siblingB: 查找在A元素之前第一个同级元素B，比如：div.head + div<br>siblingA ~ siblingX: 查找A元素之前的同级X元素，比如：h1 ~ p<br>el, el, el:多个选择器组合，查找匹配任一选择器的唯一元素，例如：div.masthead, div.logo</p>
<h3 id="伪选择器selectors">伪选择器selectors</h3><p>:lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小于三列的元素<br>:gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素<br>:eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素<br>:has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素<br>:not(selector): 查找与选择器不匹配的元素，比如： div:not(.logo) 表示不包含 class=”logo” 元素的所有 div 列表<br>:contains(text): 查找包含给定文本的元素，搜索不区分大不写，比如： p:contains(jsoup)<br>:containsOwn(text): 查找直接包含给定文本的元素<br>:matches(regex): 查找哪些元素的文本匹配指定的正则表达式，比如：div:matches((?i)login)<br>:matchesOwn(regex): 查找自身包含文本匹配指定正则表达式的元素<br>注意：上述伪选择器索引是从0开始的，也就是说第一个元素索引值为0，第二个元素index为1等<br>可以查看Selector API参考来了解更详细的内容</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Jsoup的使用方法参见：<a href="http://www.open-open.com/jsoup/" target="_blank" rel="external">http://www.open-open.com/jsoup/</a>.上面是中文版的也有官方API。]]>
    </summary>
    
      <category term="Java" scheme="http://m.magicer.xyz/tags/Java/"/>
    
      <category term="Jsoup" scheme="http://m.magicer.xyz/tags/Jsoup/"/>
    
      <category term="Java" scheme="http://m.magicer.xyz/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Eclipse如何导入外部jar包]]></title>
    <link href="http://m.magicer.xyz/2016/03/eclipse-import-jar/"/>
    <id>http://m.magicer.xyz/2016/03/eclipse-import-jar/</id>
    <published>2016-03-02T11:39:01.000Z</published>
    <updated>2016-03-26T10:38:06.000Z</updated>
    <content type="html"><![CDATA[<p>今天需要往自己的项目中添加外部jar包，在这里记录下过程：</p>
<h2 id="第一步">第一步</h2><p> 第一步当然是先下载jar文件</p>
<h2 id="第二步">第二步</h2><p> 在项目内新建lib文件夹，把.jar文件copy进去；</p>
<h2 id="第三步">第三步</h2><p> 在项目上右键 找到<code>Build Path</code>之后选择<code>Configure Build Path</code>,会出现：</p>
<p> <img src="/image/eclipse-import-jar1.png" alt="eclipse-setting"></p>
<p> 点击<code>Add JARs</code>    找到jar文件 添加，之后点击确定。</p>
<p> 之后就可以愉快的使用了。图片太少，以后再添加吧。就先记录到这些。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天需要往自己的项目中添加外部jar包，在这里记录下过程：</p>
<h2 id="第一步">第一步</h2><p> 第一步当然是先下载jar文件</p>
<h2 id="第二步">第二步</h2><p> 在项目内新建lib文件夹，把.jar文件copy进去；</p>
<h]]>
    </summary>
    
      <category term="Eclipse" scheme="http://m.magicer.xyz/tags/Eclipse/"/>
    
      <category term="Software" scheme="http://m.magicer.xyz/categories/Software/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[eclipse使用过程中遇到的问题]]></title>
    <link href="http://m.magicer.xyz/2016/03/eclipse-problem-1/"/>
    <id>http://m.magicer.xyz/2016/03/eclipse-problem-1/</id>
    <published>2016-03-01T01:38:34.000Z</published>
    <updated>2016-03-02T07:09:42.640Z</updated>
    <content type="html"><![CDATA[<p>在使用eclipse的时候遇到到很多问题，在这里记录一下。</p>
<h2 id="Failed_to_create_the_Java_Virtual_Machine_的问题的解决">Failed to create the Java Virtual Machine 的问题的解决</h2><p>  path等的配置都没有问题，但是运行eclipse的时候还是无法运行 ，那么怎么解决呢？<br>   在eclipse文件夹下找到<code>eclipse.ini</code> 文件 打开修改为下面</p>
<pre><code> -startup
plugins/org<span class="class">.eclipse</span><span class="class">.equinox</span><span class="class">.launcher_1</span>.<span class="number">3.0</span><span class="class">.v20120522-1813</span><span class="class">.jar</span>
--launcher<span class="class">.library</span>
plugins/org<span class="class">.eclipse</span><span class="class">.equinox</span><span class="class">.launcher</span><span class="class">.win32</span><span class="class">.win32</span><span class="class">.x86_1</span>.<span class="number">1.200</span><span class="class">.v20120913-144807</span>
-product
com<span class="class">.android</span><span class="class">.ide</span><span class="class">.eclipse</span><span class="class">.adt</span><span class="class">.package</span><span class="class">.adtproduct</span>
-showsplash
org<span class="class">.eclipse</span><span class="class">.platform</span>
--launcher<span class="class">.XXMaxPermSize</span>
<span class="number">128</span>m
--launcher<span class="class">.defaultAction</span>
openFile
-vmargs
-Dosgi.requiredJavaVersion=<span class="number">1.6</span>
-XX:MaxPermSize=<span class="number">256</span>m
-Xms512m
-Xmx512m
</code></pre><p>即修改这几个地方：<code>--launcher.XXMaxPermSize
 128m</code>  <code>-Dosgi.requiredJavaVersion=1.7</code><br> <code>-XX:MaxPermSize=256m
 -Xms512m
 -Xmx512m</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在使用eclipse的时候遇到到很多问题，在这里记录一下。</p>
<h2 id="Failed_to_create_the_Java_Virtual_Machine_的问题的解决">Failed to create the Java Virtual Machine 的问题]]>
    </summary>
    
      <category term="eclipse" scheme="http://m.magicer.xyz/tags/eclipse/"/>
    
      <category term="Software" scheme="http://m.magicer.xyz/categories/Software/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[404界面的样式表无法加载问题]]></title>
    <link href="http://m.magicer.xyz/2015/10/blog-404-style-not-found/"/>
    <id>http://m.magicer.xyz/2015/10/blog-404-style-not-found/</id>
    <published>2015-10-28T13:54:13.000Z</published>
    <updated>2016-03-08T13:13:05.125Z</updated>
    <content type="html"><![CDATA[<p> 今天终于发现了404页面样式表无法加载的的解决方法。</p>
<p> 原先的时候是当输入的域名后有多个<code>/</code>的时候404页面的样式表无法加载，比如访问的页面是<br> <code>http://magicer.xyz/dd/d</code>。此时就无法加载样式表，而如果网址是 <code>http://magicer.xyz/dd</code>样式表就可以加载。处了此问题后，问题一直没有解决，但是今天突然发现了解决方法<br> 原先的link是<br> <figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="variable">rel=</span><span class="string">"stylesheet"</span> <span class="variable">media=</span><span class="string">"screen"</span> <span class="variable">href=</span><span class="string">"styl4.css"</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p> 而现在是<br> <figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="variable">rel=</span><span class="string">"stylesheet"</span> <span class="variable">media=</span><span class="string">"screen"</span> <span class="variable">href=</span><span class="string">"/styl4.css"</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p> 只加了个`/``问题就解决了，但是 在电脑上测试的时候无法加载样式表，但是传到服务器上之后就可以。头像的问题一样如此解决。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p> 今天终于发现了404页面样式表无法加载的的解决方法。</p>
<p> 原先的时候是当输入的域名后有多个<code>/</code>的时候404页面的样式表无法加载，比如访问的页面是<br> <code>http://magicer.xyz/dd/d</code>。此时就无]]>
    </summary>
    
      <category term="css" scheme="http://m.magicer.xyz/tags/css/"/>
    
      <category term="Hexo" scheme="http://m.magicer.xyz/categories/Hexo/"/>
    
  </entry>
  
</feed>