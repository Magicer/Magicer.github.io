<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Magicer|张同爽的个人博客]]></title>
  <subtitle><![CDATA[Magicer]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.magicer.xyz/"/>
  <updated>2015-10-27T11:56:46.853Z</updated>
  <id>http://blog.magicer.xyz/</id>
  
  <author>
    <name><![CDATA[Magicer]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android Animation基础（一）]]></title>
    <link href="http://blog.magicer.xyz/2015/10/the-basic-of-android-animation/"/>
    <id>http://blog.magicer.xyz/2015/10/the-basic-of-android-animation/</id>
    <published>2015-10-27T07:18:29.000Z</published>
    <updated>2015-10-27T11:56:46.853Z</updated>
    <content type="html"><![CDATA[<h2 id="视图动画（View_Animation）">视图动画（View Animation）</h2><p> 主要有AlphaAnimation ,RotateAnimation,TranslateAnimation,ScaleAnimation四种动画方式，在3.0之前广泛使用，但是由于不具有交互性（当View发生视图动画后，其响应事件的位置仍然在动画前的地方），渐渐的属性动画使用的多起来。一般试图动画制作普通的动画效果，不做交互。优点就是效率高使用方便。</p>
<h3 id="通过XML定义动画">通过XML定义动画</h3><p>在<code>anim</code>文件夹下创建，通过xml创建的动画可读性较好。<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml <span class="variable">version=</span><span class="string">"1.0"</span> <span class="variable">encoding=</span><span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;set xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    android:<span class="variable">interpolator=</span><span class="string">"@[package:]anim/interpolator_resource"</span></span><br><span class="line">    android:<span class="variable">shareInterpolator=</span>[<span class="string">"true"</span> | <span class="string">"false"</span>] &gt;</span><br><span class="line">    &lt;alpha</span><br><span class="line">        android:<span class="variable">fromAlpha=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">toAlpha=</span><span class="string">"float"</span> /&gt;</span><br><span class="line">    &lt;scale</span><br><span class="line">        android:<span class="variable">fromXScale=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">toXScale=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">fromYScale=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">toYScale=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">pivotX=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">pivotY=</span><span class="string">"float"</span> /&gt;</span><br><span class="line">    &lt;translate</span><br><span class="line">        android:<span class="variable">fromXDelta=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">toXDelta=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">fromYDelta=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">toYDelta=</span><span class="string">"float"</span> /&gt;</span><br><span class="line">    &lt;rotate</span><br><span class="line">        android:<span class="variable">fromDegrees=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">toDegrees=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">pivotX=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">pivotY=</span><span class="string">"float"</span> /&gt;</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure></p>
<p>下面来解释一下：<br><code>android:interpolator</code> ：表示动画集合采用的插值器，插值器影响动画的速度。<br><code>android:shareInterpolator</code> ：表示集合中的动画是否和集合公用同一个插值器。<br><code>pivot</code>：支点，枢纽；</p>
<p>通过xml创建的动画怎么使用呢：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animation animation=AnimationUtils.loadAnimation(<span class="keyword">this</span>,R.anim.viewanimation);</span><br><span class="line">view.startAnimation(animation);</span><br></pre></td></tr></table></figure></p>
<h3 id="透明度动画AlphaAnimation">透明度动画AlphaAnimation</h3><p>这个应该很清楚，设置开始值，结束值即可。<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AlphaAnimation aa=new AlphaAnimation(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">aa.setDuration(<span class="number">1000</span>);</span><br><span class="line">View.startAnimation(aa);</span><br><span class="line">/*</span><br><span class="line">* <span class="keyword">public</span> AlphaAnimation (<span class="built_in">float</span> fromAlpha, <span class="built_in">float</span> toAlpha)</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p>
<h3 id="位移动画_TranslateAnimation">位移动画 TranslateAnimation</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TranslateAnimation ta=new TranslateAnimation(<span class="number">0</span>,<span class="number">300</span>,<span class="number">0</span>,<span class="number">300</span>);</span><br><span class="line">ta.setDuration(<span class="number">1000</span>);</span><br><span class="line">View.startAnimation(ta);</span><br><span class="line">/*</span><br><span class="line">*构造方法一：</span><br><span class="line">*<span class="keyword">public</span> TranslateAnimation (<span class="built_in">float</span> fromXDelta, <span class="built_in">float</span> toXDelta, </span><br><span class="line">                            <span class="built_in">float</span> fromYDelta, <span class="built_in">float</span> toYDelta)</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">*构造方法二</span><br><span class="line">*<span class="keyword">public</span> TranslateAnimation (<span class="built_in">int</span> fromXType, <span class="built_in">float</span> fromXValue, </span><br><span class="line">                            <span class="built_in">int</span> toXType, <span class="built_in">float</span> toXValue, </span><br><span class="line">                            <span class="built_in">int</span> fromYType, <span class="built_in">float</span> fromYValue, </span><br><span class="line">                            <span class="built_in">int</span> toYType, <span class="built_in">float</span> toYValue)</span><br><span class="line">*<span class="keyword">type</span>的值是：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF,</span><br><span class="line">* Animation.RELATIVE_TO_PARENT 之一</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h3 id="缩放动画_ScaleAnimation">缩放动画 ScaleAnimation</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ScaleAnimation sa=new ScaleAnimation(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">sa.setDuration(<span class="number">1000</span>);</span><br><span class="line">View.startAnimation(sa);</span><br><span class="line">/*</span><br><span class="line">*构造方法一</span><br><span class="line">*<span class="keyword">public</span> ScaleAnimation (<span class="built_in">float</span> fromX, <span class="built_in">float</span> toX, </span><br><span class="line">                        <span class="built_in">float</span> fromY, <span class="built_in">float</span> toY)</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">*构造方法二</span><br><span class="line">*<span class="keyword">public</span> ScaleAnimation (<span class="built_in">float</span> fromX, <span class="built_in">float</span> toX, </span><br><span class="line">                        <span class="built_in">float</span> fromY, <span class="built_in">float</span> toY, </span><br><span class="line">                        <span class="built_in">float</span> pivotX, <span class="built_in">float</span> pivotY)</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">*构造方法三</span><br><span class="line">*<span class="keyword">public</span> ScaleAnimation (<span class="built_in">float</span> fromX, <span class="built_in">float</span> toX, </span><br><span class="line">                        <span class="built_in">float</span> fromY, <span class="built_in">float</span> toY, </span><br><span class="line">                        <span class="built_in">int</span> pivotXType, <span class="built_in">float</span> pivotXValue, </span><br><span class="line">                        <span class="built_in">int</span> pivotYType, <span class="built_in">float</span> pivotYValue)</span><br><span class="line">*<span class="keyword">type</span>的值是：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, </span><br><span class="line">*Animation.RELATIVE_TO_PARENT 之一</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h3 id="旋转动画_RotateAnimation">旋转动画 RotateAnimation</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">RotateAnimation ra=new RotateAnimation(<span class="number">0</span>,<span class="number">360</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ra.setDuration(<span class="number">1000</span>);</span><br><span class="line">View.startAnimation(ra);</span><br><span class="line">/*</span><br><span class="line">*构造方法一</span><br><span class="line">*<span class="keyword">public</span> RotateAnimation (<span class="built_in">float</span> fromDegrees, <span class="built_in">float</span> toDegrees)</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">*构造方法二</span><br><span class="line">*<span class="keyword">public</span> RotateAnimation (<span class="built_in">float</span> fromDegrees, <span class="built_in">float</span> toDegrees, </span><br><span class="line">                        <span class="built_in">float</span> pivotX, <span class="built_in">float</span> pivotY)</span><br><span class="line">*pivotX等于<span class="number">0</span>是左边 Y=<span class="number">0</span>是上边</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">*构造方法三</span><br><span class="line">*<span class="keyword">public</span> RotateAnimation (<span class="built_in">float</span> fromDegrees, <span class="built_in">float</span> toDegrees, </span><br><span class="line">                        <span class="built_in">int</span> pivotXType, <span class="built_in">float</span> pivotXValue, </span><br><span class="line">                        <span class="built_in">int</span> pivotYType, <span class="built_in">float</span> pivotYValue)</span><br><span class="line">*<span class="keyword">type</span>的值是：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, </span><br><span class="line">*Animation.RELATIVE_TO_PARENT 之一</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h3 id="动画集合SetAnimation">动画集合SetAnimation</h3><p>动画集合简单只需要把需要的动画add上就OK了。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AnimationSet <span class="keyword">as</span>=<span class="keyword">new</span> AnimationSet(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">as</span>.setDuration(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">AlphaAnimation alphaAnimation=<span class="keyword">new</span> AlphaAnimation(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">alphaAnimation.setDuration(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">as</span>.addAnimation(alphaAnimation);</span><br><span class="line"></span><br><span class="line">RotateAnimation rotateAnimation=<span class="keyword">new</span> RotateAnimation(<span class="number">0</span>,<span class="number">360</span>);</span><br><span class="line">rotateAnimation.setDuration(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">as</span>.addAnimation(rotateAnimation);</span><br><span class="line"></span><br><span class="line">View.startAnimation(<span class="keyword">as</span>);</span><br></pre></td></tr></table></figure></p>
<p><strong><em>dddddd</em></strong><br><em>真是醉了</em><br><strong>dddddddd</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="视图动画（View_Animation）">视图动画（View Animation）</h2><p> 主要有AlphaAnimation ,RotateAnimation,TranslateAnimation,ScaleAnimation四种动画方式，在3.0之前]]>
    </summary>
    
      <category term="android" scheme="http://blog.magicer.xyz/tags/android/"/>
    
      <category term="animation" scheme="http://blog.magicer.xyz/tags/animation/"/>
    
      <category term="Android" scheme="http://blog.magicer.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 中实现“再按一次退出程序”的提醒]]></title>
    <link href="http://blog.magicer.xyz/2015/10/press-again-to-quit/"/>
    <id>http://blog.magicer.xyz/2015/10/press-again-to-quit/</id>
    <published>2015-10-26T06:35:04.000Z</published>
    <updated>2015-10-26T06:39:51.944Z</updated>
    <content type="html"><![CDATA[<p>见很多软件都有 按一次退出程序的提醒，觉得挺人性化，便从网上找到了代码，在这里记录一下：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> exitTime=<span class="number">0</span>;</span><br><span class="line"> @Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> onKeyDown(<span class="built_in">int</span> <span class="variable">keyCode</span>, KeyEvent event) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">keyCode</span> == KeyEvent.KEYCODE_BACK &amp;&amp; </span><br><span class="line">            event.getAction() == KeyEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((System.currentTimeMillis() - exitTime) &gt; <span class="number">2000</span>) &#123;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"再按一次退出程序"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                exitTime = System.currentTimeMillis();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                finish();</span><br><span class="line">                System.<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(<span class="variable">keyCode</span>, event);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>见很多软件都有 按一次退出程序的提醒，觉得挺人性化，便从网上找到了代码，在这里记录一下：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line]]>
    </summary>
    
      <category term="android" scheme="http://blog.magicer.xyz/tags/android/"/>
    
      <category term="Android" scheme="http://blog.magicer.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 中 ListView 的使用]]></title>
    <link href="http://blog.magicer.xyz/2015/10/android-listview-general/"/>
    <id>http://blog.magicer.xyz/2015/10/android-listview-general/</id>
    <published>2015-10-25T06:45:03.000Z</published>
    <updated>2015-10-27T11:49:53.441Z</updated>
    <content type="html"><![CDATA[<p>ListView是android应用开发中使用频率非常高的一个系统组件，几乎所有的应用中都要用到，尽管现在RecycleView有想要替代ListView的意味，但ListView仍然很重要。所以ListView值得我们深入的研究。下面就记录下ListView的使用。</p>
<h2 id="ViewHolder">ViewHolder</h2><p>使用ViewHolder模式能够提高ListView的效率.基本的使用方法如下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolderAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; mData;</span><br><span class="line">    <span class="keyword">private</span> LayoutInflater mInflater;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolderAdapter</span><span class="params">(Context context,List&lt;String&gt; data )</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mData=data;</span><br><span class="line">        mInflater=LayoutInflater.from(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mData.<span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mData.<span class="title">get</span><span class="params">(position)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">        ViewHolder holder=<span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//判断是否缓存</span></span><br><span class="line">        <span class="keyword">if</span> (convertView==<span class="keyword">null</span>)&#123;</span><br><span class="line">            holder=<span class="keyword">new</span> ViewHolder();</span><br><span class="line">            <span class="comment">//实例化布局</span></span><br><span class="line">            convertView=mInflater.inflate(R.layout.listitem,<span class="keyword">null</span>);</span><br><span class="line">            holder.img=(ImageView)convertView.findViewById(R.id.imageView);</span><br><span class="line">            holder.title=(TextView)convertView.findViewById(R.id.textView);</span><br><span class="line"></span><br><span class="line">            convertView.setTag(holder);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//通过Tag找到缓存的布局</span></span><br><span class="line">            holder=(ViewHolder)convertView.getTag();</span><br><span class="line">        &#125;</span><br><span class="line">        holder.img.setBackgroundResource(R.mipmap.ic_launcher);</span><br><span class="line">        holder.title.setText(mData.get(position));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> convertView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义的ViewHolder类</span></span><br><span class="line">      <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> ImageView img;</span><br><span class="line">        <span class="keyword">public</span> TextView title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="ListView样式">ListView样式</h2><p>divider:分割线颜色，<br>diverHeight:分割线宽度，<br>scrollbars=none:去掉滑动条，<br>listSelector：取消点击效果 （transparent：透明的）<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ListView</span><br><span class="line">      android:<span class="variable">layout_width=</span><span class="string">"wrap_content"</span></span><br><span class="line">      android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span></span><br><span class="line">      android:<span class="variable">id=</span><span class="string">"@+id/listView"</span></span><br><span class="line">      android:<span class="variable">divider=</span><span class="string">"@android:color/darker_gray"</span></span><br><span class="line">      android:<span class="variable">dividerHeight=</span><span class="string">"1dp"</span></span><br><span class="line">      android:<span class="variable">scrollbars=</span><span class="string">"none"</span> </span><br><span class="line">      android:<span class="variable">listSelector=</span><span class="string">"@android:color/transparent"</span>/&gt;</span><br><span class="line">&lt;ImageView</span><br><span class="line">      android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">      android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span></span><br><span class="line">      android:<span class="variable">id=</span><span class="string">"@+id/empty_listview"</span></span><br><span class="line">      android:<span class="variable">src=</span><span class="string">"@mipmap/ic_launcher"</span>/&gt;</span><br></pre></td></tr></table></figure></p>
<p>通常可以添加一个默认的图片，在ListView Item 为空的时候显示，<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mListView= (ListView) findViewById(R.<span class="property">id</span>.listView);</span><br><span class="line">mListView.setEmptyView(findViewById(R.<span class="property">id</span>.empty_listview));</span><br></pre></td></tr></table></figure></p>
<h2 id="ListView动态修改">ListView动态修改</h2><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mData.add(<span class="string">"iMac"</span>);</span><br><span class="line">mAdapter.notifyDataSetChanged<span class="literal">()</span>;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>ListView是android应用开发中使用频率非常高的一个系统组件，几乎所有的应用中都要用到，尽管现在RecycleView有想要替代ListView的意味，但ListView仍然很重要。所以ListView值得我们深入的研究。下面就记录下ListView的使用。</p]]>
    </summary>
    
      <category term="android" scheme="http://blog.magicer.xyz/tags/android/"/>
    
      <category term="listview" scheme="http://blog.magicer.xyz/tags/listview/"/>
    
      <category term="Android" scheme="http://blog.magicer.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio 快捷键的使用]]></title>
    <link href="http://blog.magicer.xyz/2015/10/android-studio-keymap/"/>
    <id>http://blog.magicer.xyz/2015/10/android-studio-keymap/</id>
    <published>2015-10-25T06:13:17.000Z</published>
    <updated>2015-10-26T10:42:56.932Z</updated>
    <content type="html"><![CDATA[<p>Android Studio 是Google官方的安卓开发IDE ，提供了集成的Android开发工具用于开发和调试，基于Gradle的构建支持。</p>
<p>用好Android Studio 快捷键是必须要掌握的，下面介绍一下AS 的常用快捷键：</p>
<h2 id="常用：">常用：</h2><p><code>Ctrl+Alt +L</code>:  格式化代码（在ubuntu上可能冲突，锁屏快捷键，修改系统的快捷键即可）<br><code>Alt+Insert</code>: 生成代码（get set方法，构造函数等）<br><code>Ctrl+Y</code>: 删除行<br><code>Ctrl+O</code> 显示父类所有的方法<br><code>Ctrl+J</code>：   自动代码<br><code>Ctrl+E</code>  打开最近的文件<br><code>Ctrl+Shift+Backspace</code> 跳转到上次编辑的地方<br><code>Ctrl+F12</code> 显示当前文件的结构<br><code>Alt+Q</code>  可以看到当前方法的声明<br><code>Ctrl+P</code>  显示参数信息<br><code>Ctrl+Shift+Insert</code> 可以选择剪贴板内容并插入</p>
<h2 id="快捷键：">快捷键：</h2><p><code>Alt+回车</code>:   导入包，自动修正<br><code>Ctrl+N</code>:   查找类<br><code>Ctrl+Shift+N</code>: 查找文件<br><code>Ctrl+Alt+L</code>：   格式化代码<br><code>Ctrl+Alt+O</code>:   优化导入的包和类<br><code>Alt+Insert</code>: 生成代码（get set方法，构造函数等）<br><code>Ctrl+E</code>或<code>Alt+Space+C</code>:  最近更改的代码<br><code>Ctrl+Y</code>: 删除行<br><code>Ctrl+F</code>:   查找文本<br><code>Ctrl+R</code>：  替换文本<br><code>Ctrl+D</code>: 集合了复制粘贴<br><code>Ctrl+space</code> 输入代码时按次组合键会列出与之相匹配的类，方法名，成员变量（支持XML）<br><code>Ctrl+向上箭头或向下箭头</code>： 在有自动匹配下拉列表时，次快捷键会自动关闭下拉列表 光标移动到下一行<br><code>Ctrl+F</code> 搜索<br><code>Ctrl+Shift+A</code>：快速查找android studio中的菜单<br><code>Ctrl+B</code>  直接跳转到类，方法，成员变量定义的地方 （Ctrl+鼠标左键）<br><code>Ctrl+O</code> 显示父类所有的方法 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android Studio 是Google官方的安卓开发IDE ，提供了集成的Android开发工具用于开发和调试，基于Gradle的构建支持。</p>
<p>用好Android Studio 快捷键是必须要掌握的，下面介绍一下AS 的常用快捷键：</p>
<h2 id=]]>
    </summary>
    
      <category term="android" scheme="http://blog.magicer.xyz/tags/android/"/>
    
      <category term="android studio" scheme="http://blog.magicer.xyz/tags/android-studio/"/>
    
      <category term="软件使用" scheme="http://blog.magicer.xyz/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[music-play-list]]></title>
    <link href="http://blog.magicer.xyz/2015/10/music-play-list/"/>
    <id>http://blog.magicer.xyz/2015/10/music-play-list/</id>
    <published>2015-10-23T11:04:15.000Z</published>
    <updated>2015-10-26T10:43:17.924Z</updated>
    <content type="html"><![CDATA[<h2 id="Someone_Like_You">Someone Like You</h2> <audio src="/music/Someone Like You.mp3" controls="controls"><br> 不支持mp3<br> </audio>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Someone_Like_You">Someone Like You</h2> <audio src="/music/Someone Like You.mp3" controls="controls"><br> 不支持mp3<br> </audio>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio使用中的问题]]></title>
    <link href="http://blog.magicer.xyz/2015/10/android-studio-basic/"/>
    <id>http://blog.magicer.xyz/2015/10/android-studio-basic/</id>
    <published>2015-10-15T10:37:15.000Z</published>
    <updated>2015-10-25T13:08:08.232Z</updated>
    <content type="html"><![CDATA[<p>Android Studio 是Google官方的安卓开发IDE，基于Gradle构建app。为了用上as，博主专门加了块内存条（4G）,<br>话说4G的内存真的不够用，开ide在加上虚拟器就够呛了，不过加了内存条后Win有时候会进不去，可能是不兼容吧，嫌麻烦就没在换，反正ubuntu上可以用，这都是题外话了。</p>
<h2 id="添加主题">添加主题</h2><p> as上的配色方案真的是不忍直视，在这里导入第三方的配色方案；<br> 第三方主题:<a href="http://www.ideacolorthemes.org/home/" target="_blank" rel="external">http://www.ideacolorthemes.org/home/</a></p>
<p>下载后：File-&gt;import seetting-&gt;下载主题的路径；</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android Studio 是Google官方的安卓开发IDE，基于Gradle构建app。为了用上as，博主专门加了块内存条（4G）,<br>话说4G的内存真的不够用，开ide在加上虚拟器就够呛了，不过加了内存条后Win有时候会进不去，可能是不兼容吧，嫌麻烦就没在换，反]]>
    </summary>
    
      <category term="android" scheme="http://blog.magicer.xyz/tags/android/"/>
    
      <category term="android studio" scheme="http://blog.magicer.xyz/tags/android-studio/"/>
    
      <category term="软件使用" scheme="http://blog.magicer.xyz/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo博客主题NexT使用自定义的CSS样式]]></title>
    <link href="http://blog.magicer.xyz/2015/10/hexo-custom-style/"/>
    <id>http://blog.magicer.xyz/2015/10/hexo-custom-style/</id>
    <published>2015-10-12T06:21:35.000Z</published>
    <updated>2015-10-12T11:35:20.655Z</updated>
    <content type="html"><![CDATA[<p>  今天，创建自己的about页面的时候，像使用自定义的css样式，就像这是不是NexT可以使用自定义的CSS样式，片尝试了一下，还是可以的，因为markdown支持html标签，使用自定义的CSS样式还是不错的。下面总结一下具体的使用过程：</p>
<h2 id="添加样式支持">添加样式支持</h2><p>  为了不吧原先的像是文件搞得太乱，这里，添加子集的样式文件。<br>  首先，在样式文件的<code>source</code>文件夹下找到<code>css</code>文件夹，打开<code>main.styl</code>文件，在最后添加：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//My Layer</span></span><br><span class="line"><span class="comment">//--------------------------------------------------</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"_my/mycss"</span>;</span><br></pre></td></tr></table></figure>
<h2 id="新建自定义样式">新建自定义样式</h2><p>找到样式文件夹<code>css</code> 新建<code>_my</code>文件夹，在其中新建<code>mycss.styl</code>文件，之后就可以按照stylus的格式自定义样式了。</p>
<h2 id="例子">例子</h2><p>例如：我想在文章中添加个自定义样式的按钮，怎么做呢？？？</p>
<p>打开新建的<code>mycss.styl</code>文件，在其中添加样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.myButton</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"><span class="hexcolor">#0f94bd</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-moz-border-radius</span>:<span class="value"><span class="number">15px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-border-radius</span>:<span class="value"><span class="number">15px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"><span class="number">15px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value">inline-block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">cursor</span>:<span class="value">pointer</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#ffffff</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">font-family</span>:<span class="value">Arial</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">17px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">11px</span> <span class="number">27px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">text-decoration</span>:<span class="value">none</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">text-shadow</span>:<span class="value"><span class="number">0px</span> <span class="number">1px</span> <span class="number">0px</span> <span class="hexcolor">#2f6627</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="rule"><span class="attribute">.myButton</span>:<span class="value">hover &#123;</span><br><span class="line">    background-color:<span class="hexcolor">#5cbf2a</span></span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="rule"><span class="attribute">.myButton</span>:<span class="value">active &#123;</span><br><span class="line">    position:relative</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">1px</span></span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(ps:这里直接使用的css的格式写的，因为css的代码在网上很好找到，而stylus预处理器的就不那么容易找到了，stylus一样支持css格式，所以在这里直接使用了css文件，没有写成stylus语法。其实让我写我也不会，哈哈！)<br>  引用：在想要引用的时候添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"myButton"</span>&gt;</span>MyButton<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>样式如下：<br><a href="#" class="myButton">MyButton</a><br>效果已经出来了，怎么样？？是不是瞬间高大上。。有想要使用的样式，自行百度，找到后粘贴即可使用。</p>
<h2 id="推荐">推荐</h2><p>推荐一个css button样式的生成网站：<a href="http://www.bestcssbuttongenerator.com/" target="_blank" rel="external">http://www.bestcssbuttongenerator.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>  今天，创建自己的about页面的时候，像使用自定义的css样式，就像这是不是NexT可以使用自定义的CSS样式，片尝试了一下，还是可以的，因为markdown支持html标签，使用自定义的CSS样式还是不错的。下面总结一下具体的使用过程：</p>
<h2 id="添加样]]>
    </summary>
    
      <category term="NexT" scheme="http://blog.magicer.xyz/tags/NexT/"/>
    
      <category term="hexo" scheme="http://blog.magicer.xyz/tags/hexo/"/>
    
      <category term="博客搭建" scheme="http://blog.magicer.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo博客转移 从github到gitcafe]]></title>
    <link href="http://blog.magicer.xyz/2015/10/Hexo-github-gitcafe/"/>
    <id>http://blog.magicer.xyz/2015/10/Hexo-github-gitcafe/</id>
    <published>2015-10-11T05:27:08.000Z</published>
    <updated>2015-10-12T06:47:28.269Z</updated>
    <content type="html"><![CDATA[<p>  <img src="/image/HEXO.gif" alt="HEXO" class="full-image"><br>  用Hexo和github搭建博客很长时间了，考虑到自己的博客可能主要的用户都会是国内的，所以想吧博客从github上转移到gitcafe上来，一开始打算转移到coding.net上，不过Coding不能自定义域名所以就没有用Coding，不过访问 <a href="http://magicer.coding.io" target="_blank" rel="external">magicer.coding.io</a> 也能访问我的博客，因为代码也同步到Coding上来了。<br>   下面就记录一下自己博客转移的过程。<a id="more"></a></p>
<h2 id="gitcafe的使用">gitcafe的使用</h2><p>   首先注册gitcafe账户创建项目，此处我创建的项目名跟我的用户名一样。<br>   随后，在自己的家目录的<code>.ssh/</code>目录下找到<code>id_rsa.pub</code>文件，打开后复制内容粘贴到gitcafe的 <code>SSH公钥管理</code>中新建SSH公钥（如果配置过github会存在<code>.ssh/</code>文件夹，如果没有的话，需要配置，配置方法见：<a href="http://0.0.0.0:4001/2015/04/30/github-config/" target="_blank" rel="external">配置github</a>，测试的时候只需要将github换成gitcafe即可。）</p>
<!-- HTML -->
<p>   <img src="/image_code/gitcafe-ssh-setting.png" alt="SSH设置"></p>
<h2 id="托管代码到gitcafe">托管代码到gitcafe</h2><p>  在这里说明，我安装了git插件，安装方法：</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>在<code>_config.yml.</code>中配置（可以同时托管代码在github和gitcafe上，）</p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br><span class="line">  <span class="literal">message</span>: [<span class="literal">message</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者:</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  <span class="literal">message</span>: [<span class="literal">message</span>]</span><br><span class="line">  repo: </span><br><span class="line">    github: &lt;repository url&gt;,[branch]</span><br><span class="line">    gitcafe: &lt;repository url&gt;,[branch]</span><br></pre></td></tr></table></figure>
<h2 id="pages服务">pages服务</h2><p>  托管上代码之后应该分支应该会直接是<code>gitcafe-pages</code>分支，之后<code>项目设置</code>自定义域名<br>  <img src="/image_code/Gitcafe-pages-setting.png" alt="gitcafe-pages"></p>
<p>  修改域名的解析搬移即可完成。<br>  新建CNAME解析，解析到<code>gitcafe.io</code>,现在gitcafe已经不支持A记录解析方式。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>  <img src="/image/HEXO.gif" alt="HEXO" class="full-image"><br>  用Hexo和github搭建博客很长时间了，考虑到自己的博客可能主要的用户都会是国内的，所以想吧博客从github上转移到gitcafe上来，一开始打算转移到coding.net上，不过Coding不能自定义域名所以就没有用Coding，不过访问 <a href="http://magicer.coding.io">magicer.coding.io</a> 也能访问我的博客，因为代码也同步到Coding上来了。<br>   下面就记录一下自己博客转移的过程。]]>
    
    </summary>
    
      <category term="gitcafe" scheme="http://blog.magicer.xyz/tags/gitcafe/"/>
    
      <category term="github" scheme="http://blog.magicer.xyz/tags/github/"/>
    
      <category term="hexo" scheme="http://blog.magicer.xyz/tags/hexo/"/>
    
      <category term="博客搭建" scheme="http://blog.magicer.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo博客主题换成了NexT]]></title>
    <link href="http://blog.magicer.xyz/2015/08/blog-theme-changed/"/>
    <id>http://blog.magicer.xyz/2015/08/blog-theme-changed/</id>
    <published>2015-08-20T12:31:37.000Z</published>
    <updated>2015-10-16T17:20:51.318Z</updated>
    <content type="html"><![CDATA[<p><img src="https://gitcafe.com/Magicer/Magicer/raw/gitcafe-pages/image/756094.jpg" alt="NexT" class="full-image"><br>博客主题由原先的Jacman换成了现在高大上的NexT主题，Jacman主题显得过于花哨，而NexT却显得高大上一点。比较了一下，还是更喜欢NexT的感觉。下面就简单说明一下过程。<br>详细的下载安装及设置教程在这里：<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a><br> 效果图就不用看了吧，毕竟效果已经摆出来了，如果你也喜欢，那就动手吧。</p>
<h2 id="自定义NexT">自定义NexT</h2><p> 1、添加Title 。<br>  NexT主题的Title和网站主页上的左上角的LOGO字体是一样的，在这里我想设置成不一样的怎么办呢？其实很简单，只需要在配置文件中添加一个<code>name</code>（注意：这个配置文件的位置是HEXO的配置文件不是主题的配置文件。<br>  ps：我觉得还是用logo比较好，由于子集以前就是用的name，在这里就不更改了）<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">title</span>: <span class="string">Magicer|张同爽的个人博客</span></span><br><span class="line"><span class="attribute">name</span>: <span class="string">Magicer</span></span><br></pre></td></tr></table></figure></p>
<p>然后，在NexT主题文件夹中找到<code>layout</code>文件夹下的<code>_partials</code>文件夹下的<code>header.swig</code>文件 找到：</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"site-title"</span>&gt;</span></span><span class="expression">&#123;&#123; <span class="variable">config.title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>将<code>config.title</code>修改为<code>config.name</code>即可<br>2、使页面地步链接到about界面</p>
<p>找到：主题<code>layout</code>文件夹下的<code>_partials</code>文件夹下的 <code>footer.swig</code>文件：<br>找到：</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"author"</span> <span class="attribute">itemprop</span>=<span class="value">"copyrightHolder"</span>&gt;</span></span><span class="expression">&#123;&#123; <span class="variable">config.author</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>将其改为</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"theme-link"</span> <span class="attribute">href</span>=<span class="value">"/about/index.html"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"author"</span> <span class="attribute">itemprop</span>=<span class="value">"copyrightHolder"</span>&gt;</span></span><span class="expression">&#123;&#123; <span class="variable">config.author</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>当然也可以连接到一个网址，比如我的设置就是这样的：</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"theme-link"</span> <span class="attribute">href</span>=<span class="value">"http://magicer.xyz"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"author"</span> <span class="attribute">itemprop</span>=<span class="value">"copyrightHolder"</span>&gt;</span></span><span class="expression">&#123;&#123; <span class="variable">config.author</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://gitcafe.com/Magicer/Magicer/raw/gitcafe-pages/image/756094.jpg" alt="NexT" class="full-image"><br>博客主题由原先的Jacman换成了现在高大]]>
    </summary>
    
      <category term="hexo" scheme="http://blog.magicer.xyz/tags/hexo/"/>
    
      <category term="博客搭建" scheme="http://blog.magicer.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决vim使用过程中与遇到问题]]></title>
    <link href="http://blog.magicer.xyz/2015/08/vim-notes/"/>
    <id>http://blog.magicer.xyz/2015/08/vim-notes/</id>
    <published>2015-08-14T04:02:47.000Z</published>
    <updated>2015-10-14T04:12:44.372Z</updated>
    <content type="html"><![CDATA[<h2 id="vim中无法输入中文或输入中文乱码">vim中无法输入中文或输入中文乱码</h2><p>  打开终端输入：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> ～/.vimrc</span><br><span class="line">##也可以 <span class="keyword">vim</span> /etc/<span class="keyword">vim</span>/vimrc</span><br></pre></td></tr></table></figure></p>
<p>在其中输入以下代码：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> encoding=UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">set</span> langmenu=zh_CN.UTF-<span class="number">8</span></span><br><span class="line">language <span class="keyword">message</span> zh_CN.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">set</span> fileencodings=ucs-bom,utf-<span class="number">8</span>,cp936,gb18030,big5,euc-jp,euc-kr,latin1</span><br><span class="line"><span class="keyword">set</span> fileencoding=utf-<span class="number">8</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="vim中无法输入中文或输入中文乱码">vim中无法输入中文或输入中文乱码</h2><p>  打开终端输入：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span clas]]>
    </summary>
    
      <category term="vim" scheme="http://blog.magicer.xyz/tags/vim/"/>
    
      <category term="软件使用" scheme="http://blog.magicer.xyz/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java初学常用代码知识]]></title>
    <link href="http://blog.magicer.xyz/2015/08/java-code-fragment/"/>
    <id>http://blog.magicer.xyz/2015/08/java-code-fragment/</id>
    <published>2015-08-01T12:34:31.000Z</published>
    <updated>2015-10-10T16:27:01.574Z</updated>
    <content type="html"><![CDATA[<h2 id="File类">File类</h2><p>File类的构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String pathname)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(File parent,String child)</span></span>;</span><br></pre></td></tr></table></figure>
<p>使用File操作文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">creatNewFile</span><span class="params">()</span> <span class="keyword">throws</span> IOExcetion <span class="comment">//创建文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span>                         <span class="comment">//删除文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span>                         <span class="comment">//判断给定的路径是否存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String separator            <span class="comment">//  “/” 注意：常量，但是未大写</span></span><br><span class="line"><span class="keyword">public</span> File <span class="title">getParentFile</span><span class="params">()</span>                     <span class="comment">//找到一个指定路径的父路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdirs</span><span class="params">()</span>                         <span class="comment">//创建制定目录</span></span><br><span class="line"><span class="comment">/*其他方法*/</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span>         <span class="comment">//取得文件的名字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span>    <span class="comment">//判断给定的路径是否是文件夹</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span>         <span class="comment">//判断给定的路径是否是文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHidden</span><span class="params">()</span>       <span class="comment">//判断是否隐藏</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lastModified</span><span class="params">()</span>      <span class="comment">//文件最后一次修改日期</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">length</span><span class="params">()</span>            <span class="comment">//取得文件大小，以字节为单位返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">renameTo</span><span class="params">(File dest)</span>  <span class="comment">//为文件重命名</span></span><br><span class="line"><span class="keyword">public</span> File[] <span class="title">listFiles</span><span class="params">()</span>   <span class="comment">//将目录中所有的文件以File对象数组的方式返回</span></span></span><br></pre></td></tr></table></figure></p>
<p>简单示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  判断制定文件是否存在，若存在则删除，不存在则创建*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(File.separator + <span class="string">"home"</span> + File.separator</span><br><span class="line">                + <span class="string">"magicer"</span> + File.separator + <span class="string">"code"</span> + File.separator</span><br><span class="line">                + <span class="string">"Demo.txt"</span>);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            file.delete();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="File类">File类</h2><p>File类的构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br>]]>
    </summary>
    
      <category term="java" scheme="http://blog.magicer.xyz/tags/java/"/>
    
      <category term="Java" scheme="http://blog.magicer.xyz/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[泛型的简单使用]]></title>
    <link href="http://blog.magicer.xyz/2015/08/generic-simple/"/>
    <id>http://blog.magicer.xyz/2015/08/generic-simple/</id>
    <published>2015-08-01T11:55:15.000Z</published>
    <updated>2015-10-10T16:27:54.026Z</updated>
    <content type="html"><![CDATA[<p>java泛型的简单使用。<br>泛型的定义：泛型是JDK 1.5的一项新特性，它的本质是参数化类型（Parameterized Type）的应用，也就是说所操作的数据类型被指定为一个参数，在用到的时候在指定具体的类型。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口和泛型方法<a id="more"></a></p>
<h2 id="java泛型的基本使用">java泛型的基本使用</h2><p>加上了通配符”？“。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//泛型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> &lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T info;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(T info)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info=info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Message&lt;String&gt; msg=<span class="keyword">new</span> Message&lt;String&gt;();</span><br><span class="line">        msg.setInfo(<span class="string">"Hello World!!!!"</span>);</span><br><span class="line">        print(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Message&lt;?&gt; temp)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*当泛型作为参数的时候，因为不知道要传递的是什么类型的之，所以方法在编写的时候具有局限性</span><br><span class="line">        可以加上通配符”？“，来让参数通用，不管是什么类型的参数都可以作为参数传递了*/</span></span><br><span class="line">        System.out.println(temp.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本程序注释仅为个人观点，如有不符，还望指正。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>java泛型的简单使用。<br>泛型的定义：泛型是JDK 1.5的一项新特性，它的本质是参数化类型（Parameterized Type）的应用，也就是说所操作的数据类型被指定为一个参数，在用到的时候在指定具体的类型。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口和泛型方法]]>
    
    </summary>
    
      <category term="java泛型" scheme="http://blog.magicer.xyz/tags/java%E6%B3%9B%E5%9E%8B/"/>
    
      <category term="Java" scheme="http://blog.magicer.xyz/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[整整两个月了]]></title>
    <link href="http://blog.magicer.xyz/2015/07/total-two-month/"/>
    <id>http://blog.magicer.xyz/2015/07/total-two-month/</id>
    <published>2015-07-09T14:06:59.000Z</published>
    <updated>2015-10-10T16:14:46.982Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>
<p><a href="http://blog.csdn.net/Captain_Magicer" target="_blank" rel="external">CSDN博客连接</a></p>
<p><hr><br> 已经整整两个月没有写博客了，尽管子集的博客质量并不高，但是坚持下去还是会好起来的，毕竟限于自己的水平较低，水平低是正常的。现在的CSDN也可以用markdown写博客了，想着跟子集搭建的博客一块更新，也不是难事。毕竟自己的个人博客上的方可基本上没有，转移到CSDN上或与会好点。</p>
<p><hr><br> 在这两个月里，经同学介绍进了西门子电子开关插座公司做实习生，一开始同学说是跟编程有关，奔着试一试的态度就去了，不过到了面试过后发现，跟他描述的全然不同，不过，一个星期在那儿干一两天也基本上够我这一周的零花，这点还是不错的，假期就不回去了，在学校进修。（嘻嘻，说的真好听。） 在SWAS主要是负责公司的员工申请的各种服务，或为其申请服务。不过公司不能连网，这点让我很是头疼，作为一个想成为程序猿的我来说，这点真的很难忍受。安装各种软件都有限制。毕竟跟编程不沾边，也就看来了。整点外快嘛。不过在这里的这段时间，让我学到了不少东西，在学校里是学不到的。就这样。这两个月了。博客都荒废了。想着现在该重新拾起了。</p>
<p><hr><br>自从电脑上的游戏安装上了之后，就没有消停过，看来真的应该卸载了。不然电脑都碰不到了。哎。</p>
]]></content>
    <summary type="html">
    <![CDATA[<a id="more"></a>
<p><a href="http://blog.csdn.net/Captain_Magicer" target="_blank" rel="external">CSDN博客连接</a></p>
<p><hr><br> 已经整整两个月没有写博客]]>
    </summary>
    
      <category term="生活轶事" scheme="http://blog.magicer.xyz/categories/%E7%94%9F%E6%B4%BB%E8%BD%B6%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[（转）Android开发效率—Eclipse快捷键]]></title>
    <link href="http://blog.magicer.xyz/2015/05/android-eclipse-hot-key/"/>
    <id>http://blog.magicer.xyz/2015/05/android-eclipse-hot-key/</id>
    <published>2015-05-09T12:26:50.000Z</published>
    <updated>2015-10-10T16:12:38.894Z</updated>
    <content type="html"><![CDATA[<p> 很多过去使用Visual Studio开发软件的网友可能不熟悉Java开发环境，今天Android开发网告诉大家一些提高Android开发效率的Eclipse快捷键，可以有效率的帮助我们管理代码和减少键盘输入。Eclipse相对于Visual Studio而言使用Java开发，响应速度和稳定性上有很大的欠缺，这些我们目前只能容忍下。<a id="more"></a></p>
 <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">转载自<span class="string">http:</span><span class="comment">//www.cnblogs.com/lm3515/archive/2011/03/16/1985671.html</span></span><br></pre></td></tr></table></figure>
<p>　　比较常用的Android123整理如下:</p>
<p>　　自动补充import Package Ctrl+Shift+O，这里O代表Organize Import的意思。</p>
<p>　　格式化代码缩进 Ctrl+Shift+F，这里面我们可以记忆F为Format格式化的意思。</p>
<p>　　快速查找代码 Ctrl+F，撤消到上一次Ctrl+Z</p>
<p>　　智能内容感知 Alt+/ ，该快捷键可以方便的匹配我们使用的类信息，/ 在键盘上和?是同一个按键。</p>
<p>　　调用运行Run As对话框可以使用Ctrl+F11，如果为Debug调试方式可以直接使用F11。</p>
<p>　　生成一个板块注释Alt+Shift+J ，单行注释为Ctrl+/键</p>
<p>用Eclipse开发，不知道快捷键可不行啊。<br>熟悉快捷键可以大大的提高效率：</p>
<h2 id="常用">常用</h2><p>Ctrl+M 当前窗口最大化<br>Ctrl+F7 视窗口切换<br>Ctrl+F8 模式切换<br>Ctrl+F6 编辑窗口切换(手指张得太大不雅观啊)<br>Ctrl+E 编辑窗口切换(这个比较文雅点??)<br>Alt+← 前一个编辑的页面<br>Alt+→ 下一个编辑的页面<br>Ctrl+Alt+↓ 复制(增加)当前行到下一行<br>Ctrl+Alt+↑ 复制(增加)当前行到上一行<br>Alt+↓ 当前行和下面一行交互位置(用不着剪切了)<br>Alt+↑ 当前行和上面一行交互位置<br>Ctrl+D 删除当前行<br>Alt+Enter 显示当前选择文件的属性<br>Shift+Enter 在当前行插入空行(下一行)<br>Shift+Ctrl+Enter 在当前行插入空行(上一行)<br>Ctrl+Q 定位到最后编辑的地方<br>Ctrl+L 定位在具体某行<br>Ctrl+/ 注释当前行(可多行),再按则取消注释<br>Ctrl+Shift+R 找文件<br>Ctrl+Shift+T 找类<br>Ctrl+K 选中的Word快速定位到下一个<br>Ctrl+Shift+K 选中的Word快速定位到上一个<br>Ctrl+Shift+U 选中后列出查询到的结果<br>Ctrl+/(小键盘) 折叠当前类中的所有代码<br>Ctrl+×(小键盘) 展开当前类中的所有代码<br>Ctrl+Shift+P 定位到对于的匹配符(如{},())<br>CTRL+SHIFT+X 切换字符的大小写(大写)<br>CTRL+SHIFT+Y 切换字符的大小写(小写)<br>Ctrl+1 当某行出错时或警告时,跳出帮助<br>Ctrl+Shift+F 格式排版<br>Alt+Shift+R 重命名 (改量和类名时很方便)<br>Alt+Shift+C 修改函数结<br>Alt+Shift+M 重构方法 (选中要重构方法,再生成个新方法)<br>Alt+Shift+Z 重构恢复<br>Ctrl+W 关闭当前窗口<br>Ctrl+Shift+F4 关闭所有打开的窗口<br>Ctrl+Shift+O ： import相关类，同时若已经import的类，没有被用到，就删除。<br>sysout-&gt;Ctrl+Space-&gt;System.out.println()<br>Window-&gt;reference-&gt;Workbench-&gt;Keys 有兴趣的可以自定义热键</p>
<h2 id="编辑">编辑</h2><p>作用域 功能 快捷键<br>全局 查找并替换 Ctrl+F<br>文本编辑器 查找上一个 Ctrl+Shift+K<br>文本编辑器 查找下一个 Ctrl+K<br>全局 撤销 Ctrl+Z<br>全局 复制 Ctrl+C<br>全局 恢复上一个选择 Alt+Shift+↓<br>全局 剪切 Ctrl+X<br>全局 快速修正 Ctrl1+1<br>全局 内容辅助 Alt+/<br>全局 全部选中 Ctrl+A<br>全局 删除 Delete<br>全局 上下文信息 Alt+？<br>Alt+Shift+?<br>Ctrl+Shift+Space<br>Java编辑器 显示工具提示描述 F2<br>Java编辑器 选择封装元素 Alt+Shift+↑<br>Java编辑器 选择上一个元素 Alt+Shift+←<br>Java编辑器 选择下一个元素 Alt+Shift+→<br>文本编辑器 增量查找 Ctrl+J<br>文本编辑器 增量逆向查找 Ctrl+Shift+J<br>全局 粘贴 Ctrl+V<br>全局 重做 Ctrl+Y</p>
<h2 id="查看">查看</h2><p>作用域 功能 快捷键<br>全局 放大 Ctrl+=<br>全局 缩小 Ctrl+-</p>
<h2 id="窗口">窗口</h2><p>作用域 功能 快捷键<br>全局 激活编辑器 F12<br>全局 切换编辑器 Ctrl+Shift+W<br>全局 上一个编辑器 Ctrl+Shift+F6<br>全局 上一个视图 Ctrl+Shift+F7<br>全局 上一个透视图 Ctrl+Shift+F8<br>全局 下一个编辑器 Ctrl+F6<br>全局 下一个视图 Ctrl+F7<br>全局 下一个透视图 Ctrl+F8<br>文本编辑器 显示标尺上下文菜单 Ctrl+W<br>全局 显示视图菜单 Ctrl+F10<br>全局 显示系统菜单 Alt+-</p>
<h2 id="导航">导航</h2><p>作用域 功能 快捷键<br>Java编辑器 打开结构 Ctrl+F3<br>全局 打开类型 Ctrl+Shift+T<br>全局 打开类型层次结构 F4<br>全局 打开声明 F3<br>全局 打开外部javadoc Shift+F2<br>全局 打开资源 Ctrl+Shift+R<br>全局 后退历史记录 Alt+←<br>全局 前进历史记录 Alt+→<br>全局 上一个 Ctrl+,<br>全局 下一个 Ctrl+.<br>Java编辑器 显示大纲 Ctrl+O<br>全局 在层次结构中打开类型 Ctrl+Shift+H<br>全局 转至匹配的括号 Ctrl+Shift+P<br>全局 转至上一个编辑位置 Ctrl+Q<br>Java编辑器 转至上一个成员 Ctrl+Shift+↑<br>Java编辑器 转至下一个成员 Ctrl+Shift+↓<br>文本编辑器 转至行 Ctrl+L</p>
<h2 id="搜索">搜索</h2><p>作用域 功能 快捷键<br>全局 出现在文件中 Ctrl+Shift+U<br>全局 打开搜索对话框 Ctrl+H<br>全局 工作区中的声明 Ctrl+G<br>全局 工作区中的引用 Ctrl+Shift+G</p>
<h2 id="文本编辑">文本编辑</h2><p>作用域 功能 快捷键<br>文本编辑器 改写切换 Insert<br>文本编辑器 上滚行 Ctrl+↑<br>文本编辑器 下滚行 Ctrl+↓</p>
<h2 id="文件">文件</h2><p>作用域 功能 快捷键<br>全局 保存 Ctrl+X<br>Ctrl+S<br>全局 打印 Ctrl+P<br>全局 关闭 Ctrl+F4<br>全局 全部保存 Ctrl+Shift+S<br>全局 全部关闭 Ctrl+Shift+F4<br>全局 属性 Alt+Enter<br>全局 新建 Ctrl+N</p>
<h2 id="项目">项目</h2><p>作用域 功能 快捷键<br>全局 全部构建 Ctrl+B</p>
<h2 id="源代码">源代码</h2><p>作用域 功能 快捷键<br>Java编辑器 格式化 Ctrl+Shift+F<br>Java编辑器 取消注释 Ctrl+\<br>Java编辑器 注释 Ctrl+/<br>Java编辑器 添加导入 Ctrl+Shift+M<br>Java编辑器 组织导入 Ctrl+Shift+O<br>Java编辑器 使用try/catch块来包围 未设置，太常用了，所以在这里列出,建议自己设置。<br>也可以使用Ctrl+1自动修正。</p>
<h2 id="运行">运行</h2><p>作用域 功能 快捷键<br>全局 单步返回 F7<br>全局 单步跳过 F6<br>全局 单步跳入 F5<br>全局 单步跳入选择 Ctrl+F5<br>全局 调试上次启动 F11<br>全局 继续 F8<br>全局 使用过滤器单步执行 Shift+F5<br>全局 添加/去除断点 Ctrl+Shift+B<br>全局 显示 Ctrl+D<br>全局 运行上次启动 Ctrl+F11<br>全局 运行至行 Ctrl+R<br>全局 执行 Ctrl+U</p>
<h2 id="重构">重构</h2><p>作用域 功能 快捷键<br>全局 撤销重构 Alt+Shift+Z<br>全局 抽取方法 Alt+Shift+M<br>全局 抽取局部变量 Alt+Shift+L<br>全局 内联 Alt+Shift+I<br>全局 移动 Alt+Shift+V<br>全局 重命名 Alt+Shift+R<br>全局 重做 Alt+Shift+Y</p>
]]></content>
    <summary type="html">
    <![CDATA[<p> 很多过去使用Visual Studio开发软件的网友可能不熟悉Java开发环境，今天Android开发网告诉大家一些提高Android开发效率的Eclipse快捷键，可以有效率的帮助我们管理代码和减少键盘输入。Eclipse相对于Visual Studio而言使用Java开发，响应速度和稳定性上有很大的欠缺，这些我们目前只能容忍下。]]>
    
    </summary>
    
      <category term="android" scheme="http://blog.magicer.xyz/tags/android/"/>
    
      <category term="eclipse" scheme="http://blog.magicer.xyz/tags/eclipse/"/>
    
      <category term="软件使用" scheme="http://blog.magicer.xyz/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[eclipse-android自动提示代码]]></title>
    <link href="http://blog.magicer.xyz/2015/05/eclipse-android-auto/"/>
    <id>http://blog.magicer.xyz/2015/05/eclipse-android-auto/</id>
    <published>2015-05-04T12:31:08.000Z</published>
    <updated>2015-10-10T15:59:39.470Z</updated>
    <content type="html"><![CDATA[<h2 id="（一）设置_java_文件的代码提示功能">（一）设置 java 文件的代码提示功能</h2><p>打 开 Eclipse 依次选择 Window &gt; Preferences &gt; Java &gt; Editor - Content Assist &gt; Auto activation triggers for Java ，设置框中默认是一个点，<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">.abcdefghijklmnopqrstuvwxyz(,</span></span><br></pre></td></tr></table></figure></p>
<h2 id="（二）设置_xml_文件的代码提示功能">（二）设置 xml 文件的代码提示功能</h2><p>打 开 Eclipse 依次选择 Window &gt; Preferences &gt; Xml &gt; Xml Files &gt; Editor &gt; Content Assist &gt; Auto activation &gt; Prompt when these characters are inserted ，设置框中默认是 &lt;=: ，</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;=:.abcdefghijklmnopqrstuvwxyz(,</span><br></pre></td></tr></table></figure>
<p>把delay该小一点。默认为500</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="（一）设置_java_文件的代码提示功能">（一）设置 java 文件的代码提示功能</h2><p>打 开 Eclipse 依次选择 Window &gt; Preferences &gt; Java &gt; Editor - Content Assist &g]]>
    </summary>
    
      <category term="android" scheme="http://blog.magicer.xyz/tags/android/"/>
    
      <category term="软件使用" scheme="http://blog.magicer.xyz/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git tag 、branch的使用]]></title>
    <link href="http://blog.magicer.xyz/2015/05/git-tag-branch/"/>
    <id>http://blog.magicer.xyz/2015/05/git-tag-branch/</id>
    <published>2015-05-04T04:21:55.000Z</published>
    <updated>2015-10-13T17:35:02.906Z</updated>
    <content type="html"><![CDATA[<p> Git是一个免费的、分布式的版本控制工具，或是一个强调速度快的源代码管理工具。Git诞生于2005年，最初是Linus Torvalds开发出来用于管理Linux内核的开发。<br><a id="more"></a></p>
<h2 id="（一）git_tag">（一）git tag</h2><h3 id="列出git中现有标签">列出git中现有标签</h3><p>   要想列出git中现有的所有标签，输入’git tag’命令运行即可：<br>  <figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">tag</span></span><br><span class="line">v0<span class="built_in">.1</span></span><br><span class="line">v1<span class="built_in">.3</span></span><br></pre></td></tr></table></figure></p>
   <figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin <span class="keyword">tag</span> <span class="variable">&lt;tagname&gt;</span>   	<span class="comment">##获取远程tag</span></span><br></pre></td></tr></table></figure>
<h3 id="创建标签">创建标签</h3><h4 id="轻量级标签">轻量级标签</h4><p> 轻量级标签跟分枝一样，不会改变。它就是针对某个特定提交的指针</p>
<h4 id="带注释的标签">带注释的标签</h4><p> 然而，带注释的标签是git仓库中的对象，它是一组校验和，包含标签名、email、日期，标签信息，GPG签名和验证<br> <figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">tag</span> -a v1.<span class="number">4</span> -m ‘version <span class="number">1.4</span>‘</span><br><span class="line">$ git <span class="keyword">tag</span></span><br><span class="line">v0.<span class="number">1</span></span><br><span class="line">v1.<span class="number">3</span></span><br><span class="line">v1.<span class="number">4</span></span><br><span class="line"><span class="variable">$git</span> show</span><br><span class="line"><span class="variable">$git</span> push origin --delete <span class="keyword">tag</span> <span class="variable">&lt;tagname&gt;</span> <span class="comment">##删除远程tag</span></span><br></pre></td></tr></table></figure></p>
<p>可以使用 git show 命令查看相应标签的版本信息，并连同显示打标签时的提交对象。</p>
<h3 id="发布标签">发布标签</h3><p> 通常的git push不会将标签对象提交到git服务器，我们需要进行显式的操作：<br> <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">push</span> origin v0.1.2 <span class="preprocessor"># 将v0.1.2标签提交到git服务器</span></span><br><span class="line">$ git <span class="keyword">push</span> origin –tags <span class="preprocessor"># 将本地所有标签一次性提交到git服务器</span></span><br></pre></td></tr></table></figure></p>
<h2 id="（二）git_branch">（二）git branch</h2> <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git branch -a <span class="preprocessor">##显示远程分支 红色为远程分支</span></span><br><span class="line">git branch -d gh-pages  <span class="preprocessor">##删除本地分支</span></span><br><span class="line">git <span class="keyword">push</span> origin :branch_name  <span class="preprocessor">##删除远程分支</span></span><br><span class="line"></span><br><span class="line">git branch branch_name</span><br><span class="line">git commit </span><br><span class="line">git <span class="keyword">push</span> origin branch_name <span class="preprocessor">##提交本地分支</span></span><br></pre></td></tr></table></figure>
<h2 id="（三）在shell中显示分支名字">（三）在shell中显示分支名字</h2><p> 只需要把下面代码添加到 ～/.bashrc文件中即可。<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">## Parses out the branch name from .git/HEAD:</span></span><br><span class="line"><span class="function"><span class="title">find_git_branch</span></span> () &#123;</span><br><span class="line">    <span class="built_in">local</span> dir=. head</span><br><span class="line">    until [ <span class="string">"<span class="variable">$dir</span>"</span> -ef / ]; <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="operator">-f</span> <span class="string">"<span class="variable">$dir</span>/.git/HEAD"</span> ]; <span class="keyword">then</span></span><br><span class="line">            head=$(&lt; <span class="string">"<span class="variable">$dir</span>/.git/HEAD"</span>)</span><br><span class="line">            <span class="keyword">if</span> [[ <span class="variable">$head</span> = ref:\ refs/heads/* ]]; <span class="keyword">then</span></span><br><span class="line">                git_branch=<span class="string">" | <span class="variable">$&#123;head#*/*/&#125;</span>"</span></span><br><span class="line">            <span class="keyword">elif</span> [[ <span class="variable">$head</span> != <span class="string">''</span> ]]; <span class="keyword">then</span></span><br><span class="line">                git_branch=<span class="string">" | (detached)"</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                git_branch=<span class="string">" | (unknow)"</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">            <span class="built_in">return</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        dir=<span class="string">"../<span class="variable">$dir</span>"</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    git_branch=<span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line">green=$<span class="string">'\[\e[1;32m\]'</span></span><br><span class="line">normal=$<span class="string">'\[\e[m\]'</span></span><br><span class="line">PROMPT_COMMAND=<span class="string">"find_git_branch; <span class="variable">$PROMPT_COMMAND</span>"</span></span><br><span class="line">PS1=<span class="string">"\u@\h:\w<span class="variable">$green</span>\$git_branch <span class="variable">$normal</span>\$ "</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p> Git是一个免费的、分布式的版本控制工具，或是一个强调速度快的源代码管理工具。Git诞生于2005年，最初是Linus Torvalds开发出来用于管理Linux内核的开发。<br>]]>
    
    </summary>
    
      <category term="github" scheme="http://blog.magicer.xyz/tags/github/"/>
    
      <category term="软件使用" scheme="http://blog.magicer.xyz/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[配置github]]></title>
    <link href="http://blog.magicer.xyz/2015/04/github-config/"/>
    <id>http://blog.magicer.xyz/2015/04/github-config/</id>
    <published>2015-04-30T06:32:59.000Z</published>
    <updated>2015-10-11T10:45:21.645Z</updated>
    <content type="html"><![CDATA[<p>电脑系统重新安装了，很多软件都需要重新设置，鼓捣了很长时间，顺便记录一下各种配置及修改。感觉好累啊。<br><a id="more"></a></p>
<h2 id="生成ssh">生成ssh</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"your_email<span class="variable">@example</span>.com"</span></span><br><span class="line"><span class="comment"># Creates a new ssh key, using the provided email as a label</span></span><br><span class="line"><span class="comment"># Generating public/private rsa key pair.</span></span><br></pre></td></tr></table></figure>
<p>第一步不用直接回车就可以，之后按照流程输入就行，<br>然后把id_rsa.pub文件中的内容复制到github设置里面的ssh中</p>
<h2 id="测试是否成功：">测试是否成功：</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ssh</span> -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure>
<p>当出现以下提示时即设置成功<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You've successfully authenticated, <span class="keyword">but</span> GitHub <span class="keyword">does</span> <span class="keyword">not</span></span><br><span class="line"><span class="comment"># provide shell access.</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置git">配置git</h2><p>在终端输入<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user<span class="class">.name</span>  <span class="string">"username"</span></span><br><span class="line">git config --global user<span class="class">.email</span>  <span class="string">"email"</span></span><br></pre></td></tr></table></figure></p>
<p>测试是否设置正确：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">git</span> <span class="comment">config</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">global</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">list</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>电脑系统重新安装了，很多软件都需要重新设置，鼓捣了很长时间，顺便记录一下各种配置及修改。感觉好累啊。<br>]]>
    
    </summary>
    
      <category term="github" scheme="http://blog.magicer.xyz/tags/github/"/>
    
      <category term="软件使用" scheme="http://blog.magicer.xyz/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[安装sublime_text2]]></title>
    <link href="http://blog.magicer.xyz/2015/04/sublime-text2/"/>
    <id>http://blog.magicer.xyz/2015/04/sublime-text2/</id>
    <published>2015-04-30T03:44:06.000Z</published>
    <updated>2015-10-10T16:12:13.278Z</updated>
    <content type="html"><![CDATA[<p>  Sublime Text 是一个代码编辑器（Sublime Text 2是收费软件，但可以无限期试用），也是HTML和散文先进的文本编辑器。Sublime Text是由程序员Jon Skinner于2008年1月份所开发出来，它最初被设计为一个具有丰富扩展功能的Vim。</p>
<p>   SublimeText具有漂亮的用户界面和强大的功能，例如代码缩略图，Python的插件，代码段等。还可自定义键绑定，菜单和工具栏。Sublime Text 的主要功能包括：拼写检查，书签，完整的 Python API ， Goto 功能，即时项目切换，多选择，多窗口等等。Sublime Text 是一个跨平台的编辑器，同时支持Windows、Linux、Mac OS X等操作系统。<br><a id="more"></a></p>
<h2 id="安装">安装</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add-apt-repository ppa:webupd8team/sublime-text-<span class="number">2</span></span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">apt-get install sublime-text</span><br></pre></td></tr></table></figure>
<h2 id="安装控制器(仅适用于text2)：">安装控制器(仅适用于text2)：</h2><p> ctrl+`,调出控制台：</p>
<p> 输入：<br> <figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib2,os;pf=<span class="string">'Package Control.sublime-package'</span>;ipp=sublime.installed_packages_path();os.makedirs(ipp) <span class="keyword">if</span> <span class="keyword">not</span> os.path.<span class="keyword">exists</span>(ipp) <span class="keyword">else</span> None;<span class="keyword">open</span>(os.path.<span class="keyword">join</span>(ipp,pf),<span class="string">'wb'</span>).<span class="keyword">write</span>(urllib2.urlopen(<span class="string">'http://sublime.wbond.net/'</span>+pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).<span class="keyword">read</span>())</span><br></pre></td></tr></table></figure></p>
<h2 id="sublime_text3安装控制器">sublime text3安装控制器</h2>  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  urllib.request,os;pf=<span class="string">'Package Control.sublime-package'</span>;ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));open(os.path.<span class="keyword">join</span>(ipp,pf),<span class="string">'wb'</span>).<span class="keyword">write</span>(urllib.request.urlopen(<span class="string">'http://sublime.wbond.net/'</span>+pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).<span class="keyword">read</span>())</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>  Sublime Text 是一个代码编辑器（Sublime Text 2是收费软件，但可以无限期试用），也是HTML和散文先进的文本编辑器。Sublime Text是由程序员Jon Skinner于2008年1月份所开发出来，它最初被设计为一个具有丰富扩展功能的Vim。</p>
<p>   SublimeText具有漂亮的用户界面和强大的功能，例如代码缩略图，Python的插件，代码段等。还可自定义键绑定，菜单和工具栏。Sublime Text 的主要功能包括：拼写检查，书签，完整的 Python API ， Goto 功能，即时项目切换，多选择，多窗口等等。Sublime Text 是一个跨平台的编辑器，同时支持Windows、Linux、Mac OS X等操作系统。<br>]]>
    
    </summary>
    
      <category term="sublime" scheme="http://blog.magicer.xyz/tags/sublime/"/>
    
      <category term="软件使用" scheme="http://blog.magicer.xyz/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ubuntu安装32位库]]></title>
    <link href="http://blog.magicer.xyz/2015/04/ubuntu-32bit-lib/"/>
    <id>http://blog.magicer.xyz/2015/04/ubuntu-32bit-lib/</id>
    <published>2015-04-30T03:35:35.000Z</published>
    <updated>2015-10-10T16:28:29.750Z</updated>
    <content type="html"><![CDATA[<p>很多软件只有32位的，有的依赖32位库还挺严重的；从ubuntu 13.10已经废弃了ia32-libs，但可以使用多架构，安装软件或包apt-get install program:i386。有的还是觉得烦，想一步到位安装所有的以前的ia32-libs，可以使用以下方法：<br><a id="more"></a></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -<span class="tag">i</span></span><br><span class="line">cd /etc/apt/sources<span class="class">.list</span><span class="class">.d</span></span><br><span class="line">echo <span class="string">"deb http://archive.ubuntu.com/ubuntu/ raring main restricted universe multiverse"</span> &gt;ia32-libs-raring<span class="class">.list</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install ia32-libs</span><br></pre></td></tr></table></figure>
<p>复制代码<br>PS:这种方法肯定能安装上ia32-libs，但由于添加的是13.04的源，所以有没有混淆暂时不清楚，网上也有很多用新立德软件包管理器这样做；够狠，你就这么干。也可以这么安装了ia32-libs后，把/etc/apt/sources.list.d目录下的ia32-libs-raring.list删掉，然后再sudo apt-get update</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>很多软件只有32位的，有的依赖32位库还挺严重的；从ubuntu 13.10已经废弃了ia32-libs，但可以使用多架构，安装软件或包apt-get install program:i386。有的还是觉得烦，想一步到位安装所有的以前的ia32-libs，可以使用以下方法：<br>]]>
    
    </summary>
    
      <category term="linux" scheme="http://blog.magicer.xyz/tags/linux/"/>
    
      <category term="ubuntu" scheme="http://blog.magicer.xyz/tags/ubuntu/"/>
    
      <category term="软件使用" scheme="http://blog.magicer.xyz/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[安装Hexo，搭建博客]]></title>
    <link href="http://blog.magicer.xyz/2015/04/hexo-install/"/>
    <id>http://blog.magicer.xyz/2015/04/hexo-install/</id>
    <published>2015-04-30T01:28:51.000Z</published>
    <updated>2015-10-10T15:54:46.170Z</updated>
    <content type="html"><![CDATA[<p>Hexo 是一个轻量的静态博客框架。通过Hexo可以快速生成一个静态博客框架,仅需要几条命令就可以完成,相当方便。</p>
<p>而架设Hexo的环境更简单了 不需要lnmp/lamp这些繁琐复杂的环境 仅仅需要一个简单的http服务器即可使用 或者使用互联网上免费的页面托管服务<br>比如Hexo的官方网站<a href="http://hexo.io" target="_blank" rel="external">http://hexo.io</a> 就是托管于github的pages服务上<br> 系统重装之后用hexo搭建的博客没有了，又花了整理了很长时间才搭建完成，在这里记录一下。<br><a id="more"></a></p>
<h2 id="安装nodejs">安装nodejs</h2><p>安装钱需要系统上有python g++ 和gcc<br><a href="nodejs.org/dist/v0.12.2/node-v0.12.2.tar.gz">下载nodejs</a><br>下载完了之后解压<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf node-v0.<span class="number">12.2</span>.tar.gz -C /<span class="keyword">opt</span></span><br><span class="line"><span class="keyword">cd</span> /<span class="keyword">opt</span>/node-v0.<span class="number">12.2</span></span><br><span class="line">./configure </span><br><span class="line"><span class="keyword">make</span> </span><br><span class="line">sudo <span class="keyword">make</span> install</span><br></pre></td></tr></table></figure></p>
<p>安装完成后检查<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -<span class="property">version</span></span><br></pre></td></tr></table></figure></p>
<h2 id="安装git">安装git</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install git-core</span><br></pre></td></tr></table></figure>
<h2 id="安装hexo">安装hexo</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo -g</span><br></pre></td></tr></table></figure>
<p>进入想要写文章的博客目录。<br>运行 hexo init<br>之后运行 npm install</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexo 是一个轻量的静态博客框架。通过Hexo可以快速生成一个静态博客框架,仅需要几条命令就可以完成,相当方便。</p>
<p>而架设Hexo的环境更简单了 不需要lnmp/lamp这些繁琐复杂的环境 仅仅需要一个简单的http服务器即可使用 或者使用互联网上免费的页面托管服务<br>比如Hexo的官方网站<a href="http://hexo.io">http://hexo.io</a> 就是托管于github的pages服务上<br> 系统重装之后用hexo搭建的博客没有了，又花了整理了很长时间才搭建完成，在这里记录一下。<br>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://blog.magicer.xyz/tags/hexo/"/>
    
      <category term="博客搭建" scheme="http://blog.magicer.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>