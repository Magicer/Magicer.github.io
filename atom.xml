<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Magicer</title>
  <subtitle>Magicer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://m.magicer.xyz/"/>
  <updated>2017-06-03T05:57:33.984Z</updated>
  <id>http://m.magicer.xyz/</id>
  
  <author>
    <name>Magicer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android小白研究下Bitmap</title>
    <link href="http://m.magicer.xyz/2017/06/android-bitmap/"/>
    <id>http://m.magicer.xyz/2017/06/android-bitmap/</id>
    <published>2017-06-03T05:53:33.000Z</published>
    <updated>2017-06-03T05:57:33.984Z</updated>
    
    <content type="html"><![CDATA[<p>在Android开发中我们会在很多时候用到图片，这个时候我们就需要用到<code>Bitmap</code>了，在Android开发中我们使用的图都要转换成位图。但是我们并不能通过<code>Bitmap</code>的构造方法来实例化一个<code>Bitmap</code>，官方提供了<code>BitmapFactory</code>来的静态方法来实例化<code>Bitmap</code>。<br>当我们使用<code>Bitmap</code>的时候很容易的就会导致应用程序的内存被消耗完，所以使用<code>Bitmap</code>的时候一定要做好优化。<br><a id="more"></a></p>
<h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><p>在Bitmap类的内部有个<code>Config</code>枚举：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Config &#123;</div><div class="line">      <span class="comment">/**</span></div><div class="line">      *每一个像素存一个alpha通道的值，不存储颜色信息，适合做遮罩层。每个像素占1byte。</div><div class="line">      */</div><div class="line">        ALPHA_8     (<span class="number">1</span>),</div><div class="line">        <span class="comment">/**</span></div><div class="line">        *每个像素占2byte，只有RBG通道色值，Red占5bit，Green占6bit，Blue占5bit。</div><div class="line">        */</div><div class="line">        RGB_565     (<span class="number">3</span>),</div><div class="line">        <span class="comment">/**</span></div><div class="line">        *因为质量太低，推荐使用ARGB_8888代替</div><div class="line">        */</div><div class="line">        <span class="meta">@Deprecated</span></div><div class="line">        ARGB_4444   (<span class="number">4</span>),</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">        * 官方推荐使用</div><div class="line">        *每一个像素占4byte，每一个通道（ARGB）占8bit（256个值）.</div><div class="line">        *灵活切画面质量好</div><div class="line">        */</div><div class="line">        ARGB_8888   (<span class="number">5</span>);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>他的主要作用就是让我们来设置画面的质量的，</p>
<h2 id="创建一个Bitmap"><a href="#创建一个Bitmap" class="headerlink" title="创建一个Bitmap"></a>创建一个Bitmap</h2><p>查看bitmap的源码我们会看到一些<code>createBitmap()</code>方法，但是我们创建<code>Bitmap</code>使用的最多的是<code>BitmapFactory</code>类的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bitmap bitmap = Bitmap.createBitmap(mWidth,mHeight, Bitmap.Config.ARGB_8888);</div></pre></td></tr></table></figure></p>
<p>通过上面的方法可以创建一个空白的Bitmap。</p>
<h3 id="BitmapFactory"><a href="#BitmapFactory" class="headerlink" title="BitmapFactory"></a>BitmapFactory</h3><h4 id="Options类"><a href="#Options类" class="headerlink" title="Options类"></a>Options类</h4><p><code>Options</code>类用来设置解码的参数。其中主要有：</p>
<ul>
<li><p>public Bitmap inBitmap;</p>
</li>
<li><p><strong>public boolean inJustDecodeBounds;</strong> 如果设置为true，解析器将返回null，但是<code>out...</code>字段会设置上值。</p>
</li>
<li><strong>public int inSampleSize;</strong> 如果设置的值<code>&gt;1</code>那么解析器将会对原始图片进行抽取，返回一个更小的图片。解析器会使用2的次方，其他的值会向下转为最近的2的幂。</li>
<li>public boolean inDither;</li>
<li>public int inDensity; bitmpa使用的像素密度。</li>
<li>public int inTargetDensity;</li>
<li>public int inScreenDensity;</li>
<li>public boolean inScaled; </li>
<li>public int outWidth; 图片的宽度</li>
<li>public int outHeight;  图片的高度</li>
<li>public String outMimeType; 如果知道图片的MIME类型就设置上，如果不知道就设置为null</li>
</ul>
<p>当我们想对图片进行压缩的时候，我们就要使用到<code>Options</code>。先看下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">    BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">    <span class="comment">//设置为true，先让解析器解析出图片的大小信息。</span></div><div class="line">    options.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">    BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher,options);</div><div class="line">    <span class="comment">//之后他们通过这个得到了图片大小信息的options来计算压缩的比例。</span></div><div class="line">    options.inSampleSize = calculateInSampleSize(options,<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">    options.inJustDecodeBounds = <span class="keyword">false</span>; <span class="comment">//之后设置为false，为了获取到bitmap。</span></div><div class="line">    Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher, options);<span class="comment">//之后就可以通过这个options来获取自己期望的bitmap了。</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateInSampleSize</span><span class="params">(</span></span></div><div class="line">        BitmapFactory.Options options, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight) &#123;</div><div class="line">    <span class="comment">// Raw height and width of image</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> height = options.outHeight;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> width = options.outWidth;</div><div class="line">    <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfHeight = height / <span class="number">2</span>;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfWidth = width / <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="comment">// Calculate the largest inSampleSize value that is a power of 2 and keeps both</span></div><div class="line">        <span class="comment">// height and width larger than the requested height and width.</span></div><div class="line">        <span class="keyword">while</span> ((halfHeight / inSampleSize) &gt;= reqHeight</div><div class="line">                &amp;&amp; (halfWidth / inSampleSize) &gt;= reqWidth) &#123;</div><div class="line">            inSampleSize *= <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> inSampleSize;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的<code>calculateInSampleSize</code>方法是官方文档中提供的用来计算<code>InSampleSize</code>值的方法。</p>
<h4 id="decode方法"><a href="#decode方法" class="headerlink" title="decode方法"></a>decode方法</h4><p>使用decode系列方法来得到bitmap对象<br><img src="/image/Android/bitmap.png" alt="图片描述"></p>
<h2 id="Recycle"><a href="#Recycle" class="headerlink" title="Recycle"></a>Recycle</h2><p> 当<code>Bitmap</code>不再使用的时候记得将其回收，以免内存泄漏<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!bitmap.isRecycled()) &#123;</div><div class="line">        bitmap.recycle();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="复制Bitmap"><a href="#复制Bitmap" class="headerlink" title="复制Bitmap"></a>复制Bitmap</h2><p><code>Bitmap</code>有一个<code>coty()</code>方法用来复制一个Bitmap.源码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Tries to make a new bitmap based on the dimensions of this bitmap,</div><div class="line">    * setting the new bitmap's config to the one specified, and then copying</div><div class="line">    * this bitmap's pixels into the new bitmap. If the conversion is not</div><div class="line">    * supported, or the allocator fails, then this returns NULL.  The returned</div><div class="line">    * bitmap initially has the same density as the original.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> config    The desired config for the resulting bitmap</div><div class="line">    * <span class="doctag">@param</span> isMutable True if the resulting bitmap should be mutable (i.e.</div><div class="line">    *                  its pixels can be modified)</div><div class="line">    * <span class="doctag">@return</span> the new bitmap, or null if the copy could not be made.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> Bitmap <span class="title">copy</span><span class="params">(Config config, <span class="keyword">boolean</span> isMutable)</span> </span>&#123;</div><div class="line">       checkRecycled(<span class="string">"Can't copy a recycled bitmap"</span>);</div><div class="line">       Bitmap b = nativeCopy(mNativePtr, config.nativeInt, isMutable);</div><div class="line">       <span class="keyword">if</span> (b != <span class="keyword">null</span>) &#123;</div><div class="line">           b.setPremultiplied(mRequestPremultiplied);</div><div class="line">           b.mDensity = mDensity;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> b;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>有时我们创建的<code>Bitmap</code>是无法更改的。但是有时候我们可能需要对<code>Bitmap</code>进行更改，这个时候我们就可以使用<code>copy（Config,true）</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Android开发中我们会在很多时候用到图片，这个时候我们就需要用到&lt;code&gt;Bitmap&lt;/code&gt;了，在Android开发中我们使用的图都要转换成位图。但是我们并不能通过&lt;code&gt;Bitmap&lt;/code&gt;的构造方法来实例化一个&lt;code&gt;Bitmap&lt;/code&gt;，官方提供了&lt;code&gt;BitmapFactory&lt;/code&gt;来的静态方法来实例化&lt;code&gt;Bitmap&lt;/code&gt;。&lt;br&gt;当我们使用&lt;code&gt;Bitmap&lt;/code&gt;的时候很容易的就会导致应用程序的内存被消耗完，所以使用&lt;code&gt;Bitmap&lt;/code&gt;的时候一定要做好优化。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="Bitmap" scheme="http://m.magicer.xyz/tags/Bitmap/"/>
    
  </entry>
  
  <entry>
    <title>greenDao多表关联</title>
    <link href="http://m.magicer.xyz/2017/06/greendao3-relations/"/>
    <id>http://m.magicer.xyz/2017/06/greendao3-relations/</id>
    <published>2017-06-03T05:45:41.000Z</published>
    <updated>2017-06-03T05:51:42.220Z</updated>
    
    <content type="html"><![CDATA[<p>之前我们看到了<code>greenDao</code>的简单使用，但是就这些是远远不够的，有时候我们需要存储的数据较为复杂，这个时候我们可能需要使用到多表关联的操作。<br><a id="more"></a></p>
<h2 id="ToOne"><a href="#ToOne" class="headerlink" title="ToOne"></a>ToOne</h2><p>一对一的关系映射。看个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Score</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">private</span> String scoreId;</div><div class="line">    <span class="meta">@ToOne</span>(joinProperty = <span class="string">"scoreId"</span>)</div><div class="line">    <span class="keyword">private</span> Score score;</div><div class="line">&#125;</div><div class="line"></div><div class="line">        <span class="comment">//先向数据库中插入两条数据</span></div><div class="line">        Score score = <span class="keyword">new</span> Score(<span class="string">"1101"</span>, <span class="number">80</span>);</div><div class="line">        Student magicer = <span class="keyword">new</span> Student(<span class="string">"110"</span>,<span class="string">"Magicer"</span>,<span class="number">12</span>,<span class="string">"1101"</span>);</div><div class="line">        scoreDao.insertOrReplace(score);</div><div class="line">        studentDao.insertOrReplace(magicer);</div><div class="line">        </div><div class="line">        <span class="comment">//之后查找我们插入的数据，就可以查询出来我们想要的带有成绩的学生实体。</span></div><div class="line">        QueryBuilder&lt;Student&gt; queryBuilder = studentDao.queryBuilder().where(StudentDao.Properties.Name.eq(<span class="string">"Magicer"</span>));</div><div class="line">        <span class="keyword">for</span> (Student student : queryBuilder.list()) &#123;</div><div class="line">            Log.i(TAG, <span class="string">"onCreate: "</span>+student.toString());</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>在上面的例子中，我们设定每个学生有一门成绩，这个时候就是个<code>ToOne</code>一对一的关系。我们通过<code>joinProperty</code>来设置外键。我们就可以很方便的查询出某个学生的成绩了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ToOne &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Name of the property inside the current entity which holds the key of related entity.</div><div class="line">     * If this parameter is absent(缺少的), then an additional column is automatically created to hold the key.</div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">joinProperty</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="ToMany"><a href="#ToMany" class="headerlink" title="ToMany"></a>ToMany</h2><p>但是一般一个学生会有多个成绩，这个时候我们就需要使用<code>ToMany</code>一对多的关系了。先看下例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="meta">@ToMany</span>(referencedJoinProperty = <span class="string">"studentId"</span>)</div><div class="line">    <span class="keyword">private</span> List&lt;Score&gt; scores;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Score</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</div><div class="line">    <span class="keyword">private</span> String type;</div><div class="line">    <span class="keyword">private</span> String studentId;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">        Score math = <span class="keyword">new</span> Score(<span class="string">"1101"</span>, <span class="number">87</span>, <span class="string">"Math"</span>, <span class="string">"110"</span>);</div><div class="line">        Score english = <span class="keyword">new</span> Score(<span class="string">"1102"</span>, <span class="number">99</span>, <span class="string">"English"</span>, <span class="string">"110"</span>);</div><div class="line">        Score chinese = <span class="keyword">new</span> Score(<span class="string">"1103"</span>, <span class="number">120</span>, <span class="string">"Chinese"</span>, <span class="string">"110"</span>);</div><div class="line">        scoreDao.insertOrReplaceInTx(math,english,chinese);<span class="comment">//使用事务插入或替换数据</span></div><div class="line">        Student magicer = <span class="keyword">new</span> Student(<span class="string">"110"</span>, <span class="string">"Magicer"</span>, <span class="number">23</span>);</div><div class="line">        studentDao.insertOrReplace(magicer);</div><div class="line"></div><div class="line">        Query&lt;Student&gt; query = studentDao.queryBuilder().where(StudentDao.Properties.Name.eq(<span class="string">"Magicer"</span>)).build();</div><div class="line">        <span class="keyword">for</span> (Student student : query.list()) &#123;</div><div class="line">            Log.i(TAG, <span class="string">"onCreate: "</span>+student);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="comment">//I/MainActivity: onCreate: Student&#123;id='110', name='Magicer', age=23, score=[Score&#123;id='1101', score=87, type='Math', studentId='110'&#125;, Score&#123;id='1102', score=99, type='English', studentId='110'&#125;, Score&#123;id='1103', score=120, type='Chinese', studentId='110'&#125;]&#125;</span></div></pre></td></tr></table></figure>
<p>这个时候，一个学生就有<code>Math</code> <code>Enghlish</code> <code>Chinese</code>三个的成绩。这个时候，我们使用<code>referencedJoinProperty</code>将成绩跟学生建立了关联关系。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ToMany &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Name of the property inside the target entity which holds id of the source (current) entity</div><div class="line">     * Required unless no &#123;<span class="doctag">@link</span> JoinProperty&#125; or &#123;<span class="doctag">@link</span> JoinEntity&#125; is specified</div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">referencedJoinProperty</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Array of matching source -&gt; target properties</div><div class="line">     * Required unless &#123;<span class="doctag">@link</span> #referencedJoinProperty()&#125; or &#123;<span class="doctag">@link</span> JoinEntity&#125; is specified</div><div class="line">     */</div><div class="line">    JoinProperty[] joinProperties() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JoinEntity"><a href="#JoinEntity" class="headerlink" title="JoinEntity"></a>JoinEntity</h2><p>有时我们还要创建多对多的关联关系<code>N:M</code>。在<code>greenDao</code>中就使用<code>JoinEntity</code>注解；先来看下他的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JoinEntity &#123;</div><div class="line">    <span class="comment">/** Reference to join-entity class, which holds the source and the target properties */</span></div><div class="line">    Class&lt;?&gt; entity();</div><div class="line"></div><div class="line">    <span class="comment">/** Name of the property inside the join entity which holds id of the source (current) entity */</span></div><div class="line">    <span class="function">String <span class="title">sourceProperty</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/** Name of the property inside the join entity which holds id of the target entity */</span></div><div class="line">    <span class="function">String <span class="title">targetProperty</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置多对多关系的时候我们需要使用到<code>ToMany</code>和<code>JoinEntity</code>通过<code>JoinEntity</code>注解来配置关联的建。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">    <span class="meta">@ToMany</span></div><div class="line">    <span class="meta">@JoinEntity</span>(</div><div class="line">            entity = Join.class,</div><div class="line">            sourceProperty = <span class="string">"studentId"</span>,</div><div class="line">            targetProperty = <span class="string">"scoreId"</span></div><div class="line">    )</div><div class="line">    <span class="keyword">private</span> List&lt;Score&gt; scores;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Join</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="keyword">private</span> String studentId;</div><div class="line">    <span class="keyword">private</span> String scoreId;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Score</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</div><div class="line">    <span class="keyword">private</span> String type;</div><div class="line">    <span class="keyword">private</span> String studentId;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>当插入到数据库中的数据是网络请求得到的时候会有些注意事项。由于<code>greenDao</code>会帮助我们生成一些<code>get</code>和<code>set</code>方法。这个是时候就要注意了。来看下生成的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> Long strokeId;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stroke</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="meta">@ToMany</span>(referencedJoinProperty = <span class="string">"strokeId"</span>)</div><div class="line">    <span class="keyword">private</span> List&lt;Point&gt; points;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如上面，我们现在有每个笔画<code>Stroke</code>会有很多的<code>Point</code>。编译下之后会生成很多<code>get</code>和<code>set</code>方法。<br>我们看下<code>Stroke</code>的一个<code>get</code>方法我们会看到下面这些代码。就由于这个代码。可能就会导致。我们解析到了<code>Stroke</code>后调用<code>getPoints()</code>方法想要获取点的集合是出现问题，这时候就可能会报错。这个时候我们可以在单独写另外的一个<code>get</code>方法，来支持直接获取<code>points</code>对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Generated</span>(hash = <span class="number">404164872</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> List&lt;Point&gt; <span class="title">getPoints</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (points == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">final</span> DaoSession daoSession = <span class="keyword">this</span>.daoSession;</div><div class="line">           <span class="keyword">if</span> (daoSession == <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> DaoException(<span class="string">"Entity is detached from DAO context"</span>);</div><div class="line">           &#125;</div><div class="line">           PointDao targetDao = daoSession.getPointDao();</div><div class="line">           List&lt;Point&gt; pointsNew = targetDao._queryStroke_Points(id);</div><div class="line">           <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">               <span class="keyword">if</span>(points == <span class="keyword">null</span>) &#123;</div><div class="line">                   points = pointsNew;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> points;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前我们看到了&lt;code&gt;greenDao&lt;/code&gt;的简单使用，但是就这些是远远不够的，有时候我们需要存储的数据较为复杂，这个时候我们可能需要使用到多表关联的操作。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="greenDao" scheme="http://m.magicer.xyz/tags/greenDao/"/>
    
  </entry>
  
  <entry>
    <title>greenDao使用进阶</title>
    <link href="http://m.magicer.xyz/2017/06/greendao3-advanced/"/>
    <id>http://m.magicer.xyz/2017/06/greendao3-advanced/</id>
    <published>2017-06-03T05:05:28.000Z</published>
    <updated>2017-06-03T05:41:09.924Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的一遍<a href="https://segmentfault.com/a/1190000009057407" target="_blank" rel="external">greenDao基础使用</a>中学习了greenDao的集成及简单的使用，现在开启进阶之路。学习下使用中的细节。</p>
<h2 id="Annotations"><a href="#Annotations" class="headerlink" title="Annotations"></a>Annotations</h2><p>在之前的配置中我们使用到了<code>@Entity</code>和<code>@Id</code>注解,除了这俩<code>greenDao</code>中还有其他注解来方便我们配置数据库。下面一一介绍</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="meta">@Property</span>(nameInDb = <span class="string">"student_age"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="meta">@Transient</span></div><div class="line">    <span class="keyword">private</span> String address;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Entity"><a href="#Entity" class="headerlink" title="@Entity"></a>@Entity</h3><p>我们使用<code>Entity</code>注解来指定 为某个类创建一个表。<br>下面是<code>Entity</code>的源码，我们可以从中看到在制定表的时候我们可以设置很多参数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Entity &#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Specifies the name on the DB side (e.g. table name) this entity maps to. By default, the name is based on the entities class name.</div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">nameInDb</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Indexes for the entity.</div><div class="line">     * &lt;p/&gt;</div><div class="line">     * Note: To create a single-column index consider using &#123;<span class="doctag">@link</span> Index&#125; on the property itself</div><div class="line">     */</div><div class="line">    Index[] indexes() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Advanced flag to disable table creation in the database (when set to false). This can be used to create partial</div><div class="line">     * entities, which may use only a sub set of properties. Be aware however that greenDAO does not sync multiple</div><div class="line">     * entities, e.g. in caches.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">createInDb</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Specifies schema name for the entity: greenDAO can generate independent sets of classes for each schema.</div><div class="line">     * Entities which belong to different schemas should &lt;strong&gt;not&lt;/strong&gt; have relations.</div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">schema</span><span class="params">()</span> <span class="keyword">default</span> "<span class="keyword">default</span>"</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Whether update/delete/refresh methods should be generated.</div><div class="line">     * If entity has defined &#123;<span class="doctag">@link</span> ToMany&#125; or &#123;<span class="doctag">@link</span> ToOne&#125; relations, then it is active independently from this value</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">active</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一般来说我们只需要使用<code>@Entity</code>就可以满足我们的需求了。</p>
<h3 id="Id"><a href="#Id" class="headerlink" title="@Id"></a>@Id</h3><p>将某个属性设置为主键（primary key)。也可以为<code>Long/long</code>类型的值制定自增长。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</div><div class="line">   <span class="keyword">private</span> Long id;</div></pre></td></tr></table></figure>
<p><code>autoincrement</code>只有在类型为<code>Long/long</code>的时候起作用。</p>
<h3 id="NotNull"><a href="#NotNull" class="headerlink" title="@NotNull"></a>@NotNull</h3><p>指定某个字段不能为空。</p>
<h3 id="Property"><a href="#Property" class="headerlink" title="@Property"></a>@Property</h3><p>通过该注解可以为设置在数据库中的列名</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Property</span>(nameInDb = <span class="string">"student_age"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div></pre></td></tr></table></figure>
<p>通过上面的代码就会把age对应的数据存到student_age列中。</p>
<h3 id="Transient"><a href="#Transient" class="headerlink" title="@Transient"></a>@Transient</h3><p>配置了该注解的属性将不会存到数据库中。</p>
<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>通过上面的几个注解我们已经可以让<code>greenDao</code>自动生成操作数据库的各种语句了。接下来就是最重要的数据库<code>CRUD</code>操作了。以下的<code>CRUD</code>操作使用这个类作为例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">public class Question &#123;</div><div class="line">    @Id</div><div class="line">    private String id;</div><div class="line">    @NotNull</div><div class="line">    private String content;</div><div class="line">    private Long start;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DaoMaster.DevOpenHelper helper = new DaoMaster.DevOpenHelper(this,&quot;greendao.db&quot;,null);</div><div class="line">SQLiteDatabase db = helper.getWritableDatabase();</div><div class="line">DaoMaster daoMaster = new DaoMaster(db);</div><div class="line">DaoSession daoSession = daoMaster.newSession();</div></pre></td></tr></table></figure>
<h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><p><img src="/image/Android/greendao/create.png" alt="图片描述"></p>
<p>上图显示了插入数据库的方法。<code>Tx</code>结尾的是使用事务提交的。<br>插入到数据库时我们是直接使用生成的<code>Dao</code>文件来操作的。<br>以下的实例展示了向数据库中插入一条数据：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">QuestionDao questionDao = daoSession.getQuestionDao();</div><div class="line">Question question = <span class="keyword">new</span> Question(UUID.randomUUID().toString(), <span class="string">"这是题目的内容"</span>, System.currentTimeMillis());</div><div class="line">questionDao.insert(question);</div></pre></td></tr></table></figure>
<h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p><img src="/image/Android/greendao/update.png" alt="图片描述"></p>
<h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p><img src="/image/Android/greendao/delete.png" alt="图片描述"></p>
<p>上图展示了删除的方法。</p>
<p><code>delete(Question entity)</code>方法是根据查询<code>entity</code>的<code>key</code>之后调用<code>deleteByKey(String key)</code>方法删除的。</p>
<h3 id="Retrieve"><a href="#Retrieve" class="headerlink" title="Retrieve"></a>Retrieve</h3><p>接下来就是数据库中最重要的查找方法了。在<code>greenDao</code>中查找数据库也很方便，在基础中我们也看到了。下面详细的来看下。</p>
<p><img src="/image/Android/greendao/retrieve.png" alt="图片描述"></p>
<h4 id="QueryBuilder"><a href="#QueryBuilder" class="headerlink" title="QueryBuilder"></a>QueryBuilder</h4><p><img src="/image/Android/greendao/querybuilder.png" alt="图片描述"></p>
<p>从图中我们看出<code>QueryBuilder</code>有很多的方法供我们选择。方法太多了就不一一介绍了。<a href="http://greenrobot.org/files/greendao/javadoc/current/" target="_blank" rel="external">详细的文档看着里吧</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Query&lt;Question&gt; build = questionDao.queryBuilder()</div><div class="line">                .where(QuestionDao.Properties.Id.eq(<span class="string">"1001"</span>))</div><div class="line">                .build();</div><div class="line"><span class="keyword">for</span> (Question question : build.list()) &#123;</div><div class="line">            Log.i(TAG, <span class="string">"onCreate: "</span>+question.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>where()</code>是用来配置我们的查询条件的。可以传递的多查询条件，将会使用<code>AND</code>语句查询。<br>在上面的例子中我们看到了<code>QuestionDao.Properties.Id.eq(&quot;1001&quot;)</code>这是用来配置查询条件的。<br>主要有:(详细的文档看着里：<a href="http://greenrobot.org/files/greendao/javadoc/current/" target="_blank" rel="external">官方文档</a>)</p>
<ul>
<li><code>eq</code>： equals 相等</li>
<li><code>notEq</code>： 不等</li>
<li><code>like</code>： SQL语句中的<code>LIKE ?</code>语句。 想要学习有关<code>LIKE</code>语法可以<a href="http://www.runoob.com/sqlite/sqlite-like-clause.html" target="_blank" rel="external">看这里</a></li>
<li><code>between</code> SQL语句中的<code>BETWEEN ... AND ...</code> <a href="http://www.runoob.com/sql/sql-between.html" target="_blank" rel="external">BETWEEN 语法学习看这里</a></li>
<li><code>in</code>:  <a href="http://www.runoob.com/sql/sql-in.html" target="_blank" rel="external">IN语法学习看这里</a></li>
<li><code>notIn</code>: </li>
<li><code>gt</code>:  <code>greater than (&#39;&gt;&#39;)</code></li>
<li><code>lt</code>: <code>less than (&#39;&lt;&#39;)</code></li>
<li><code>ge</code>: <code>greater or equal (&#39;&gt;=&#39;)</code></li>
<li><code>le</code>: <code>less or equal (&#39;&lt;=&#39;)</code></li>
<li><code>isNull</code>: </li>
<li><code>isNotNull</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在之前的一遍&lt;a href=&quot;https://segmentfault.com/a/1190000009057407&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;greenDao基础使用&lt;/a&gt;中学习了greenDao的集成及简单的使用，现在开启进阶之路
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="greenDAO" scheme="http://m.magicer.xyz/tags/greenDAO/"/>
    
  </entry>
  
  <entry>
    <title>greenDao基础使用</title>
    <link href="http://m.magicer.xyz/2017/05/greendao3-basic/"/>
    <id>http://m.magicer.xyz/2017/05/greendao3-basic/</id>
    <published>2017-05-06T13:57:57.000Z</published>
    <updated>2017-06-03T05:40:32.772Z</updated>
    
    <content type="html"><![CDATA[<p>  <code>greenDao</code>官方文档中介绍，其效率要优于其他几个<code>ORM</code>框架，也有小伙伴验证过，其效率确实挺不错。所以<code>greenDao</code>还是有必要学一学的。毕竟只是用<code>Android</code>的<code>SQLiteOpenHelper</code>效率不是低了一丁点。在学习了greenDao之后感觉还是蛮好用的。在这里记录下使用方法。</p>
<h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p> 在一开始学习的使用，查看官方文档。没有找到<code>greenDao</code>的完成配置方式。可能是我不够细心。下面是完全的greedDao的配置。想要查看配置的<a href="http://greenrobot.org/greendao/documentation/modelling-entities/#Schema" target="_blank" rel="external">请点这里</a><br>在<code>build.gradle</code>文件中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;org.greenrobot.greendao&apos;</div><div class="line"></div><div class="line"> greendao &#123;</div><div class="line">        schemaVersion 1</div><div class="line">        daoPackage &apos;xyz.magicer.greendaodemo.dao&apos;  //包名</div><div class="line">        targetGenDir &apos;src/main/java&apos;  //生成目录</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"> compile &apos;org.greenrobot:greendao:3.2.0&apos;</div><div class="line"> compile &apos;org.greenrobot:greendao-generator:3.2.0&apos;</div></pre></td></tr></table></figure></p>
<p>在项目中的<code>build.gradle</code>中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:2.2.2&apos;</div><div class="line"></div><div class="line">        // NOTE: Do not place your application dependencies here; they belong</div><div class="line">        // in the individual module build.gradle files</div><div class="line">        classpath &apos;org.greenrobot:greendao-gradle-plugin:3.2.1&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>官方文档中关于部分注解的说明：点这里</p>
<p> 创建entity文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>编译一下工程之后就会生成<code>DaoMaster</code>、<code>DaoSession</code>、<code>UserDao</code>三个文件。</p>
<h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><p>一个简单的使用实例如下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">DaoMaster.DevOpenHelper openHelper = <span class="keyword">new</span> DaoMaster.DevOpenHelper(<span class="keyword">this</span>, <span class="string">"user.db"</span>, <span class="keyword">null</span>);</div><div class="line">DaoMaster daoMaster = <span class="keyword">new</span> DaoMaster(openHelper.getWritableDatabase());</div><div class="line">DaoSession daoSession = daoMaster.newSession();</div><div class="line">UserDao userDao = daoSession.getUserDao();</div><div class="line">User user = <span class="keyword">new</span> User(<span class="number">0</span>, <span class="string">"zhang3"</span>, <span class="number">19</span>);</div><div class="line">userDao.insert(user);</div><div class="line"></div><div class="line">List&lt;User&gt; magicer= userDao.queryBuilder().where(UserDao.Properties.Name.eq(<span class="string">"magicer"</span>))</div><div class="line">        .orderDesc()</div><div class="line">        .build()</div><div class="line">        .list();</div></pre></td></tr></table></figure></p>
<h2 id="ClassCastException"><a href="#ClassCastException" class="headerlink" title="ClassCastException"></a>ClassCastException</h2><p><a href="https://github.com/greenrobot/greenDAO/blob/master/DaoGenerator/src/org/greenrobot/greendao/generator/Schema.java" target="_blank" rel="external">Schema.java</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Long</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://greenrobot.org/greendao/documentation/" target="_blank" rel="external">官方文档</a></li>
<li><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">官方源码 GIT</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  &lt;code&gt;greenDao&lt;/code&gt;官方文档中介绍，其效率要优于其他几个&lt;code&gt;ORM&lt;/code&gt;框架，也有小伙伴验证过，其效率确实挺不错。所以&lt;code&gt;greenDao&lt;/code&gt;还是有必要学一学的。毕竟只是用&lt;code&gt;Android&lt;/code&gt;的
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="greenDAO" scheme="http://m.magicer.xyz/tags/greenDAO/"/>
    
  </entry>
  
  <entry>
    <title>OkHttp3学习（三）：execute和Interceptor</title>
    <link href="http://m.magicer.xyz/2017/05/okhttp-execute-intercptor/"/>
    <id>http://m.magicer.xyz/2017/05/okhttp-execute-intercptor/</id>
    <published>2017-05-06T13:39:14.000Z</published>
    <updated>2017-05-06T13:56:08.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p> 在<a href="https://segmentfault.com/a/1190000008809137" target="_blank" rel="external">OkHttp3学习（二）：发送一个请求</a>中 我们看到了当我们发送一个请求时，通过<code>client.newCall(request)</code>来创建一个<code>RealCall</code>实例，当我们调用<code>RealCall</code>的<code>execute()</code>的时候会调用<code>client</code>对象的<code>dispatcher</code>的<code>execute()</code>方法来执行这个<code>RealCall</code>。当我们调用了<code>RealCall</code>的<code>enqueue()</code>方法之后会在内部调用<code>Client</code>对象的<code>dispatcher</code>的<code>execute()</code>方法时创建一个<code>AsyncCall</code>对象,并执行这个<code>AsyncCall</code>的<code>execute</code>方法。不管是<code>client.newCall(request).execute()</code>还是<code>client.newCall(request).enqueue(new Callback(){})</code>我们会发现对应的Call的<code>execute()</code>都会得到执行。</p>
<h2 id="execute"><a href="#execute" class="headerlink" title="execute()"></a>execute()</h2><p> 既然<code>RealCall</code>和<code>AsyncCall</code>的<code>execute()</code>都会得到执行，那他们又有什么共同之处呢，相应又是怎么获得的呢？<br>这是<code>RealCall</code>的<code>execute()</code> 去除了部分代码之后的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">   captureCallStackTrace();</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">     client.dispatcher().executed(<span class="keyword">this</span>);</div><div class="line">     Response result = getResponseWithInterceptorChain();</div><div class="line">     <span class="keyword">return</span> result;</div><div class="line">   &#125; <span class="keyword">finally</span> &#123;</div><div class="line">     client.dispatcher().finished(<span class="keyword">this</span>);</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>这是<code>AsyncCall</code>去掉部分代码后的<code>execute()</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">       Response response = getResponseWithInterceptorChain();</div><div class="line">       <span class="keyword">if</span> (retryAndFollowUpInterceptor.isCanceled()) &#123;</div><div class="line">         responseCallback.onFailure(RealCall.<span class="keyword">this</span>, <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>));</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">         responseCallback.onResponse(RealCall.<span class="keyword">this</span>, response);</div><div class="line">       &#125;</div><div class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">      <span class="comment">//...</span></div><div class="line">     &#125; <span class="keyword">finally</span> &#123;</div><div class="line">       client.dispatcher().finished(<span class="keyword">this</span>);</div><div class="line">     &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>在这两个代码中我们看到。请求的响应(<code>Responce</code>)都是通过<code>getResponseWithInterceptorChain()</code>方法获取的。其代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function">Response <span class="title">getResponseWithInterceptorChain</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="comment">// Build a full stack of interceptors.</span></div><div class="line">    List&lt;Interceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    interceptors.addAll(client.interceptors());</div><div class="line">    interceptors.add(retryAndFollowUpInterceptor);</div><div class="line">    interceptors.add(<span class="keyword">new</span> BridgeInterceptor(client.cookieJar()));</div><div class="line">    interceptors.add(<span class="keyword">new</span> CacheInterceptor(client.internalCache()));</div><div class="line">    interceptors.add(<span class="keyword">new</span> ConnectInterceptor(client));</div><div class="line">    <span class="keyword">if</span> (!forWebSocket) &#123;</div><div class="line">      interceptors.addAll(client.networkInterceptors());</div><div class="line">    &#125;</div><div class="line">    interceptors.add(<span class="keyword">new</span> CallServerInterceptor(forWebSocket));</div><div class="line"></div><div class="line">    Interceptor.Chain chain = <span class="keyword">new</span> RealInterceptorChain(</div><div class="line">        interceptors, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, originalRequest);</div><div class="line">    <span class="keyword">return</span> chain.proceed(originalRequest);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>在这些代码中我们看到了一堆的<code>Interceptor</code>那么这又是个什么鬼呢？</p>
<h2 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h2><p>官方关于<code>Interceptor</code>的介绍：<a href="https://github.com/square/okhttp/wiki/Interceptors" target="_blank" rel="external">点这里</a><br><img src="/image/Android/okhttp3/okhttp_intercptor.png" alt="图片描述"><br>看下这个图。看下这个例子自定义一个<code>Inteceptor</code>应该不成问题了。例子在文档中有。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** This interceptor compresses the HTTP request body. Many webservers can't handle this! */</span></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GzipRequestInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Interceptor.Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Request originalRequest = chain.request();</div><div class="line">    <span class="keyword">if</span> (originalRequest.body() == <span class="keyword">null</span> || originalRequest.header(<span class="string">"Content-Encoding"</span>) != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> chain.proceed(originalRequest);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Request compressedRequest = originalRequest.newBuilder()</div><div class="line">        .header(<span class="string">"Content-Encoding"</span>, <span class="string">"gzip"</span>)</div><div class="line">        .method(originalRequest.method(), gzip(originalRequest.body()))</div><div class="line">        .build();</div><div class="line">    <span class="keyword">return</span> chain.proceed(compressedRequest);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> RequestBody <span class="title">gzip</span><span class="params">(<span class="keyword">final</span> RequestBody body)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RequestBody() &#123;</div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> body.contentType();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// We don't know the compressed length in advance!</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        BufferedSink gzipSink = Okio.buffer(<span class="keyword">new</span> GzipSink(sink));</div><div class="line">        body.writeTo(gzipSink);</div><div class="line">        gzipSink.close();</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过下面的方法将一个自定义的<code>Inteceptor</code>加入到请求中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client= <span class="keyword">new</span> OkHttpClient</div><div class="line">       .Builder()</div><div class="line">       .addInterceptor(<span class="keyword">new</span> Interceptor() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">            </div><div class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;)</div><div class="line">       .addNetworkInterceptor(<span class="keyword">new</span> Interceptor() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;).build();</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h2&gt;&lt;p&gt; 在&lt;a href=&quot;https://segmentfault.com/a/1190000008809137&quot; target=&quot;_blank
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="OkHttp3" scheme="http://m.magicer.xyz/tags/OkHttp3/"/>
    
  </entry>
  
  <entry>
    <title>OkHttp3学习（二）：发送一个请求</title>
    <link href="http://m.magicer.xyz/2017/03/okhttp3-basic-2/"/>
    <id>http://m.magicer.xyz/2017/03/okhttp3-basic-2/</id>
    <published>2017-03-23T14:22:45.000Z</published>
    <updated>2017-03-23T14:31:15.485Z</updated>
    
    <content type="html"><![CDATA[<p>  在<a href="https://segmentfault.com/a/1190000008786828" target="_blank" rel="external">OkHttp3学习(一)：基本使用</a>中记录了怎么使用<code>OkHttp</code>设置一个指定的请求，我们请求的参数有了，之后我们就是发起请求了。那么<code>OkHttp3</code>又是怎么发起的这次请求呢？</p>
<p>先看下之前的一个<code>GET</code>请求<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">       Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">               .get()</div><div class="line">               .url(PATH)</div><div class="line">               .build();</div><div class="line">       client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">               <span class="keyword">if</span> (response.isSuccessful()) &#123;</div><div class="line">                   String string = response.body().string();</div><div class="line">                   Log.i(TAG, <span class="string">"onResponse: "</span>+string);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure></p>
<p>在这次请求中我们设置好<code>Request</code>请求的相关参数之后，我们就调用了。<code>client.newCall(request)</code>。从字面意思猜测这个<code>newCall</code>就是在创建一次新的请求。<br><a id="more"></a></p>
<h2 id="Call"><a href="#Call" class="headerlink" title="Call"></a>Call</h2><p><code>Call</code>是一个接口,源码是这样的。(<code>OkHttpClient</code>实现了<code>Call.Factory</code>接口)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Call</span> <span class="keyword">extends</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function">Request <span class="title">request</span><span class="params">()</span></span>; <span class="comment">//返回发起这个Call的原始Request</span></div><div class="line"></div><div class="line">  <span class="function">Response <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>; <span class="comment">//执行请求</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Callback responseCallback)</span></span>; <span class="comment">//在以后的某个时间点执行</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>; <span class="comment">//取消请求 如果请求已经成功了就不能取消了</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isExecuted</span><span class="params">()</span></span>; <span class="comment">//是否正在执行</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isCanceled</span><span class="params">()</span></span>; <span class="comment">//是否取消了</span></div><div class="line"></div><div class="line">  <span class="function">Call <span class="title">clone</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</div><div class="line">    <span class="function">Call <span class="title">newCall</span><span class="params">(Request request)</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="newCall"><a href="#newCall" class="headerlink" title="newCall"></a>newCall</h2><p>  来看下<code>client.newCall(request)</code>都干了些什么。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Prepares the &#123;<span class="doctag">@code</span> request&#125; to be executed at some point in the future.</div><div class="line">   */</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Call <span class="title">newCall</span><span class="params">(Request request)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RealCall(<span class="keyword">this</span>, request, <span class="keyword">false</span> <span class="comment">/* for web socket */</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>通过源码看到。在这里我们是创建了一个<code>RealCall</code>的实例。之后我们又调用了<code>RealCall</code>的<code>enqueue()</code>。来看下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">     <span class="keyword">if</span> (executed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already Executed"</span>);</div><div class="line">     executed = <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line">   captureCallStackTrace();</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">     client.dispatcher().executed(<span class="keyword">this</span>);</div><div class="line">     Response result = getResponseWithInterceptorChain();</div><div class="line">     <span class="keyword">if</span> (result == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>);</div><div class="line">     <span class="keyword">return</span> result;</div><div class="line">   &#125; <span class="keyword">finally</span> &#123;</div><div class="line">     client.dispatcher().finished(<span class="keyword">this</span>);</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Callback responseCallback)</span> </span>&#123;</div><div class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">     <span class="keyword">if</span> (executed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already Executed"</span>);</div><div class="line">     executed = <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line">   captureCallStackTrace();</div><div class="line">   client.dispatcher().enqueue(<span class="keyword">new</span> AsyncCall(responseCallback));</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>进入方法，先判断是否执行了。之后调用了<code>captureCallStackTrace()</code>，之后我们就看到了。这次请求是通过<code>OkHttpClient</code>的<code>Dispatcher</code>调度器执行的。（<code>client.dispatcher()</code>返回<code>OkHttp</code>的成员变量<code>Dispatcher</code>）。我们看到<code>enqueue()</code>和<code>executed()</code>都是调用了<code>Dispatcher</code>的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Used by &#123;<span class="doctag">@code</span> Call#execute&#125; to signal it is in-flight. */</span></div><div class="line"> <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">executed</span><span class="params">(RealCall call)</span> </span>&#123;</div><div class="line">   runningSyncCalls.add(call);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(AsyncCall call)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) &#123;</div><div class="line">     runningAsyncCalls.add(call);</div><div class="line">     executorService().execute(call);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">     readyAsyncCalls.add(call);</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>在这部分代码中。<code>runningAsyncCalls</code>异步请求的双端队列。 <code>runningSyncCalls</code>同步请求的双端队列。<br>尽管<code>RealCall</code>和<code>AsyncCall</code>都叫做Call。但是还是有点区别的。<code>AsyncCall</code>是<code>Runnable</code>的间接子类并没有实现<code>Call</code>接口或者集成<code>Call</code>，而<code>RealCall</code>则是一个<code>Call</code>的子类。他们有着本质上的区别。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Running asynchronous calls. Includes canceled calls that haven't finished yet. */</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;AsyncCall&gt; runningAsyncCalls = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</div><div class="line"></div><div class="line">  <span class="comment">/** Running synchronous calls. Includes canceled calls that haven't finished yet. */</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;RealCall&gt; runningSyncCalls = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</div></pre></td></tr></table></figure></p>
<h2 id="AcyncCall"><a href="#AcyncCall" class="headerlink" title="AcyncCall"></a>AcyncCall</h2><p>在上面的代码中我们可以看到<code>enqueue</code>在执行的时候是同过<code>executorService()</code>来执行的。该方法会返回一个<code>ExecutorService</code>，同事也初始化了<code>Dispatcher</code>中的<code>executorService</code>变量。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> ExecutorService <span class="title">executorService</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (executorService == <span class="keyword">null</span>) &#123;</div><div class="line">     executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE, <span class="number">60</span>, TimeUnit.SECONDS,</div><div class="line">         <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(<span class="string">"OkHttp Dispatcher"</span>, <span class="keyword">false</span>));</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> executorService;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p><code>Dispatcher</code>通过这个<code>execurorService</code>来管理着所有异步请求（AcyncCall）。<br>同步请求是通过调用<code>RealCall</code>的<code>execute()</code>方法执行的，异步请求是通过<code>AsyncCall</code>的<code>execute</code>来执行的。<br>不过<code>AsyncCall</code>的<code>execute()</code>是在父类<code>NamedRunnable</code>的<code>run()</code>方法中调用的，也就是由线程池来管理着。<br>分析<code>AsyncCall</code>和<code>RealCall</code>的<code>execute()</code>方法我们会看到，都会执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">finally &#123;</div><div class="line">     client.dispatcher().finished(this);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>都执行了<code>Dispatcher</code>的<code>finished()</code>函数，来看下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Used by &#123;<span class="doctag">@code</span> AsyncCall#run&#125; to signal completion. */</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">finished</span><span class="params">(AsyncCall call)</span> </span>&#123;</div><div class="line">    finished(runningAsyncCalls, call, <span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/** Used by &#123;<span class="doctag">@code</span> Call#execute&#125; to signal completion. */</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">finished</span><span class="params">(RealCall call)</span> </span>&#123;</div><div class="line">    finished(runningSyncCalls, call, <span class="keyword">false</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">finished</span><span class="params">(Deque&lt;T&gt; calls, T call, <span class="keyword">boolean</span> promoteCalls)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> runningCallsCount;</div><div class="line">    Runnable idleCallback;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (!calls.remove(call)) <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"Call wasn't in-flight!"</span>);</div><div class="line">      <span class="keyword">if</span> (promoteCalls) promoteCalls();</div><div class="line">      runningCallsCount = runningCallsCount();</div><div class="line">      idleCallback = <span class="keyword">this</span>.idleCallback;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (runningCallsCount == <span class="number">0</span> &amp;&amp; idleCallback != <span class="keyword">null</span>) &#123;</div><div class="line">      idleCallback.run();</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>从双端队列中取出call，如果是<code>AsyncCall</code>就执行<code>promoteCalls()</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  在&lt;a href=&quot;https://segmentfault.com/a/1190000008786828&quot;&gt;OkHttp3学习(一)：基本使用&lt;/a&gt;中记录了怎么使用&lt;code&gt;OkHttp&lt;/code&gt;设置一个指定的请求，我们请求的参数有了，之后我们就是发起请求了。那么&lt;code&gt;OkHttp3&lt;/code&gt;又是怎么发起的这次请求呢？&lt;/p&gt;
&lt;p&gt;先看下之前的一个&lt;code&gt;GET&lt;/code&gt;请求&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;OkHttpClient client = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OkHttpClient();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       Request request = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Request.Builder()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               .get()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               .url(PATH)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               .build();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       client.newCall(request).enqueue(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Callback() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onFailure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Call call, IOException e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onResponse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Call call, Response response)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (response.isSuccessful()) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   String string = response.body().string();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                   Log.i(TAG, &lt;span class=&quot;string&quot;&gt;&quot;onResponse: &quot;&lt;/span&gt;+string);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这次请求中我们设置好&lt;code&gt;Request&lt;/code&gt;请求的相关参数之后，我们就调用了。&lt;code&gt;client.newCall(request)&lt;/code&gt;。从字面意思猜测这个&lt;code&gt;newCall&lt;/code&gt;就是在创建一次新的请求。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="OkHttp3" scheme="http://m.magicer.xyz/tags/OkHttp3/"/>
    
  </entry>
  
  <entry>
    <title>OkHttp3学习(一)：基本使用</title>
    <link href="http://m.magicer.xyz/2017/03/okhttp3-basic-1/"/>
    <id>http://m.magicer.xyz/2017/03/okhttp3-basic-1/</id>
    <published>2017-03-22T12:56:22.000Z</published>
    <updated>2017-03-23T16:08:09.393Z</updated>
    
    <content type="html"><![CDATA[<p><strong>An HTTP &amp; HTTP/2 client for Android and Java applications</strong><br>引用自<a href="http://square.github.io/okhttp/" target="_blank" rel="external">官方文档</a></p>
<a id="more"></a>
<h2 id="GET-amp-amp-POST"><a href="#GET-amp-amp-POST" class="headerlink" title="GET &amp;&amp; POST"></a>GET &amp;&amp; POST</h2><p>什么都不管，先上个代码。敲完再说。</p>
<h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">        .get()</div><div class="line">        .url(PATH)</div><div class="line">        .build();</div><div class="line">client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (response.isSuccessful()) &#123;</div><div class="line">            String string = response.body().string();</div><div class="line">            Log.i(TAG, <span class="string">"onResponse: "</span>+string);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="/image/Android/okhttp3/okhttp3_2.png" alt="clipboard.png"></p>
<p>上面的图中显示了<code>response.body()</code>可以得到的数据类型。在上面的例子中我们使用了<code>string()</code>来得到了相应的字符串数据。<br><strong>需要注意的是这里的回调不在主线程.</strong>如果需要更新UI。我们还需要切换到主线程进行操作。</p>
<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>这是一个异步调用的例子。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">MediaType jsonType = MediaType.parse(<span class="string">"application/json; charset=utf-8"</span>);</div><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">String jsonStr = <span class="keyword">new</span> Gson().toJson(mPerson);</div><div class="line">RequestBody body = RequestBody.create(jsonType,jsonStr);</div><div class="line">Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">        .post(body)</div><div class="line">        .url(PATH)</div><div class="line">        .build();</div><div class="line">client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">       <span class="keyword">if</span> (response.isSuccessful())&#123;</div><div class="line">           String string = response.body().string();</div><div class="line">           Log.i(TAG, <span class="string">"post: "</span>+string);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="请求大致过程"><a href="#请求大致过程" class="headerlink" title="请求大致过程"></a>请求大致过程</h2><p>  我们每次做请求的时候都要有一个<code>OkHttpClient</code>实体，用来构建我们的一次请求。而<code>Request</code>类用来设置我们请求需要的参数，之后我们就可以通过<code>client</code>来发送一个请求了。在上面的例子中，我们将请求加入到了一个请求队列中<code>(enqueue)</code>。最后我们就得到了这次请求的响应<code>response</code>了。</p>
<h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>在构建<code>Request</code>的时候，使用到了<code>Builder</code>设计模式。只需要简单的链式调用配置好请求参数。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Request request = <span class="keyword">new</span> Request.Builder().url(PATH)</div><div class="line">                .header(<span class="string">"User-Agent"</span>, <span class="string">"my-agent"</span>)</div><div class="line">                .addHeader(<span class="string">"Accept-Language"</span>, <span class="string">"zh-cn"</span>)</div><div class="line">                .get()</div><div class="line">                .build();</div></pre></td></tr></table></figure></p>
<h3 id="header-amp-amp-addHeader"><a href="#header-amp-amp-addHeader" class="headerlink" title="header &amp;&amp; addHeader"></a>header &amp;&amp; addHeader</h3><p><code>header</code>和<code>addHeader</code>用来添加头部字段的<code>key-value</code>对。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Sets the header named &#123;<span class="doctag">@code</span> name&#125; to &#123;<span class="doctag">@code</span> value&#125;. If this request already has any headers</div><div class="line"> * with that name, they are all replaced.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">header</span><span class="params">(String name, String value)</span> </span>&#123;</div><div class="line">  headers.set(name, value);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Adds a header with &#123;<span class="doctag">@code</span> name&#125; and &#123;<span class="doctag">@code</span> value&#125;. Prefer this method for multiply-valued</div><div class="line"> * headers like "Cookie".</div><div class="line"> *</div><div class="line"> * &lt;p&gt;Note that for some headers including &#123;<span class="doctag">@code</span> Content-Length&#125; and &#123;<span class="doctag">@code</span> Content-Encoding&#125;,</div><div class="line"> * OkHttp may replace &#123;<span class="doctag">@code</span> value&#125; with a header derived from the request body.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">addHeader</span><span class="params">(String name, String value)</span> </span>&#123;</div><div class="line">  headers.add(name, value);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们看到，这两个函数底层一个是使用的<code>Header.Builder</code>的<code>set()</code>，一个是使用的<code>add()</code>.在继续往里看：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Set a field with the specified value. If the field is not found, it is added. If the field is</div><div class="line">    * found, the existing values are replaced.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> Builder <span class="title">set</span><span class="params">(String name, String value)</span> </span>&#123;</div><div class="line">     checkNameAndValue(name, value);</div><div class="line">     removeAll(name);</div><div class="line">     addLenient(name, value);</div><div class="line">     <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">     <span class="comment">/** Add a field with the specified value. */</span></div><div class="line">   <span class="function"><span class="keyword">public</span> Builder <span class="title">add</span><span class="params">(String name, String value)</span> </span>&#123;</div><div class="line">     checkNameAndValue(name, value);</div><div class="line">     <span class="keyword">return</span> addLenient(name, value);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这就很清晰了。很明显了。<code>set()</code>调用了<code>removeAll(key)</code>方法来删除之前设置了同名的key。而<code>add</code>并没有删除。其实从名字我们就可以看出来。<code>add</code>就是添加嘛。<code>set</code>设置，肯定只有一个嘛。</p>
<h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="RequestBody"></a>RequestBody</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client =<span class="keyword">new</span> OkHttpClient();</div><div class="line">MediaType parse = MediaType.parse(<span class="string">"application/json; charset=utf-8"</span>);</div><div class="line">RequestBody body = RequestBody.create(parse,<span class="keyword">new</span> Gson().toJson(mPerson));</div><div class="line">Request request = <span class="keyword">new</span> Request.Builder().url(PATH)</div><div class="line">        .header(<span class="string">"User-Agent"</span>, <span class="string">"my-agent"</span>)</div><div class="line">        .addHeader(<span class="string">"Accept-Language"</span>, <span class="string">"zh-cn"</span>)</div><div class="line">        .post(body)</div><div class="line">        .build();</div><div class="line">client.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>将上面的请求通过抓包工具抓取后，下图即为本次的请求。<br><img src="/image/Android/okhttp3/okhttp3_3.png" alt="clipboard.png"></p>
<p><code>ResponseBody</code>是一个抽象类。在<code>okhttp</code>中的子类有<code>FormBody</code>和<code>MultipartBody</code>。 我们可以通过静态方法<code>create</code>来构建一个<code>ResponseBody</code>。</p>
<p><img src="/image/Android/okhttp3/okhttp3_4.png" alt="clipboard.png"></p>
<p><code>ResponseBody</code>内部的<code>create</code>可以通过三中方式构建。当然了。我们也可以模仿官方的<code>crete</code>方法来构建自己的<br><code>ResponseBody</code>来上传制定类型的文件。<br>我们通过<code>MediaType</code>来指定我们上传文件的类型。比如上面代码中的<code>&quot;application/json; charset=utf-8&quot;</code>就是我们上传的内容的类型。<br>当我们有什么文件想要提交，但是不知道<code>key</code>是什么的时候可以看MIME 参考手册</p>
<h3 id="FormBody"><a href="#FormBody" class="headerlink" title="FormBody"></a>FormBody</h3><p>  用来提交一些表单数据。通过<code>FormBody.Builder</code>来添加表单数据。如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">FormBody formBody = <span class="keyword">new</span> FormBody.Builder()</div><div class="line">        .add(<span class="string">"username"</span>, <span class="string">"jason"</span>)</div><div class="line">        .add(<span class="string">"password"</span>, <span class="string">"magicer"</span>)</div><div class="line">        .build();</div><div class="line">Request request = <span class="keyword">new</span> Request.Builder()</div><div class="line">        .post(formBody)</div><div class="line">        .addHeader(<span class="string">"User-Agent"</span>, <span class="string">"Apple"</span>)</div><div class="line">        .build();</div><div class="line">Response response = client.newCall(request).execute();</div></pre></td></tr></table></figure></p>
<p>在<code>FromBody</code>中，查看其源码我们可以看到<code>FormBody</code>设置的<code>Content-Type</code>为<code>&quot;application/x-www-form-urlencoded&quot;</code>.也就是普通表单数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType CONTENT_TYPE =</div><div class="line">      MediaType.parse(<span class="string">"application/x-www-form-urlencoded"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="MultipartBody"><a href="#MultipartBody" class="headerlink" title="MultipartBody"></a>MultipartBody</h3><p>  以下是<code>MultipartBody</code>中的一些个类型。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType MIXED = MediaType.parse(<span class="string">"multipart/mixed"</span>);</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType ALTERNATIVE = MediaType.parse(<span class="string">"multipart/alternative"</span>);</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType DIGEST = MediaType.parse(<span class="string">"multipart/digest"</span>);</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType PARALLEL = MediaType.parse(<span class="string">"multipart/parallel"</span>);</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType FORM = MediaType.parse(<span class="string">"multipart/form-data"</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;An HTTP &amp;amp; HTTP/2 client for Android and Java applications&lt;/strong&gt;&lt;br&gt;引用自&lt;a href=&quot;http://square.github.io/okhttp/&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="OkHttp3" scheme="http://m.magicer.xyz/tags/OkHttp3/"/>
    
  </entry>
  
  <entry>
    <title>Android EditText禁止输入Emoji后设置android:maxLength失效的问题</title>
    <link href="http://m.magicer.xyz/2017/03/android-edittext-emoji/"/>
    <id>http://m.magicer.xyz/2017/03/android-edittext-emoji/</id>
    <published>2017-03-11T16:51:44.000Z</published>
    <updated>2017-06-03T05:28:35.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0X00-禁用emoji"><a href="#0X00-禁用emoji" class="headerlink" title="0X00 禁用emoji"></a>0X00 禁用emoji</h2><p>有时候我们不想在<code>EditText</code>中输入Emoji表情，怎么处理呢？<br>我们可以通过设置<code>InputFilter</code>的方式来达到这个目的。怎么实现呢？直接上代码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> InputFilter emojiFilter = <span class="keyword">new</span> InputFilter() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> CharSequence <span class="title">filter</span><span class="params">(CharSequence source, <span class="keyword">int</span> start, <span class="keyword">int</span> end, Spanned dest, <span class="keyword">int</span> dstart, <span class="keyword">int</span> dend)</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = start; index &lt; end; index++) &#123;</div><div class="line"></div><div class="line">                <span class="keyword">int</span> type = Character.getType(source.charAt(index));</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (type == Character.SURROGATE) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<h2 id="0X01-问题"><a href="#0X01-问题" class="headerlink" title="0X01 问题"></a>0X01 问题</h2><p>但是当我们设置了<code>InputFilter</code>之后可能会出现一个问题，就是当我们在代码中设置<code>android:maxLength=&quot;8&quot;</code>的时候，会发现不起作用了。我们点进去<code>InputFilter</code>，查看其源码我们就会发现，里面还有个自带的<code>LengthFilter</code>。我们就可以通过再添加一个<code>LengthFileter</code>就可以了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">editText.setFilters(<span class="keyword">new</span> InputFilter[]&#123;<span class="keyword">new</span> InputFilter.LengthFilter(<span class="number">8</span>), emojiFilter&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0X00-禁用emoji&quot;&gt;&lt;a href=&quot;#0X00-禁用emoji&quot; class=&quot;headerlink&quot; title=&quot;0X00 禁用emoji&quot;&gt;&lt;/a&gt;0X00 禁用emoji&lt;/h2&gt;&lt;p&gt;有时候我们不想在&lt;code&gt;EditText&lt;/code&gt;中
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="emoji" scheme="http://m.magicer.xyz/tags/emoji/"/>
    
      <category term="EditText" scheme="http://m.magicer.xyz/tags/EditText/"/>
    
  </entry>
  
  <entry>
    <title>NoClassDefFoundError: android/os/PersistableBundle</title>
    <link href="http://m.magicer.xyz/2017/03/eventbus-NOClassDefFoundError/"/>
    <id>http://m.magicer.xyz/2017/03/eventbus-NOClassDefFoundError/</id>
    <published>2017-03-06T15:35:27.000Z</published>
    <updated>2017-06-03T05:40:58.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h2><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>之前程序运行的好好的。但是测试拿去了之后就是崩了。查看了下日志。原来是报<code>EventBus</code>的一个错误。在这里记录下。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.NoClassDefFoundError: android/os/PersistableBundle</div></pre></td></tr></table></figure></p>
<p>在网上搜索了下说是我<code>OnCreate</code>写错了。查看了一下。改成了<code>protected</code>的就可以了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="报错的OnCreate"><a href="#报错的OnCreate" class="headerlink" title="报错的OnCreate"></a>报错的OnCreate</h2><pre><code class="java"><span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState, PersistableBundle persistentState)</span> </span>{
        <span class="keyword">super</span>.onCreate(savedInstanceState, persistentState);
    }
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;EventBus&quot;&gt;&lt;a href=&quot;#EventBus&quot; class=&quot;headerlink&quot; title=&quot;EventBus&quot;&gt;&lt;/a&gt;EventBus&lt;/h2&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;之前程序运行的好好的。但是测试拿去了之后就是崩了。查看了下日志。原来是报&lt;code&gt;EventBus&lt;/code&gt;的一个错误。在这里记录下。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="eventbus" scheme="http://m.magicer.xyz/tags/eventbus/"/>
    
  </entry>
  
  <entry>
    <title>学习计划</title>
    <link href="http://m.magicer.xyz/2017/03/task/"/>
    <id>http://m.magicer.xyz/2017/03/task/</id>
    <published>2017-03-05T15:23:28.000Z</published>
    <updated>2017-04-05T13:39:59.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017年"><a href="#2017年" class="headerlink" title="2017年"></a>2017年</h2><p> <input type="checkbox" value="checkbox" checked="checked"> &nbsp;  <br></p>
<p> <input name="checkbox" type="checkbox" value="checkbox"> &nbsp; Golang基本语法<br><br> <input type="checkbox" value="checkbox"> &nbsp;  beego <br><br> <input type="checkbox" value="checkbox"> &nbsp; 用go搭建个服务器 <br><br> <input type="checkbox" value="checkbox"> &nbsp;  设计模式<br><br> <input type="checkbox" value="checkbox"> &nbsp; RxJava <br><br> <input type="checkbox" value="checkbox"> &nbsp; OkHttp 源码<br><br> <input type="checkbox" value="checkbox"> &nbsp;  各类自定义View<br><br> <input type="checkbox" value="checkbox"> &nbsp; 动画特效的实现 <br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2017年&quot;&gt;&lt;a href=&quot;#2017年&quot; class=&quot;headerlink&quot; title=&quot;2017年&quot;&gt;&lt;/a&gt;2017年&lt;/h2&gt;&lt;p&gt; &lt;input type=&quot;checkbox&quot; value=&quot;checkbox&quot; checked=&quot;checked&quot;
    
    </summary>
    
      <category term="Other" scheme="http://m.magicer.xyz/categories/Other/"/>
    
    
      <category term="task" scheme="http://m.magicer.xyz/tags/task/"/>
    
  </entry>
  
  <entry>
    <title>一个Android程序猿的Golang学习之路: 结构体和方法</title>
    <link href="http://m.magicer.xyz/2017/03/golang-struct-basic/"/>
    <id>http://m.magicer.xyz/2017/03/golang-struct-basic/</id>
    <published>2017-03-04T15:41:05.000Z</published>
    <updated>2017-06-03T05:41:08.356Z</updated>
    
    <content type="html"><![CDATA[<p><code>Golang</code>中的<code>struct</code>有点跟<code>Java</code>中的类相似.<a id="more"></a></p>
<h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><p>管他什么特性不特性的,先来段代码.看看跟学过的其他语言有啥区别.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">)</div><div class="line"></div><div class="line">type Person struct &#123;</div><div class="line">    name string</div><div class="line">    age  int</div><div class="line">&#125;</div><div class="line">type Student struct &#123;</div><div class="line">    grade  string</div><div class="line">    Person //匿名字段</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    stu := new(Student)</div><div class="line">    var stu2 Student = Student&#123;&quot;一年级&quot;, Person&#123;&quot;Arya Stark&quot;, 15&#125;&#125;</div><div class="line">    stu3 := Student&#123;grade: &quot;二年级&quot;, Person: Person&#123;&quot;Magicer&quot;, 32&#125;&#125;</div><div class="line">    stu.grade = &quot;三年级&quot;</div><div class="line">    stu.Person = Person&#123;&quot;Jon Snow&quot;, 33&#125;</div><div class="line">    fmt.Println(stu) //输出  &amp;&#123;三年级 &#123;Jon Snow 33&#125;&#125;</div><div class="line">    //在这里可以直接stu.name获得匿名字段的值,也可以stu.Person.name</div><div class="line">    fmt.Println(stu.name, stu.age, stu.grade, stu.Person) //输出Jon Snow 33 三年级 &#123;Jon Snow 33&#125;</div><div class="line">    fmt.Println(stu2)                                     //输出   &#123;一年级 &#123;Arya Stark 15&#125;&#125;</div><div class="line">    fmt.Println(stu3)                                     //输出   &#123;二年级 &#123;Magicer 32&#125;&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Golang</code>中没有继承,但是我们可以使用组合的方式来实现和继承类似的效果.比如上面的代码.我们不能通过显示的让<code>Student</code>继承自<code>Person</code>但是我们可以通过组合的方式来得到这种效果.</p>
<h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p>我们可以通过type关键字来定义一个类型.比如这里的<code>Person</code>类型和<code>Student</code>类型.我们还可以通过<code>type</code>关键字来为<code>int</code>等来设置别名 如<code>type grade int</code>.通过type关键字来定义的</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>先来段跟方法有关的代码,看下<code>Golang</code>中的方法是个什么鬼.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">)</div><div class="line"></div><div class="line">type Student struct &#123;</div><div class="line">    name string</div><div class="line">    age  int</div><div class="line">&#125;</div><div class="line"></div><div class="line">//值方法</div><div class="line">//当我们不需要在方法中使用这个结构的值的时候, 可以使用_</div><div class="line">func (_ Student) lean() &#123;</div><div class="line">    fmt.Println(&quot;Student lean&quot;)</div><div class="line">&#125; //指针方法</div><div class="line">//这里的(stu *Student)用来表示这个方法是属于谁的.可以位于不同的文件中,只要是在同一个包中就可以</div><div class="line">//在这里我们的stu是Student的指针,只有这时候我们才可以修改p的值,</div><div class="line">// 当使用(stu Student)时,我们使用的是一份copy.</div><div class="line">func (stu *Student) eat(food string) &#123;</div><div class="line">    fmt.Println(stu.name, &quot; eat &quot;, food, &quot;\t &quot;, stu)</div><div class="line">&#125;</div><div class="line">func main() &#123;</div><div class="line">    stu := new(Student)</div><div class="line">    stu.eat(&quot;Apple&quot;) //student eat  Apple     &amp;&#123; 0&#125;</div><div class="line">    stu.lean()       // Student lean</div><div class="line"></div><div class="line">    var stu2 Student = Student&#123;&quot;Jason&quot;, 22&#125;</div><div class="line">    fmt.Println(stu2) //&#123;Jason 22&#125;</div><div class="line">    stu2.eat(&quot;Apple&quot;) //Jason  eat  Apple     &amp;&#123;Jason 22&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们看到上面<code>Student</code>中的<code>name</code>和<code>age</code>字段都是非导出字段.那么如果我们要在不同的包中对其的值进行修改怎么办呢?<br>这个时候我们就可以写上跟<code>Java</code>中<code>setter</code>和<code>getter</code>方法.如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">func (stu *Student) setName(name string) &#123;</div><div class="line">    stu.name = name</div><div class="line">&#125;</div><div class="line">func (stu *Student) getName() string &#123;</div><div class="line">    return stu.name</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一个<code>Golang</code>初学者,记录的东西难免有错误,还望多多指出啊.谢谢.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Golang&lt;/code&gt;中的&lt;code&gt;struct&lt;/code&gt;有点跟&lt;code&gt;Java&lt;/code&gt;中的类相似.
    
    </summary>
    
      <category term="Golang" scheme="http://m.magicer.xyz/categories/Golang/"/>
    
    
      <category term="struct" scheme="http://m.magicer.xyz/tags/struct/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下搭建Golang开发环境</title>
    <link href="http://m.magicer.xyz/2017/03/lets-go-env/"/>
    <id>http://m.magicer.xyz/2017/03/lets-go-env/</id>
    <published>2017-03-03T15:06:30.000Z</published>
    <updated>2017-06-03T05:34:24.816Z</updated>
    
    <content type="html"><![CDATA[<p>一个android程序猿的Go之旅!<a id="more"></a></p>
<p>##Ubuntu开发环境下</p>
<p><a href="https://golang.org/dl/" target="_blank" rel="external">下载地址 </a></p>
<p>之后进入到下载目录后运行如下命令解压下载的go开发包到 <code>/usr/local</code>。官方推荐的目录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -C /usr/local -xzf go1.8.linux-amd64.tar.gz</div></pre></td></tr></table></figure></p>
<h2 id="配置变量"><a href="#配置变量" class="headerlink" title="配置变量"></a>配置变量</h2><p>打开<code>/etc/profile</code>或者<code>$HOME/.profile</code>文件，加入如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=$PATH:/usr/local/go/bin</div></pre></td></tr></table></figure></p>
<p>自定义安装目录时：GoROOT为自定义的安装目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export GOROOT=$HOME/go1.X</div><div class="line">export PATH=$PATH:$GOROOT/bin</div></pre></td></tr></table></figure></p>
<p>打开终端，运行<code>go env</code>看有没有输出环境信息。有则配置成功</p>
<h2 id="安装sublime"><a href="#安装sublime" class="headerlink" title="安装sublime"></a>安装sublime</h2><p><a href="https://www.sublimetext.com/" target="_blank" rel="external">进入官网下载</a><br>ctrl+` 输入如下内容安装Package Control<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import  urllib.request,os;pf=&apos;Package Control.sublime-package&apos;;ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));open(os.path.join(ipp,pf),&apos;wb&apos;).write(urllib.request.urlopen(&apos;http://sublime.wbond.net/&apos;+pf.replace(&apos; &apos;,&apos;%20&apos;)).read())</div></pre></td></tr></table></figure></p>
<p><a href="http://blog.magicer.xyz/2015/04/sublime-text2/" target="_blank" rel="external">Sublime安装</a><br><a href="http://blog.magicer.xyz/2015/04/sublime-chinese/" target="_blank" rel="external">sublime输入中文</a></p>
<h2 id="安装GoSublime插件"><a href="#安装GoSublime插件" class="headerlink" title="安装GoSublime插件"></a>安装GoSublime插件</h2><p>安装完<code>GoSublime</code>之后可能会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MarGo: Missing required environment variables: GOPATH</div></pre></td></tr></table></figure></p>
<p>这是因为配置的问题。打开<code>GoSublime</code>的配置文件。<br>输入上面配置的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;env&quot;: </div><div class="line">    &#123; </div><div class="line">        &quot;GOPATH&quot;: &quot;$HOME/golang&quot;,</div><div class="line">        &quot;GOROOT&quot;: &quot;GOROOT=$HOME/go1.X&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line">import &quot;runtime&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    fmt.Printf(&quot;format %s&quot;, runtime.Version())</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用<code>Sublime</code>按<code>Ctrl+B</code>运行下程序看下输出。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个android程序猿的Go之旅!
    
    </summary>
    
      <category term="Golang" scheme="http://m.magicer.xyz/categories/Golang/"/>
    
    
      <category term="golang" scheme="http://m.magicer.xyz/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>RxJava 过滤操作符</title>
    <link href="http://m.magicer.xyz/2017/02/rxjava-fliter-operator/"/>
    <id>http://m.magicer.xyz/2017/02/rxjava-fliter-operator/</id>
    <published>2017-02-28T14:45:50.000Z</published>
    <updated>2017-03-23T16:03:30.245Z</updated>
    
    <content type="html"><![CDATA[<p>#过滤操作<br>我觉得对于过滤操作看下面这个图就够了。之后就是熟悉使用多敲敲吧。<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Filtering-Observables.html" target="_blank" rel="external">详细看着里</a></p>
<p><img src="/image/Android/rxjava/filter.png" alt="图片描述"><br><a id="more"></a><br><a href="##filter">filter( )</a> — 过滤数据<br><a href="##take">take</a> 只发射前面的N项数据</p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>Filter操作符使用你指定的一个谓词函数测试数据项，只有通过测试的数据才会被发射。<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Filter.html" target="_blank" rel="external">filter( )</a> — 过滤数据</p>
<p><img src="http://reactivex.io/documentation/operators/images/filter.png" alt="filter"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>)</div><div class="line">               .filter(<span class="keyword">new</span> Func1&lt;Integer, Boolean&gt;() &#123;</div><div class="line">                   <span class="meta">@Override</span></div><div class="line">                   <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                       <span class="keyword">return</span> integer%<span class="number">2</span> ==<span class="number">0</span>;</div><div class="line">                   &#125;</div><div class="line">               &#125;).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">               Log.i(TAG, <span class="string">"call: "</span>+integer);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<p>##ofType</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ofType</span></div><div class="line"><span class="comment">//ofType是filter操作符的一个特殊形式。它过滤一个Observable只返回指定类型的数据。</span></div><div class="line"><span class="comment">//ofType默认不在任何特定的调度器上指定。</span></div><div class="line">Observable.just(<span class="number">1</span>,<span class="string">"Arya Stark"</span>,<span class="number">3</span>,<span class="string">"jon snow"</span>,<span class="number">5</span>,<span class="string">"Tyrion"</span>,<span class="number">7</span>)</div><div class="line">        .ofType(String.class)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.i(TAG, <span class="string">"call: "</span>+s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h2 id="take"><a href="#take" class="headerlink" title="take"></a>take</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Take.html" target="_blank" rel="external">take</a> 只发射前面的N项数据</p>
<p><img src="http://reactivex.io/documentation/operators/images/take.png" alt="take"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String[] strs = &#123;<span class="string">"Arya Stark"</span>,<span class="string">"jon snow"</span>,<span class="string">"Tyrion"</span>&#125;;</div><div class="line">       Observable.from(strs)</div><div class="line">               .take(<span class="number">2</span>)</div><div class="line">               .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">                   <span class="meta">@Override</span></div><div class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                       Log.i(TAG, <span class="string">"call: "</span>+s);</div><div class="line">                   &#125;</div><div class="line">               &#125;);</div></pre></td></tr></table></figure>
<h2 id="takelast"><a href="#takelast" class="headerlink" title="takelast"></a>takelast</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/TakeLast.html" target="_blank" rel="external">takelast</a>发射Observable发射的最后N项数据</p>
<p><img src="http://reactivex.io/documentation/operators/images/takeLast.n.png" alt="takelast"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String[] strs = &#123;<span class="string">"Arya Stark"</span>,<span class="string">"jon snow"</span>,<span class="string">"Tyrion"</span>&#125;;</div><div class="line">        Observable.from(strs)</div><div class="line">                .takeLast(<span class="number">2</span>)</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                        Log.i(TAG, <span class="string">"call: "</span>+s);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure></p>
<p>##last<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Last.html" target="_blank" rel="external">last</a>只发射最后一项（或者满足某个条件的最后一项）数据<br><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/last.c.png" alt="last"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String[] strs = &#123;<span class="string">"Arya Stark"</span>,<span class="string">"jon snow"</span>,<span class="string">"Tyrion"</span>&#125;;</div><div class="line">      Observable.from(strs).last()</div><div class="line">              .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">                  <span class="meta">@Override</span></div><div class="line">                  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                      Log.i(TAG, <span class="string">"call: "</span>+s);</div><div class="line">                  &#125;</div><div class="line">              &#125;);</div></pre></td></tr></table></figure></p>
<p>##skip<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Skip.html" target="_blank" rel="external">skip</a>抑制Observable发射的前N项数据<br><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/skip.c.png" alt="skip"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div><div class="line">                .skip(<span class="number">2</span>)</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                        Log.i(TAG, <span class="string">"call: "</span>+integer);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure></p>
<p>##skiplast<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/SkipLast.html" target="_blank" rel="external">skiplast</a>//抑制Observable发射的后N项数据<br><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/skipLast.c.png" alt="skiplast"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div><div class="line">               .skipLast(<span class="number">2</span>)</div><div class="line">               .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">                   <span class="meta">@Override</span></div><div class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                       Log.i(TAG, <span class="string">"call: "</span>+integer);</div><div class="line">                   &#125;</div><div class="line">               &#125;);</div></pre></td></tr></table></figure>
<p>##distinct<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Distinct.html" target="_blank" rel="external">distinct</a>抑制（过滤掉）重复的数据项<br><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/distinct.c.png" alt="distinct"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">                .distinct()</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                        Log.i(TAG, <span class="string">"call: "</span>+integer);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<p>##debounce<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Debounce.html" target="_blank" rel="external">debounce</a>仅在过了一段指定的时间还没发射数据时才发射一个数据<br><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/debounce.png" alt="debounce"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)</div><div class="line">                .debounce(<span class="number">2</span>,TimeUnit.SECONDS)</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                        Log.i(TAG, <span class="string">"call: "</span>+integer);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<p>##elementAt<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/ElementAt.html" target="_blank" rel="external">elementat</a>只发射第N项数据<br><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/elementAt.c.png" alt="elementat"><br>RxJava将这个操作符实现为elementAt，给它传递一个基于0的索引值，它会发射原始Observable数据序列对应索引位置的值，如果你传递给elementAt的值为5，那么它会发射第六项的数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">                .elementAt(<span class="number">2</span>)</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                        Log.i(TAG, <span class="string">"call: "</span>+integer);</div><div class="line">                    &#125;</div><div class="line">                &#125;); <span class="comment">//输出3</span></div></pre></td></tr></table></figure>
<p>##sample<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Sample.html" target="_blank" rel="external">sample</a>定期发射Observable最近发射的数据项<br><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/operators/sample.png" alt="sample"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.interval(<span class="number">1</span>,TimeUnit.SECONDS)</div><div class="line">                .sample(<span class="number">5</span>,TimeUnit.SECONDS)</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;Long&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                        Log.i(TAG, <span class="string">"call: "</span>+aLong);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<p>##ignoreElements<br>不发射任何数据，只发射Observable的终止通知</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#过滤操作&lt;br&gt;我觉得对于过滤操作看下面这个图就够了。之后就是熟悉使用多敲敲吧。&lt;br&gt;&lt;a href=&quot;https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Filtering-Observables.html&quot;&gt;详细看着里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/Android/rxjava/filter.png&quot; alt=&quot;图片描述&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://m.magicer.xyz/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava 变换操作符</title>
    <link href="http://m.magicer.xyz/2017/02/rxjava-transform-operator/"/>
    <id>http://m.magicer.xyz/2017/02/rxjava-transform-operator/</id>
    <published>2017-02-27T14:37:29.000Z</published>
    <updated>2017-06-03T05:40:21.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变换操作"><a href="#变换操作" class="headerlink" title="变换操作"></a>变换操作</h2><p>摘抄自<a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Transforming-Observables.html" target="_blank" rel="external">Reactive X文档中文翻译</a></p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Map.html" target="_blank" rel="external">map</a> 对序列的每一项都应用一个函数来变换Observable发射的数据序列</p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/FlatMap.html" target="_blank" rel="external">flatmap</a> 将Observable发射的数据集合变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable<br>javajavajavajavajavajava<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Scan.html" target="_blank" rel="external">scan</a> 对Observable发射的每一项数据应用一个函数，然后按顺序依次发射每一个值   </p>
<p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/GroupBy.html" target="_blank" rel="external">groupBy</a> 将Observable分拆为Observable集合，将原始Observable发射的数据按Key分组，每一个Observable发射一组不同的数据</p>
<p>[buffer][5 ?<br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Window.html" target="_blank" rel="external">window</a> 定期将来自Observable的数据分拆成一些Observable窗口，然后发射这些窗口，而不是每次发射一项<br><a id="more"></a></p>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Map.html" target="_blank" rel="external">map</a> 对序列的每一项都应用一个函数来变换Observable发射的数据序列</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//比如将每个字符串拼接上 \n from magicer</span></div><div class="line">        String[] str = &#123;<span class="string">"winter is coming"</span>,<span class="string">"the king in the north"</span>&#125;;</div><div class="line">        Observable.from(str).map(<span class="keyword">new</span> Func1&lt;String, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> s+<span class="string">"\n from magicer"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.i(TAG, <span class="string">"call: "</span>+s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="flatmap"><a href="#flatmap" class="headerlink" title="flatmap"></a>flatmap</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/FlatMap.html" target="_blank" rel="external">flatmap</a> 将Observable发射的数据集合变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这里的nickName是个List&lt;String&gt;</span></div><div class="line">   Observable.from(mStudents).flatMap(<span class="keyword">new</span> Func1&lt;Student, Observable&lt;String&gt;&gt;() &#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</div><div class="line">           <span class="keyword">return</span> Observable.from(student.getNickNames());</div><div class="line">       &#125;</div><div class="line">   &#125;).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">           Log.i(TAG, <span class="string">"call: "</span>+s);</div><div class="line">       &#125;</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<h2 id="scan"><a href="#scan" class="headerlink" title="scan"></a>scan</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Scan.html" target="_blank" rel="external">scan</a> 对Observable发射的每一项数据应用一个函数，然后按顺序依次发射每一个值</p>
<p><img src="http://reactivex.io/documentation/operators/images/scan.png" alt="scan"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).scan(<span class="keyword">new</span> Func2&lt;Integer, Integer, Integer&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer, Integer integer2)</span> </span>&#123;</div><div class="line">               <span class="keyword">return</span> integer+integer2;</div><div class="line">           &#125;</div><div class="line">       &#125;).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">               Log.i(TAG, <span class="string">"call: "</span>+integer);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<h2 id="groupby"><a href="#groupby" class="headerlink" title="groupby"></a>groupby</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/GroupBy.html" target="_blank" rel="external">groupBy</a> 将Observable分拆为Observable集合，将原始Observable发射的数据按Key分组，每一个Observable发射一组不同的数据</p>
<p><img src="http://reactivex.io/documentation/operators/images/groupBy.c.png" alt="groupby"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS).groupBy(<span class="keyword">new</span> Func1&lt;Long, Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Long <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> aLong %<span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Action1&lt;GroupedObservable&lt;Long, Long&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(<span class="keyword">final</span> GroupedObservable&lt;Long, Long&gt; result)</span> </span>&#123;</div><div class="line">                result.subscribe(<span class="keyword">new</span> Action1&lt;Long&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                         Log.i(TAG, <span class="string">"groupby call: "</span>+aLong+<span class="string">" getKey:"</span>+result.getKey());</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h2 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Buffer.html" target="_blank" rel="external">buffer</a> 它定期从Observable收集数据到一个集合，然后把这些数据集合打包发射，而不是一次发射一个<br><img src="http://reactivex.io/documentation/operators/images/mergeMap.png" alt="buffer"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.interval(<span class="number">1</span>,TimeUnit.SECONDS)</div><div class="line">                .buffer(<span class="number">3</span>,TimeUnit.SECONDS)</div><div class="line">                .subscribe(<span class="keyword">new</span> Action1&lt;List&lt;Long&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(List&lt;Long&gt; longs)</span> </span>&#123;</div><div class="line">                        Log.i(TAG, <span class="string">"call: "</span>+longs);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
<h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Window.html" target="_blank" rel="external">window</a> 定期将来自Observable的数据分拆成一些Observable窗口，然后发射这些窗口，而不是每次发射一项<br>Window和Buffer类似，但不是发射来自原始Observable的数据包，它发射的是Observables，这些Observables中的每一个都发射原始Observable数据的一个子集，最后发射一个onCompleted通知。</p>
<p><img src="http://reactivex.io/documentation/operators/images/window5.png" alt="window"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Observable.interval(<span class="number">1</span>,TimeUnit.SECONDS)</div><div class="line">               .window(<span class="number">3</span>,TimeUnit.SECONDS)</div><div class="line">               .subscribe(<span class="keyword">new</span> Action1&lt;Observable&lt;Long&gt;&gt;() &#123;</div><div class="line">                   <span class="meta">@Override</span></div><div class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(<span class="keyword">final</span> Observable&lt;Long&gt; longObservable)</span> </span>&#123;</div><div class="line">                       longObservable.subscribe(<span class="keyword">new</span> Action1&lt;Long&gt;() &#123;</div><div class="line">                           <span class="meta">@Override</span></div><div class="line">                           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                               Log.i(TAG, <span class="string">"call: "</span>+aLong);</div><div class="line">                           &#125;</div><div class="line">                       &#125;);</div><div class="line">                   &#125;</div><div class="line">               &#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变换操作&quot;&gt;&lt;a href=&quot;#变换操作&quot; class=&quot;headerlink&quot; title=&quot;变换操作&quot;&gt;&lt;/a&gt;变换操作&lt;/h2&gt;&lt;p&gt;摘抄自&lt;a href=&quot;https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Transforming-Observables.html&quot;&gt;Reactive X文档中文翻译&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Map.html&quot;&gt;map&lt;/a&gt; 对序列的每一项都应用一个函数来变换Observable发射的数据序列&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mcxiaoke.gitbooks.io/rxdocs/content/operators/FlatMap.html&quot;&gt;flatmap&lt;/a&gt; 将Observable发射的数据集合变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable&lt;br&gt;javajavajavajavajavajava&lt;br&gt;&lt;a href=&quot;https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Scan.html&quot;&gt;scan&lt;/a&gt; 对Observable发射的每一项数据应用一个函数，然后按顺序依次发射每一个值   &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mcxiaoke.gitbooks.io/rxdocs/content/operators/GroupBy.html&quot;&gt;groupBy&lt;/a&gt; 将Observable分拆为Observable集合，将原始Observable发射的数据按Key分组，每一个Observable发射一组不同的数据&lt;/p&gt;
&lt;p&gt;[buffer][5 ?&lt;br&gt;&lt;a href=&quot;https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Window.html&quot;&gt;window&lt;/a&gt; 定期将来自Observable的数据分拆成一些Observable窗口，然后发射这些窗口，而不是每次发射一项&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://m.magicer.xyz/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava Creat操作符</title>
    <link href="http://m.magicer.xyz/2017/02/rxjava-create-operator/"/>
    <id>http://m.magicer.xyz/2017/02/rxjava-create-operator/</id>
    <published>2017-02-25T16:29:06.000Z</published>
    <updated>2017-06-03T05:40:22.572Z</updated>
    
    <content type="html"><![CDATA[<p>RxJava是 ReactiveX 在JVM上的一个实现，ReactiveX使用Observable序列组合异步和基于事件的程序。<a id="more"></a></p>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">抛物线大神的RxJava教程</a></p>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile &apos;io.reactivex:rxjava:1.0.14&apos;</div><div class="line">compile &apos;io.reactivex:rxandroid:1.0.1&apos;</div></pre></td></tr></table></figure>
<h2 id="创建操作符"><a href="#创建操作符" class="headerlink" title="创建操作符"></a>创建操作符</h2><h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Create.html" target="_blank" rel="external">Create操作文档</a></p>
<p>摘要:  你可以使用Create操作符从头开始创建一个Observable，给这个操作符传递一个接受观察者作为参数的函数，编写这个函数让它的行为表现为一个Observable–恰当的调用观察者的onNext，onError和onCompleted方法。</p>
<p>最常用最基础的创建Observable对象的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">               subscriber.onNext(<span class="string">"hello"</span>);</div><div class="line">               subscriber.onNext(<span class="string">"rxjava"</span>);</div><div class="line">               subscriber.onCompleted();</div><div class="line">           &#125;</div><div class="line">       &#125;).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">               Log.i(TAG, <span class="string">"call: "</span>+s);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="from"><a href="#from" class="headerlink" title="from"></a>from</h3><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/From.html" target="_blank" rel="external">from文档</a><br>摘要:  在RxJava中，from操作符可以转换Future、Iterable和数组。对于Iterable和数组，产生的Observable会发射Iterable或数组的每一项数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">String[] strs = &#123;<span class="string">"hello"</span>,<span class="string">"world"</span>,<span class="string">"!"</span>&#125;;</div><div class="line">       <span class="comment">//将一个Iterable, 一个Future, 或者一个数组转换成一个Observable</span></div><div class="line">       <span class="comment">//from默认不在任何特定的调度器上执行。然而你可以将Scheduler</span></div><div class="line">       <span class="comment">// 作为可选的第二个参数传递给Observable，它会在那个调度器上管理这个Future</span></div><div class="line">       Observable.from(strs)</div><div class="line">               .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">                   <span class="meta">@Override</span></div><div class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                       Log.i(TAG, <span class="string">"call: "</span> + s);</div><div class="line">                   &#125;</div><div class="line">               &#125;, <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</div><div class="line">                   <span class="meta">@Override</span></div><div class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">                       Log.i(TAG, <span class="string">"call: "</span> + throwable.toString());</div><div class="line">                   &#125;</div><div class="line">               &#125;, <span class="keyword">new</span> Action0() &#123;</div><div class="line">                   <span class="meta">@Override</span></div><div class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">                       Log.i(TAG, <span class="string">"call: complete"</span>);</div><div class="line">                   &#125;</div><div class="line">               &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="just"><a href="#just" class="headerlink" title="just"></a>just</h3><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Just.html" target="_blank" rel="external">just文档</a><br>摘要: Just将单个数据转换为发射那个数据的Observable。<br>Just类似于From，但是From会将数组或Iterable的数据取出然后逐个发射，而Just只是简单的原样发射，将数组或Iterable当做单个数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                Log.i(TAG, <span class="string">"call: "</span>+integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Range.html" target="_blank" rel="external">range文档</a><br> 摘要: Range操作符发射一个范围内的有序整数序列，你可以指定范围的起始和长度。</p>
<p>RxJava将这个操作符实现为range函数，它接受两个参数，一个是范围的起始值，一个是范围的数据的数目。如果你将第二个参数设为0，将导致Observable不发射任何数据（如果设置为负数，会抛异常）。</p>
<p>range默认不在任何特定的调度器上执行。有一个变体可以通过可选参数指定Scheduler。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">3</span>,<span class="number">4</span>).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">               Log.i(TAG, <span class="string">"call: "</span>+integer); <span class="comment">// 3,4,5,6</span></div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<p>从3开始发送4个Integer</p>
<h3 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h3><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Timer.html" target="_blank" rel="external">timer文档</a><br>创建一个Observable，它在一个给定的延迟后发射一个特殊的值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable.timer(<span class="number">1</span>, TimeUnit.SECONDS).subscribe(<span class="keyword">new</span> Action1&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                Log.i(TAG, <span class="string">"call: "</span>+aLong); <span class="comment">//延时1秒执行</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>创建延时任务，每1秒后发射一次。</p>
<h3 id="interval"><a href="#interval" class="headerlink" title="interval"></a>interval</h3><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Interval.html" target="_blank" rel="external">interval文档</a><br>创建一个按固定时间间隔发射整数序列的Observable<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS).subscribe(<span class="keyword">new</span> Action1&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                Log.i(TAG, <span class="string">"call: "</span>+aLong);<span class="comment">//0，1,2,3,4,5......</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>每隔一秒发送一个Integer数据。</p>
<h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Repeat.html" target="_blank" rel="external">repeat文档</a><br>创建一个发射特定数据重复多次的Observable<br>RxJava将这个操作符实现为repeat方法。它不是创建一个Observable，而是重复发射原始Observable的数据序列，这个序列或者是无限的，或者通过repeat(n)指定重复次数。</p>
<p>repeat操作符默认在trampoline调度器上执行。有一个变体可以通过可选参数指定Scheduler。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">2</span>,<span class="number">3</span>).repeat(<span class="number">2</span>).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                Log.i(TAG, <span class="string">"call: "</span>+integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>重复发射两次Observable对象</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RxJava是 ReactiveX 在JVM上的一个实现，ReactiveX使用Observable序列组合异步和基于事件的程序。
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://m.magicer.xyz/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android Retrofit 2.0的基本使用</title>
    <link href="http://m.magicer.xyz/2017/01/android-retrofit2-basic/"/>
    <id>http://m.magicer.xyz/2017/01/android-retrofit2-basic/</id>
    <published>2017-01-13T15:36:27.000Z</published>
    <updated>2017-03-23T16:05:52.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Retrofit</code>是<code>square</code>公司全家桶中的一员。在okhttp基础上封装的一个网络请求框架。其他废话就不多说了。有几篇不错的文章，可以看一下。<br><a href="https://square.github.io/retrofit/" target="_blank" rel="external">官方介绍</a><br><a href="http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=1117" target="_blank" rel="external">深入浅出 Retrofit，这么牛逼的框架你们还不来看看？</a><br><a href="https://mobupiaobo.gitbooks.io/retrofit-2-0/content/" target="_blank" rel="external">Retrofit2.0</a></p>
<h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.squareup.retrofit2:retrofit:2.1.0&apos;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>我们需要为接口地址定义一个接口，如下。当接口为：<code>http://192.168.0.78:8080/login</code>时，我们可以把接口定义为这样。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginApi</span> </span>&#123;</div><div class="line">    <span class="meta">@FormUrlEncoded</span></div><div class="line">    <span class="meta">@POST</span>(<span class="string">"/login"</span>)</div><div class="line">    <span class="function">Call&lt;ResponseBody&gt; <span class="title">login</span><span class="params">(@Field(<span class="string">"username"</span>)</span>String username, @<span class="title">Field</span><span class="params">(<span class="string">"password"</span>)</span>String password)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在我们想要做网络请求的时候，这样写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">        .baseUrl(<span class="string">"http://192.168.0.78:8080"</span>)</div><div class="line">        .build();</div><div class="line">LoginApi login = retrofit.create(LoginApi.class);</div><div class="line">retrofit2.Call&lt;ResponseBody&gt; data = login.login(username, password);</div><div class="line">data.enqueue(<span class="keyword">new</span> Callback&lt;ResponseBody&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(retrofit2.Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (response.isSuccessful()) &#123;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(retrofit2.Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"retrofit  onFailure: "</span> + t.getLocalizedMessage());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>很明显。<code>@POST</code>表明该请求是<code>POST</code>请求。<code>@Field</code>是提交的表单数据。</p>
<h3 id="各注解含义"><a href="#各注解含义" class="headerlink" title="各注解含义"></a>各注解含义</h3><p>注解都是在定义接口的时候使用的。做网络请求的代码都是一样的。</p>
<h4 id="GET"><a href="#GET" class="headerlink" title="@GET"></a>@GET</h4><p>用来表明请求方式为<code>GET</code>请求。</p>
<h4 id="Path"><a href="#Path" class="headerlink" title="@Path"></a>@Path</h4><p>可以使用在<code>POST</code>和<code>GET</code>请求。<br>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnswerApi</span> </span>&#123;</div><div class="line">    <span class="meta">@GET</span>(<span class="string">"/word/answer/&#123;barrier&#125;/&#123;stage&#125;/&#123;userId&#125;"</span>)</div><div class="line">    <span class="function">Call&lt;ResponseBody&gt; <span class="title">answer</span><span class="params">(@Path(<span class="string">"barrier"</span>)</span><span class="keyword">int</span> barrier,</span></div><div class="line">                                    @<span class="title">Path</span><span class="params">(<span class="string">"stage"</span>)</span><span class="keyword">int</span> stage,</div><div class="line">                                    @<span class="title">Path</span><span class="params">(<span class="string">"userId"</span>)</span>String userId);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="PathMap"><a href="#PathMap" class="headerlink" title="@PathMap"></a>@PathMap</h4><h4 id="Query"><a href="#Query" class="headerlink" title="@Query"></a>@Query</h4><p>可以使用在<code>POST</code>和<code>GET</code>请求。用来配置接口中的参数（<code>?</code>之后的）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuestionsApi</span> </span>&#123;</div><div class="line">    <span class="meta">@GET</span>(<span class="string">"/word/questions"</span>)</div><div class="line">    <span class="function">Call&lt;ResponseBody&gt; <span class="title">getQuections</span><span class="params">(@Query(<span class="string">"wordIds"</span>)</span> String wordIds, @<span class="title">Query</span><span class="params">(<span class="string">"stage"</span>)</span><span class="keyword">int</span> stage)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="QueryMap"><a href="#QueryMap" class="headerlink" title="@QueryMap"></a>@QueryMap</h4><h4 id="some"><a href="#some" class="headerlink" title="some"></a>some</h4><p>看下这个就基本上没问题了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//http://m2.qiushibaike.com/article/list/text?page=1</span></div><div class="line"><span class="comment">//基本使用</span></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"/article/list/text?page=1"</span>)</div><div class="line">    retrofit2.<span class="function">Call&lt;ResponseBody&gt; <span class="title">getData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//动态替换参数，返回解析后的数据</span></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"/article/list/text?"</span>)</div><div class="line">    <span class="function">Call&lt;Bean&gt; <span class="title">getGsonData</span><span class="params">(@Query(<span class="string">"page"</span>)</span> <span class="keyword">int</span> page)</span>;</div><div class="line"></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"/article/list/text?"</span>)</div><div class="line">    <span class="function">Call&lt;Bean&gt; <span class="title">getNetData</span><span class="params">(@QueryMap Map&lt;String,String &gt; map)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"/article/list/&#123;type&#125;?/"</span>)</div><div class="line">    <span class="function">Call&lt;Bean&gt; <span class="title">getDataWithPath</span><span class="params">(@Path(<span class="string">"type"</span>)</span> String type,@<span class="title">Query</span><span class="params">(<span class="string">"page"</span>)</span> <span class="keyword">int</span> page)</span>;</div><div class="line"></div><div class="line">    <span class="meta">@FormUrlEncoded</span> <span class="comment">//POST请求必须添加</span></div><div class="line">    <span class="meta">@POST</span>(<span class="string">"/login?"</span>)</div><div class="line">    <span class="function">Call&lt;ResponseBody&gt; <span class="title">postData</span><span class="params">(@Field(<span class="string">"username"</span>)</span> String username,@<span class="title">Field</span><span class="params">(<span class="string">"pwd"</span>)</span> String passwrod)</span>;</div><div class="line"></div><div class="line">    <span class="meta">@FormUrlEncoded</span></div><div class="line">    <span class="meta">@POST</span>(<span class="string">"/login?"</span>)</div><div class="line">    <span class="function">Call&lt;ResponseBody&gt; <span class="title">postMapData</span><span class="params">(@FieldMap Map&lt;String,String&gt; map)</span></span>;</div></pre></td></tr></table></figure></p>
<h3 id="Body的使用"><a href="#Body的使用" class="headerlink" title="@Body的使用"></a>@Body的使用</h3><p>如下所示，retrofit会把<code>Bean</code>转成json数据进行请求。默认使用的是<code>Gson</code><br>可以参考这里 <a href="http://stackoverflow.com/questions/21398598/how-to-post-raw-whole-json-in-the-body-of-a-retrofit-request" target="_blank" rel="external">链接</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@POST</span>(<span class="string">"/word/records"</span>)</div><div class="line"><span class="function">Call&lt;WordBrowseRecord&gt; <span class="title">postWordRecords</span><span class="params">(@Body Bean bean)</span></span>;</div></pre></td></tr></table></figure>
<p>ps：Gson怎么控制Date型数据的转换格式呢？看下面代码你就明白了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</div><div class="line">        .setDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</div><div class="line">        .create();</div><div class="line"></div><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">        .baseUrl(Constants.HOST)</div><div class="line">        .addConverterFactory(GsonConverterFactory.create(gson))</div><div class="line">        .build();</div></pre></td></tr></table></figure></p>
<h3 id="自定义Client"><a href="#自定义Client" class="headerlink" title="自定义Client"></a>自定义Client</h3><p>在一些情况下我们需要自定义clien，来设置一些请求的参数。那么怎么设置呢？ 直接上代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">  Interceptor interceptor = <span class="keyword">new</span> Interceptor() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="keyword">public</span> okhttp3.<span class="function">Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">          Request request = chain.request()</div><div class="line">                  .newBuilder()</div><div class="line">                  .addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</div><div class="line">                  .addHeader(<span class="string">"Accept-Encoding"</span>, <span class="string">"gzip, deflate"</span>)</div><div class="line">                  .addHeader(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>)</div><div class="line">                  .addHeader(<span class="string">"Accept"</span>, <span class="string">"*/*"</span>)</div><div class="line">                  .addHeader(<span class="string">"Cookie"</span>, <span class="string">"JSESSIONID"</span>)</div><div class="line">                  .build();</div><div class="line">          <span class="keyword">return</span> chain.proceed(request);</div><div class="line">      &#125;</div><div class="line">  &#125;;</div><div class="line">  OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">          .addInterceptor(interceptor)</div><div class="line">          .build();</div><div class="line">          </div><div class="line">          <span class="comment">//之后在使用的时候</span></div><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">          .baseUrl(Constants.HOST)</div><div class="line">          .addConverterFactory(GsonConverterFactory.create())</div><div class="line">          .client(client)</div><div class="line">          .build();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Retrofit&lt;/code&gt;是&lt;code&gt;square&lt;/code&gt;公司全家桶中的一员。在okhttp基础上封装的一个网络请求框架。其他废话就不多说了。有几篇不错的文章，可以看一下。&lt;br&gt;&lt;a href=&quot;https://square.github.io/retrofit/&quot;&gt;官方介绍&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;amp;tid=1117&quot;&gt;深入浅出 Retrofit，这么牛逼的框架你们还不来看看？&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://mobupiaobo.gitbooks.io/retrofit-2-0/content/&quot;&gt;Retrofit2.0&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;集成&quot;&gt;&lt;a href=&quot;#集成&quot; class=&quot;headerlink&quot; title=&quot;集成&quot;&gt;&lt;/a&gt;集成&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;compile &amp;apos;com.squareup.retrofit2:retrofit:2.1.0&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="android" scheme="http://m.magicer.xyz/tags/android/"/>
    
      <category term="retrofit" scheme="http://m.magicer.xyz/tags/retrofit/"/>
    
  </entry>
  
  <entry>
    <title>EventBus3.0的使用</title>
    <link href="http://m.magicer.xyz/2017/01/android-eventbus3-basic/"/>
    <id>http://m.magicer.xyz/2017/01/android-eventbus3-basic/</id>
    <published>2017-01-12T12:55:21.000Z</published>
    <updated>2017-06-03T05:40:44.020Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.magicer.xyz/2017/01/android-eventbus3-basic/" target="_blank" rel="external">原文地址http://blog.magicer.xyz/2017/01/android-eventbus3-basic/</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>EventBus</code>是<code>http://greenrobot.org/</code>出的一个<code>发布者/订阅者</code>（<code>Publisher/Subscriber</code>）的事件总线。主要是用来在<code>Android</code>各个组件之间进行消息传递的。能够很好地对发布者和订阅者之间进行解耦。<br><a id="more"></a><br>下图是官方给出的一个示意图：<br><img src="/image/Android/eventbus/eventbus_3.png" height="299" width="800"></p>
<h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p> 在项目的<code>build.gradle</code>文件中添加如下依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;org.greenrobot:eventbus:3.0.0&apos;</div></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="发布者Publisher"><a href="#发布者Publisher" class="headerlink" title="发布者Publisher"></a>发布者Publisher</h3><p> 我们使用EventBus发布消息的时候很方便，只需要一句话就可以。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().post(<span class="string">"hello"</span>);</div></pre></td></tr></table></figure></p>
<p>在这里我们发布的可以是基本数据类型，可以是字符串，也可以是对象。</p>
<h3 id="订阅者Subscriber"><a href="#订阅者Subscriber" class="headerlink" title="订阅者Subscriber"></a>订阅者Subscriber</h3><p> 当我们需要在一个<code>Activity</code>或者<code>Fragment</code>中订阅事件时。我们需要注册<code>EventBus</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().register(<span class="keyword">this</span>);</div></pre></td></tr></table></figure></p>
<p>当我们注册了<code>EventBus</code>之后我们就需要取消注册。一般在<code>Activity</code>或<code>Fragment</code>销毁的时候注销。注销的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().unregister(<span class="keyword">this</span>);</div></pre></td></tr></table></figure></p>
<h3 id="Subscriber"><a href="#Subscriber" class="headerlink" title="@Subscriber"></a>@Subscriber</h3><p> 当我们注册了<code>EventBus</code>之后。我们就需要写一个方法。来对事件进行处理。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Subscribe</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String strging)</span></span>&#123;</div><div class="line">    Log.i(<span class="string">"temp"</span>,<span class="string">"printf "</span>+string);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里。<code>EventBus</code>没有对函数的命进行规定。只需要加上注解<code>@Subscribe</code>，方法为<code>public void</code>即可。只要方法的参数跟<code>post</code>时的类型一致即可接受到改事件。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p> 比如说现在我们有个需求是。点击一个按钮就退出应用程序。那么我们使用EventBus可以怎么实现呢？<br>首先。我们可以在<code>BaseActivity</code>中注册退出应用程序的时间，让其他的<code>Activity</code>都集成该类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActvity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        EventBus.getDefault().register(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Subscribe</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitApp</span><span class="params">(ExitApp exitApp)</span></span>&#123;</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        EventBus.getDefault().unregister(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这时候我们只需要在按钮的点击时间中发送改消息即可了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().post(new ExistApp());</div></pre></td></tr></table></figure></p>
<p>事件类<code>ExistApp</code>可以随意，这里只是用来表明语义。</p>
<h2 id="Subscribe-threadMode-xxx"><a href="#Subscribe-threadMode-xxx" class="headerlink" title="@Subscribe(threadMode = xxx)"></a>@Subscribe(threadMode = xxx)</h2><p>在上面的例子中，我们并没有制定<code>@Subscriber</code>函数的线程。此时默认为：<code>ThreadMode.POSTING</code><br><code>ThreadMode</code>是一个枚举类型。它的值有： <code>POSTING</code>, <code>MAIN</code>, <code>BACKGROUND</code>, <code>ASYNC</code>.源码中的注释写的很详细，见参考中<code>ThreadMode</code>的代码。<br>简单的说就是。</p>
<ul>
<li><code>POSTING:</code> Subscriber在发布消息（调用post函数的线程）的线程中执行。</li>
<li><code>MAIN:</code>  Subscriber将在Android主线程中执行。</li>
<li><code>BACKGROUND:</code>  Subscriber在后台线程中执行</li>
<li><code>ASYNC:</code> Subscriber在异步线程，也就是在独立的线程中执行。</li>
</ul>
<h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>我们可以通过<code>@Subscribe(priority = 100)</code>指定一个Subscriber函数的优先级.默认的优先级是0。高优先级的Subscriber将会优先订阅事件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Subscribe</span>(priority = <span class="number">100</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(String string)</span></span>&#123;</div><div class="line">        Log.i(<span class="string">"subscriber"</span>,<span class="string">"subscriber "</span>+string);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="取消事件分发"><a href="#取消事件分发" class="headerlink" title="取消事件分发"></a>取消事件分发</h2><p> 在某些情况下，我们不想让事件被继续分发了。那么我们就可以在<code>onEvent</code>(这里的onEvent名称任意)中取消事件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(String string)</span></span>&#123;</div><div class="line">    Log.i(<span class="string">"subscriber"</span>,<span class="string">"subscriber "</span>+string);</div><div class="line">    EventBus.getDefault().cancelEventDelivery(exitApp);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="ProGuard"><a href="#ProGuard" class="headerlink" title="ProGuard"></a>ProGuard</h2><p>这里参考官方文档中的代码：<a href="http://greenrobot.org/eventbus/documentation/proguard/" target="_blank" rel="external">点我进入官方文档ProGuard部分</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-keepattributes *Annotation*</div><div class="line">-keepclassmembers class ** &#123;</div><div class="line">    @org.greenrobot.eventbus.Subscribe &lt;methods&gt;;</div><div class="line">&#125;</div><div class="line">-keep enum org.greenrobot.eventbus.ThreadMode &#123; *; &#125;</div><div class="line"> </div><div class="line"># Only required if you use AsyncExecutor</div><div class="line">-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent &#123;</div><div class="line">    &lt;init&gt;(java.lang.Throwable);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Android-Studio插件"><a href="#Android-Studio插件" class="headerlink" title="Android Studio插件"></a>Android Studio插件</h2><p>在这里我推荐个<code>Android Studio</code>的插件：<a href="https://github.com/kgmyshin/eventbus-intellij-plugin" target="_blank" rel="external">EventBus Intellij Plugin</a>。<br>该插件会在代码的左侧显示一个Android机器人的图标，点击该图标能够列出所有的<code>Subscriber</code>事件和<code>Publisher</code><br><img src="/image/Android/eventbus/eventbus_intellij_plugin.gif" height="400" width="600"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://greenrobot.org/eventbus/documentation" target="_blank" rel="external">官方文档</a><br><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">源码地址：Github</a><br><a href="http://greenrobot.org/files/eventbus/javadoc/3.0/" target="_blank" rel="external">EventBus JavaDoc</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Each event handler method has a thread mode, which determines in which thread the method is to be called by EventBus.</div><div class="line"> * EventBus takes care of threading independently from the posting thread.</div><div class="line"> * </div><div class="line"> * <span class="doctag">@see</span> EventBus#register(Object)</div><div class="line"> * <span class="doctag">@author</span> Markus</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ThreadMode &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Subscriber will be called in the same thread, which is posting the event. This is the default. Event delivery</div><div class="line">     * implies the least overhead because it avoids thread switching completely. Thus this is the recommended mode for</div><div class="line">     * simple tasks that are known to complete is a very short time without requiring the main thread. Event handlers</div><div class="line">     * using this mode must return quickly to avoid blocking the posting thread, which may be the main thread.</div><div class="line">     */</div><div class="line">    POSTING,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Subscriber will be called in Android's main thread (sometimes referred to as UI thread). If the posting thread is</div><div class="line">     * the main thread, event handler methods will be called directly. Event handlers using this mode must return</div><div class="line">     * quickly to avoid blocking the main thread.</div><div class="line">     */</div><div class="line">    MAIN,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Subscriber will be called in a background thread. If posting thread is not the main thread, event handler methods</div><div class="line">     * will be called directly in the posting thread. If the posting thread is the main thread, EventBus uses a single</div><div class="line">     * background thread, that will deliver all its events sequentially. Event handlers using this mode should try to</div><div class="line">     * return quickly to avoid blocking the background thread.</div><div class="line">     */</div><div class="line">    BACKGROUND,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Event handler methods are called in a separate thread. This is always independent from the posting thread and the</div><div class="line">     * main thread. Posting events never wait for event handler methods using this mode. Event handler methods should</div><div class="line">     * use this mode if their execution might take some time, e.g. for network access. Avoid triggering a large number</div><div class="line">     * of long running asynchronous handler methods at the same time to limit the number of concurrent threads. EventBus</div><div class="line">     * uses a thread pool to efficiently reuse threads from completed asynchronous event handler notifications.</div><div class="line">     */</div><div class="line">    ASYNC</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.magicer.xyz/2017/01/android-eventbus3-basic/&quot;&gt;原文地址http://blog.magicer.xyz/2017/01/android-eventbus3-basic/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;EventBus&lt;/code&gt;是&lt;code&gt;http://greenrobot.org/&lt;/code&gt;出的一个&lt;code&gt;发布者/订阅者&lt;/code&gt;（&lt;code&gt;Publisher/Subscriber&lt;/code&gt;）的事件总线。主要是用来在&lt;code&gt;Android&lt;/code&gt;各个组件之间进行消息传递的。能够很好地对发布者和订阅者之间进行解耦。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="EventBus3.0" scheme="http://m.magicer.xyz/tags/EventBus3-0/"/>
    
      <category term="Android" scheme="http://m.magicer.xyz/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 6.0之后的动态权限</title>
    <link href="http://m.magicer.xyz/2017/01/android-api-23-permission/"/>
    <id>http://m.magicer.xyz/2017/01/android-api-23-permission/</id>
    <published>2017-01-03T13:12:09.000Z</published>
    <updated>2017-06-03T05:40:38.964Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.magicer.xyz/2017/01/android-api-23-permission/" target="_blank" rel="external">原文地址:http://blog.magicer.xyz/2017/01/android-api-23-permission/</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  在Android 6.0之前，开发Android应用程序的时，开发者需要使用什么权限只需要在<code>AndroidManifest.xml</code>文件中显示的声明即可。如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>但是，在Android 6.0之后，Android对应用程序的权限进行了进一步的规范。分出来危险权限和一般权限，当我们需要危险权限的时候需要在运行时进行授权。这样做也有好处。对于一些应用用户的选择更多了。<br><a id="more"></a></p>
<h2 id="权限分类"><a href="#权限分类" class="headerlink" title="权限分类"></a>权限分类</h2><p><a href="https://developer.android.google.cn/training/permissions/index.html" target="_blank" rel="external">官方权限教程</a><br>当我们需要用到危险权限时，我们就需要动态的申请权限，那么危险权限有哪些呢？</p>
<h3 id="危险权限"><a href="#危险权限" class="headerlink" title="危险权限"></a>危险权限</h3><p><img src="https://segmentfault.com/img/bVHIe5?w=871&amp;h=910" alt="图片描述"></p>
<h3 id="一般权限"><a href="#一般权限" class="headerlink" title="一般权限"></a>一般权限</h3><p>对于常规的权限我们只需要在清单文件中注册即可，比如网络权限。</p>
<h2 id="动态注册权限"><a href="#动态注册权限" class="headerlink" title="动态注册权限"></a>动态注册权限</h2><p>如果您的应用需要危险权限，则每次执行需要这一权限的操作时您都必须检查自己是否具有该权限。用户始终可以自由调用此权限，因此，即使应用昨天使用了相机，它不能假设自己今天仍具有该权限。</p>
<p>要检查您是否具有某项权限，请调用<code>ContextCompat.checkSelfPermission()</code> 方法。例如，以下代码段显示了如何检查 Activity 是否具有在日历中进行写入的权限：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Assume thisActivity is the current activity</span></div><div class="line"><span class="keyword">int</span> permissionCheck = ContextCompat.checkSelfPermission(thisActivity,</div><div class="line">        Manifest.permission.WRITE_CALENDAR);</div></pre></td></tr></table></figure>
<p>如果应用具有此权限，方法将返回 <code>PackageManager.PERMISSION_GRANTED</code>，并且应用可以继续操作。如果应用不具有此权限，方法将返回 <code>PERMISSION_DENIED</code>，且应用必须明确向用户要求权限。</p>
<p>以上是官方文档中关于检测权限的说明。<br>先来个小demo。看下怎么动态的请求权限，也可以看<a href="https://developer.android.google.cn/training/permissions/requesting.html#perm-request" target="_blank" rel="external">官方文档</a>中的介绍。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERMISSION_REQUEST_CODE = <span class="number">1</span>; <span class="comment">//权限请求码</span></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    <span class="keyword">if</span> (checkPermission(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;</div><div class="line">        <span class="comment">//获取权限后的操作。读取文件</span></div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//请求权限</span></div><div class="line">        ActivityCompat.requestPermissions(<span class="keyword">this</span>,</div><div class="line">                <span class="keyword">new</span> String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,</div><div class="line">                PERMISSION_REQUEST_CODE);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 检测权限是否授权</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkPermission</span><span class="params">(Context context, String permission)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> PackageManager.PERMISSION_GRANTED == ContextCompat.checkSelfPermission(context,permission);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    <span class="keyword">switch</span> (requestCode)&#123;</div><div class="line">        <span class="keyword">case</span> PERMISSION_REQUEST_CODE:</div><div class="line">            <span class="keyword">if</span> (grantResults.length &gt;<span class="number">0</span> &amp;&amp;</div><div class="line">                    grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED)&#123;</div><div class="line">                <span class="comment">//得到了授权</span></div><div class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"授权成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//未授权</span></div><div class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"授权失败"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当用户点击了<code>禁止</code>按钮后，当我们下次还需要该权限怎么办？  <a href="https://developer.android.google.cn/reference/android/support/v4/app/ActivityCompat.html#shouldShowRequestPermissionRationale%28android.app.Activity,%20java.lang.String%29" target="_blank" rel="external">shouldShowRequestPermissionRationale()</a>函数会在用户点击了禁止后返回<code>true</code>，我们可以在该方法返回true时在提示用户开启权限。<br>代码跟上面的差不多。可以简要看一下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERMISSION_REQUEST_CODE = <span class="number">1</span>; <span class="comment">//权限请求码</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button mButton;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mButton = (Button) findViewById(R.id.activity_main_storage_btn);</div><div class="line">        mButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                storagePermission();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">storagePermission</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (checkPermission(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;</div><div class="line">            <span class="comment">//获取权限后的操作。读取文件</span></div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">//            //请求权限</span></div><div class="line"><span class="comment">//            ActivityCompat.requestPermissions(this,</span></div><div class="line"><span class="comment">//                    new String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,</span></div><div class="line"><span class="comment">//                    PERMISSION_REQUEST_CODE);</span></div><div class="line">            <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;</div><div class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"需要开启存储权限"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                showRequestPermissionDialog(<span class="keyword">new</span> String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,PERMISSION_REQUEST_CODE);</div><div class="line"></div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                ActivityCompat.requestPermissions(<span class="keyword">this</span>,</div><div class="line">                        <span class="keyword">new</span> String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,</div><div class="line">                        PERMISSION_REQUEST_CODE);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showRequestPermissionDialog</span><span class="params">(<span class="keyword">final</span> String[] permissions, <span class="keyword">final</span> <span class="keyword">int</span> requestCode)</span> </span>&#123;</div><div class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>);</div><div class="line">        builder.setMessage(<span class="string">"使用该功能需要使用SD卡权限\n是否再次开启权限"</span>);</div><div class="line">        builder.setPositiveButton(<span class="string">"是"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>,permissions,requestCode);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        builder.setNegativeButton(<span class="string">"否"</span>,<span class="keyword">null</span>);</div><div class="line">        builder.setCancelable(<span class="keyword">true</span>);</div><div class="line">        builder.show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 检测权限是否授权</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkPermission</span><span class="params">(Context context, String permission)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> PackageManager.PERMISSION_GRANTED == ContextCompat.checkSelfPermission(context,permission);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">        <span class="keyword">switch</span> (requestCode)&#123;</div><div class="line">            <span class="keyword">case</span> PERMISSION_REQUEST_CODE:</div><div class="line">                <span class="keyword">if</span> (grantResults.length &gt;<span class="number">0</span> &amp;&amp;</div><div class="line">                        grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED)&#123;</div><div class="line">                    <span class="comment">//得到了授权</span></div><div class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">"授权成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//未授权</span></div><div class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">"授权失败"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.magicer.xyz/2017/01/android-api-23-permission/&quot;&gt;原文地址:http://blog.magicer.xyz/2017/01/android-api-23-permission/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;  在Android 6.0之前，开发Android应用程序的时，开发者需要使用什么权限只需要在&lt;code&gt;AndroidManifest.xml&lt;/code&gt;文件中显示的声明即可。如下：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;uses-permission&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.permission.INTERNET&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;uses-permission&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;uses-permission&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.permission.READ_EXTERNAL_STORAGE&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是，在Android 6.0之后，Android对应用程序的权限进行了进一步的规范。分出来危险权限和一般权限，当我们需要危险权限的时候需要在运行时进行授权。这样做也有好处。对于一些应用用户的选择更多了。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="android" scheme="http://m.magicer.xyz/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>使用SpannableStringBuilder打造超炫酷的TextView</title>
    <link href="http://m.magicer.xyz/2016/12/android-SpannableStringBuilder-textview-rich-text/"/>
    <id>http://m.magicer.xyz/2016/12/android-SpannableStringBuilder-textview-rich-text/</id>
    <published>2016-12-19T13:53:08.000Z</published>
    <updated>2017-06-03T05:27:24.268Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.magicer.xyz/2016/12/android-SpannableStringBuilder-textview-rich-text/" target="_blank" rel="external">原文地址:http://blog.magicer.xyz/2016/12/android-SpannableStringBuilder-textview-rich-text/</a></p>
<p>   前段时间项目中使用到了一种效果是更改textview中制定字符串的颜色.于是就查找了下资料,发现了使用<code>SpannableStringBuilder</code>可以很轻易的就实现,并不用使用自定义View.那么就直接先来个代码练练手,运行看下效果.<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String content = <span class="string">"NO ZUO NO DIE!"</span>;</div><div class="line">SpannableStringBuilder spannableStringBuilder = <span class="keyword">new</span> SpannableStringBuilder(content);</div><div class="line">ForegroundColorSpan colorSpan = <span class="keyword">new</span> ForegroundColorSpan(Color.parseColor(<span class="string">"#009688"</span>));</div><div class="line">spannableStringBuilder.setSpan(colorSpan,<span class="number">3</span>,<span class="number">6</span>, Spanned.SPAN_EXCLUSIVE_INCLUSIVE);</div><div class="line">mTextView.setText(spannableStringBuilder);</div></pre></td></tr></table></figure></p>
<p>   运行完了之后肯定会有些疑惑,最主要的<code>SpannableStringBuilder</code>是什么鬼?  <code>ForegroundColorSpan</code>又是什么? <code>Spanned.SPAN_EXCLUSIVE_INCLUSIVE</code> 是什么意思? 那么我们来一个一个的解释. <a id="more"></a></p>
   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSpan</span> <span class="params">(Object what,  //设置的样式,看完下面的就明白了.</span></span></div><div class="line">             <span class="keyword">int</span> start,   //开始的位置. 索引是从<span class="number">0</span>开始的.</div><div class="line">             <span class="keyword">int</span> end,   //样式结束的位置,不包括end</div><div class="line">             <span class="keyword">int</span> flags) <span class="comment">// 样式的标志. 下面详细介绍</span></div></pre></td></tr></table></figure>
<p>flags:</p>
<ul>
<li><code>Spannable.SPAN_EXCLUSIVE_INCLUSIVE</code> : 在 Span前面输入的字符不应用 Span的效果，在后面输入的字符应用Span效果。</li>
<li><code>Spannable.SPAN_INCLUSIVE_EXCLUSIVE</code>:  在 Span前面输入的字符应用 Span 的效果，在后面输入的字符不应用Span效果。</li>
<li><code>Spanned.SPAN_INCLUSIVE_INCLUSIVE</code>:   前后都包括</li>
<li><code>Spanned.SPAN_EXCLUSIVE_EXCLUSIVE</code>: 前后都不包括</li>
</ul>
<h3 id="SpannableStringBuilder是什么鬼"><a href="#SpannableStringBuilder是什么鬼" class="headerlink" title="SpannableStringBuilder是什么鬼?"></a>SpannableStringBuilder是什么鬼?</h3><p>  官方文档是这样写的.  <code>This is the class for text whose content and markup can both be changed.</code><br>很简单,主要作用就是给文本内容添加样式的.主要通过<code>setSpan</code>方法设置样式.就像上面程序中那样. <code>setSpan</code>方法的三个参数是什么意思呢</p>
<h3 id="ForegroundColorSpan-是什么"><a href="#ForegroundColorSpan-是什么" class="headerlink" title="ForegroundColorSpan 是什么?"></a>ForegroundColorSpan 是什么?</h3><p>  根据它的意思就可以猜到,他是用来改变前景色的(也就是文本颜色).有文本颜色那是不是也有背景颜色等其他的呢?那是肯定的啦.只改变个文本颜色岂不是太low了呀.<br>  那么都是主要的都是有哪些呢?<br><img src="/image/spannablestringbuilder/spannablestringbuilder_rich_text.png" height="483" width="982" alt="span类"></p>
<p>这个类里面的之类都是可以的. <a href="https://developer.android.google.cn/reference/android/text/style/CharacterStyle.html" target="_blank" rel="external">点我查看,无需翻墙</a><br>这些类跟<code>ForegroundColorSpan</code>都是大同小异的.掌握了一个,其他的也就掌握了.<br>我认为常用的是<code>ImageSpan</code>,<code>ClickableSpan</code>,<code>ForegroundColorSpan</code></p>
<h3 id="再来几个代码练练"><a href="#再来几个代码练练" class="headerlink" title="再来几个代码练练"></a>再来几个代码练练</h3><p>  再来个<code>ImageSpan</code>跟<code>ForegroundColorSpan</code>混合的的看下效果.<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String content = <span class="string">"NO ZUO NO DIE!"</span>;</div><div class="line">SpannableStringBuilder spannableStringBuilder = <span class="keyword">new</span> SpannableStringBuilder(content);</div><div class="line">ForegroundColorSpan colorSpan = <span class="keyword">new</span> ForegroundColorSpan(Color.parseColor(<span class="string">"#009688"</span>));</div><div class="line">spannableStringBuilder.setSpan(colorSpan,<span class="number">3</span>,<span class="number">6</span>, Spanned.SPAN_INCLUSIVE_INCLUSIVE);</div><div class="line">ImageSpan imageSpan = <span class="keyword">new</span> ImageSpan(<span class="keyword">this</span>,R.mipmap.ic_launcher);</div><div class="line">spannableStringBuilder.setSpan(imageSpan,<span class="number">2</span>,<span class="number">3</span>,Spanned.SPAN_EXCLUSIVE_INCLUSIVE);</div><div class="line">mTextView.setText(spannableStringBuilder);</div></pre></td></tr></table></figure></p>
<p>  最后来张效果图:</p>
<p><img src="/image/spannablestringbuilder/spannablestringbuilder_img.png" height="603" width="326" alt="效果图"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.magicer.xyz/2016/12/android-SpannableStringBuilder-textview-rich-text/&quot;&gt;原文地址:http://blog.magicer.xyz/2016/12/android-SpannableStringBuilder-textview-rich-text/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   前段时间项目中使用到了一种效果是更改textview中制定字符串的颜色.于是就查找了下资料,发现了使用&lt;code&gt;SpannableStringBuilder&lt;/code&gt;可以很轻易的就实现,并不用使用自定义View.那么就直接先来个代码练练手,运行看下效果.&lt;br&gt;   &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;String content = &lt;span class=&quot;string&quot;&gt;&quot;NO ZUO NO DIE!&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SpannableStringBuilder spannableStringBuilder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SpannableStringBuilder(content);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ForegroundColorSpan colorSpan = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ForegroundColorSpan(Color.parseColor(&lt;span class=&quot;string&quot;&gt;&quot;#009688&quot;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;spannableStringBuilder.setSpan(colorSpan,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, Spanned.SPAN_EXCLUSIVE_INCLUSIVE);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mTextView.setText(spannableStringBuilder);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;   运行完了之后肯定会有些疑惑,最主要的&lt;code&gt;SpannableStringBuilder&lt;/code&gt;是什么鬼?  &lt;code&gt;ForegroundColorSpan&lt;/code&gt;又是什么? &lt;code&gt;Spanned.SPAN_EXCLUSIVE_INCLUSIVE&lt;/code&gt; 是什么意思? 那么我们来一个一个的解释.
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="textview" scheme="http://m.magicer.xyz/tags/textview/"/>
    
      <category term="android" scheme="http://m.magicer.xyz/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android基础知识之  Toolbar 的使用</title>
    <link href="http://m.magicer.xyz/2016/10/toolbar-basic/"/>
    <id>http://m.magicer.xyz/2016/10/toolbar-basic/</id>
    <published>2016-10-31T09:07:23.000Z</published>
    <updated>2017-03-23T16:07:26.485Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.magicer.xyz/2016/10/toolbar-basic/" target="_blank" rel="external">原文地址:http://blog.magicer.xyz/2016/10/toolbar-basic/</a><br>  Toolbar是Android5.0推出的,用来替代ActionBar的控件.可以高度的自定义,使用灵活.官方的ToolBar是必须在5.0以上的系统才能使用,<br>  如果需要在低版本中使用.需要使用<code>support v7</code>包中的Toolbar.<br>下一是官网的Toolbar的介绍:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Toolbar</div><div class="line">extends ViewGroup</div><div class="line">java.lang.Object</div><div class="line">   ↳    android.view.View</div><div class="line">       ↳    android.view.ViewGroup</div><div class="line">           ↳    android.support.v7.widget.Toolbar</div></pre></td></tr></table></figure></p>
<p><img src="/image/Android/toolbar-basic.png" height="572" width="1026"><br><a id="more"></a></p>
<h2 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h2><p>  要使用ToolBar需要将activity的ActionBar隐藏掉.那么如何隐藏呢?有三种方法.下面分别介绍</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h3><p> 在<code>res/values/styles.xml</code>文件中修改<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.Base"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat"</span>&gt;</span><span class="xml"></span></div><div class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p> 也可以直接使用没有ActionBar的主题<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="undefined"></span></div></pre></td></tr></table></figure></p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h3><p>在清单文件中修改制定activity的主题,如下所示:</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"MainActivity"</span></span></div><div class="line">           <span class="attr">android:theme</span>=<span class="string">"@style/Theme.AppCompat.Light.NoActionBar"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三:"></a>方法三:</h3><p>  直接在代码中取消. 在setContentView之前.</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line">setContentView(R.layout.activity_main);</div><div class="line"><span class="comment">//supportRequestWindowFeature(Window.FEATURE_NO_TITLE);  在AppCompatActivity中</span></div></pre></td></tr></table></figure>
<h2 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h2><p>  在布局文件中.添加如下代码. 位置不固定.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"?android:attr/actionBarSize"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimaryDark"</span></div><div class="line">    <span class="attr">app:title</span>=<span class="string">"Title"</span></div><div class="line">    <span class="attr">app:titleTextColor</span>=<span class="string">"#222222"</span></div><div class="line">    <span class="attr">app:logo</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">    <span class="attr">app:subtitle</span>=<span class="string">"subtitle"</span>&gt;<span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>  title 用来设置标题.subtitle设置副标题  titleTextColor用来设置标题字体颜色.background用来设置背景颜色..效果如下:</p>
<p><img src="/image/Android/toolbar-basic-xml.png" height="591" width="323"><br>在java代码中也可以动态的设置这些值.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  mToolbar.setTitle(<span class="string">"JavaTitle"</span>);</div><div class="line">        mToolbar.setSubtitle(<span class="string">"JavaSubTitle"</span>);</div><div class="line">        mToolbar.setLogo(R.mipmap.ic_launcher);</div><div class="line">        mToolbar.setNavigationIcon(android.R.drawable.ic_input_delete);</div><div class="line">        mToolbar.setOverflowIcon(ContextCompat.getDrawable(<span class="keyword">this</span>, android.R.drawable.ic_menu_more));</div><div class="line"><span class="comment">//        setActionBar(mToolbar);  //activity中</span></div><div class="line">        setSupportActionBar(mToolbar);   <span class="comment">//AppCompatActivity中</span></div></pre></td></tr></table></figure>
<h2 id="添加Menu"><a href="#添加Menu" class="headerlink" title="添加Menu"></a>添加Menu</h2><p>要添加menu首先我们需要有menu,在这里我选择在<code>res/menu/</code>中创建<code>main.xml</code>来定义menu文件.代码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">      <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/add"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@android:drawable/ic_menu_add"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"Add"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"never|withText"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/delete"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@android:drawable/ic_menu_delete"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"Delete"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"never|withText"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/edit"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@android:drawable/ic_menu_edit"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"Edit"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"never|withText"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/email"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@android:drawable/sym_action_email"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"Email"</span></div><div class="line">        <span class="attr">app:showAsAction</span>=<span class="string">"never|withText"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<p>下面是java文件中的代码.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">       getMenuInflater().inflate(R.menu.main, menu);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">       <span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">           <span class="keyword">case</span> android.R.id.home: </div><div class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"您点击了NavigationIcon"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> R.id.add:</div><div class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Add"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> R.id.delete:</div><div class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Delete"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> R.id.edit:</div><div class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Edit"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> R.id.email:</div><div class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Email"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p><img src="/image/Android/toolbar-basic-java-1.png" height="603" width="327" alt="Toolbar  Java"></p>
<h2 id="显示Menu中的Icon"><a href="#显示Menu中的Icon" class="headerlink" title="显示Menu中的Icon"></a>显示Menu中的Icon</h2><p>在写到这里之后.我们会发现.隐藏的menu是不显示icon的,那么我们怎么设置呢:<br>只需要重新一下方法:  这里的activity是    <code>AppCompatActivity</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onPrepareOptionsPanel</span><span class="params">(View view, Menu menu)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (menu != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (menu.getClass() == MenuBuilder.class) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Method m = menu.getClass().getDeclaredMethod(<span class="string">"setOptionalIconsVisible"</span>, Boolean.TYPE);</div><div class="line">                m.setAccessible(<span class="keyword">true</span>);</div><div class="line">                m.invoke(menu, <span class="keyword">true</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                Log.i(<span class="string">"tag"</span>, <span class="string">"onPrepareOptionsPanel: "</span> +</div><div class="line">                        getClass().getSimpleName() +</div><div class="line">                        <span class="string">"onMenuOpened...unable to set icons for overflow menu"</span></div><div class="line">                        + e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onPrepareOptionsPanel(view, menu);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下:</p>
<p><img src="/image/Android/toolbar-basic-java-icon.png" height="600" width="327" alt="Toolbar Image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.magicer.xyz/2016/10/toolbar-basic/&quot;&gt;原文地址:http://blog.magicer.xyz/2016/10/toolbar-basic/&lt;/a&gt;&lt;br&gt;  Toolbar是Android5.0推出的,用来替代ActionBar的控件.可以高度的自定义,使用灵活.官方的ToolBar是必须在5.0以上的系统才能使用,&lt;br&gt;  如果需要在低版本中使用.需要使用&lt;code&gt;support v7&lt;/code&gt;包中的Toolbar.&lt;br&gt;下一是官网的Toolbar的介绍:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Toolbar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;extends ViewGroup&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;java.lang.Object&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   ↳    android.view.View&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       ↳    android.view.ViewGroup&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           ↳    android.support.v7.widget.Toolbar&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/Android/toolbar-basic.png&quot; height=&quot;572&quot; width=&quot;1026&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
    
      <category term="Toolbar" scheme="http://m.magicer.xyz/tags/Toolbar/"/>
    
  </entry>
  
</feed>
